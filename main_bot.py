#!/usr/bin/env python3
"""
ü§ñ Telegram News Monitor Bot (–í–µ—Ä—Å–∏—è —Å –±–æ—Ç–æ–º)
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞

–î–ª—è –∑–∞–ø—É—Å–∫–∞: python main_bot.py
"""

import asyncio
import json
import logging
import yaml
import sys
import os
import pytz
from datetime import datetime
from pathlib import Path
from typing import Dict, List
from dotenv import load_dotenv

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from src.telegram_client import TelegramMonitor
from src.telegram_bot import TelegramBot, create_bot_from_config

from src.database import DatabaseManager
from src.news_processor import NewsProcessor
from src.system_monitor import SystemMonitor
from src.web_interface import WebInterface

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from loguru import logger


class NewsMonitorWithBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self, config_path: str = "config/config.yaml"):
        self.config_path = config_path
        self.config = {}
        self.running = False
        self.monitoring_active = True  # –§–ª–∞–≥ –¥–ª—è –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.database = None
        self.telegram_monitor = None
        self.telegram_bot = None

        self.news_processor = None
        self.system_monitor = None
        self.web_interface = None
        
        logger.info("ü§ñ News Monitor Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ö—ç—à –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        self.subscription_cache_file = "config/subscriptions_cache.json"
        self.subscribed_channels = set()
        
        # –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø
        self.processed_media_groups = set()
        
        # –ê–ª–µ—Ä—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        self.alert_keywords = {}
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
        self.regions_config = {}
    
    async def pause_monitoring(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        logger.info("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        self.monitoring_active = False
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def resume_monitoring(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        logger.info("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        self.monitoring_active = True
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def convert_markdown_to_html(self, text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ HTML –¥–ª—è Telegram"""
        if not text:
            return text
        
        import re
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–Ω—ã–µ **—Ç–µ–∫—Å—Ç**
        text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
        
        # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º **—Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö **)
        text = re.sub(r'^(\*\*)(.*?)$', r'<b>\2</b>', text, flags=re.MULTILINE)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º *—Ç–µ–∫—Å—Ç* –≤ <i>—Ç–µ–∫—Å—Ç</i> (–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ *)
        text = re.sub(r'(?<!\*)\*([^*]+)\*(?!\*)', r'<i>\1</i>', text)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–ø–∞—Å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã (–Ω–æ –Ω–µ –Ω–∞—à–∏ —Ç–µ–≥–∏)
        text = text.replace('<', '&lt;').replace('>', '&gt;')
        text = text.replace('&lt;b&gt;', '<b>').replace('&lt;/b&gt;', '</b>')
        text = text.replace('&lt;i&gt;', '<i>').replace('&lt;/i&gt;', '</i>')
        text = text.replace('&lt;u&gt;', '<u>').replace('&lt;/u&gt;', '</u>')
        text = text.replace('&lt;code&gt;', '<code>').replace('&lt;/code&gt;', '</code>')
        
        return text
    
    def load_config(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
            load_dotenv()
            
            with open(self.config_path, 'r', encoding='utf-8') as f:
                self.config = yaml.safe_load(f)
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_path}")
            
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            bot_token = os.getenv('BOT_TOKEN')
            bot_chat_id = os.getenv('BOT_CHAT_ID')
            api_id = os.getenv('TELEGRAM_API_ID')
            api_hash = os.getenv('TELEGRAM_API_HASH')
            target_group = os.getenv('TARGET_GROUP_ID')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Ñ–∞–π–ª–æ–º)
            if bot_token:
                self.config.setdefault('bot', {})['token'] = bot_token
            if bot_chat_id:
                self.config.setdefault('bot', {})['chat_id'] = int(bot_chat_id)
            if api_id:
                self.config.setdefault('telegram', {})['api_id'] = int(api_id)
            if api_hash:
                self.config.setdefault('telegram', {})['api_hash'] = api_hash
            if target_group:
                self.config.setdefault('output', {})['target_group'] = int(target_group)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
            if 'bot' not in self.config:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞")
                logger.info("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ü–∏—é 'bot' –≤ config.yaml")
                return False
            
            bot_config = self.config['bot']
            if not bot_config.get('token') or not bot_config.get('chat_id'):
                logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ chat_id")
                logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ config.yaml")
                return False
            
            if str(bot_config['token']).startswith("–ó–ê–ú–ï–ù–ò–¢–ï_–ù–ê_"):
                logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                logger.info("üí° –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ (BOT_TOKEN=...)")
                return False
            
            return True
            
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def load_subscription_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.subscription_cache_file):
                with open(self.subscription_cache_file, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                    self.subscribed_channels = set(cache_data.get('subscribed_channels', []))
                    logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫: {len(self.subscribed_channels)} –∫–∞–Ω–∞–ª–æ–≤")
            else:
                self.subscribed_channels = set()
                logger.info("üìã –§–∞–π–ª –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            self.subscribed_channels = set()
    
    def save_subscription_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é config –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(os.path.dirname(self.subscription_cache_file), exist_ok=True)
            
            cache_data = {
                'subscribed_channels': list(self.subscribed_channels),
                'last_updated': datetime.now().isoformat()
            }
            
            with open(self.subscription_cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
                
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫: {len(self.subscribed_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    def is_channel_cached_as_subscribed(self, channel_username):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫–∞–Ω–∞–ª –≤ –∫—ç—à–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö"""
        return channel_username in self.subscribed_channels
    
    def add_channel_to_cache(self, channel_username):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ –∫—ç—à –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö"""
        self.subscribed_channels.add(channel_username)
        self.save_subscription_cache()
    
    def clear_subscription_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏)"""
        self.subscribed_channels.clear()
        self.save_subscription_cache()
        logger.info("üóëÔ∏è –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω")
    
    def load_alert_keywords(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            alerts_config = self.config.get('alerts', {})
            if not alerts_config.get('enabled', False):
                logger.info("üì¢ –ê–ª–µ—Ä—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return
            
            keywords_config = alerts_config.get('keywords', {})
            for category, data in keywords_config.items():
                words = data.get('words', [])
                emoji = data.get('emoji', 'üö®')
                priority = data.get('priority', False)
                
                self.alert_keywords[category] = {
                    'words': [word.lower() for word in words],
                    'emoji': emoji,
                    'priority': priority
                }
            
            total_words = sum(len(cat['words']) for cat in self.alert_keywords.values())
            logger.info(f"üì¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.alert_keywords)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–ª–µ—Ä—Ç–æ–≤, {total_words} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            self.alert_keywords = {}
    
    def load_regions_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ config.yaml"""
        try:
            regions_config = self.config.get('regions', {})
            if not regions_config:
                logger.warning("üìç –°–µ–∫—Ü–∏—è regions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã")
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self.regions_config = {
                    'general': {
                        'name': 'üì∞ –û–±—â–∏–µ',
                        'emoji': 'üì∞',
                        'description': '–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
                        'keywords': [],
                        'topic_id': None
                    }
                }
                return
            
            self.regions_config = {}
            for region_key, region_data in regions_config.items():
                self.regions_config[region_key] = {
                    'name': region_data.get('name', region_key),
                    'emoji': region_data.get('emoji', 'üìç'),
                    'description': region_data.get('description', ''),
                    'keywords': region_data.get('keywords', []),
                    'topic_id': region_data.get('topic_id'),
                    'created_at': region_data.get('created_at', '2025-08-26')
                }
            
            logger.info(f"üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.regions_config)} —Ä–µ–≥–∏–æ–Ω–æ–≤: {list(self.regions_config.keys())}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
            self.regions_config = {}
    
    def get_regions_list(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏"""
        regions = []
        for region_key, region_data in self.regions_config.items():
            regions.append({
                'key': region_key,
                'name': region_data['name'],
                'emoji': region_data['emoji'],
                'description': region_data['description'],
                'channels_count': self.get_region_channels_count(region_key),
                'topic_id': region_data['topic_id']
            })
        return regions
    
    def get_region_channels_count(self, region_key: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ"""
        try:
            with open('config/channels_config.yaml', 'r', encoding='utf-8') as f:
                import yaml
                channels_data = yaml.safe_load(f) or {}
            
            if 'regions' in channels_data and region_key in channels_data['regions']:
                channels = channels_data['regions'][region_key].get('channels', [])
                return len(channels)
            
            return 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_key}: {e}")
            return 0
    
    def add_new_region(self, region_key: str, region_name: str, region_emoji: str = 'üìç', 
                      region_description: str = '', region_keywords: list = None, 
                      topic_id: int = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            from datetime import datetime
            import yaml
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–≥–∏–æ–Ω–∞ –µ—â–µ –Ω–µ—Ç
            if region_key in self.regions_config:
                logger.warning(f"‚ö†Ô∏è –†–µ–≥–∏–æ–Ω {region_key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.regions_config[region_key] = {
                'name': region_name,
                'emoji': region_emoji,
                'description': region_description,
                'keywords': region_keywords or [],
                'topic_id': topic_id,
                'created_at': datetime.now().strftime('%Y-%m-%d')
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ config.yaml
            self.config.setdefault('regions', {})[region_key] = self.regions_config[region_key]
            
            with open(self.config_path, 'w', encoding='utf-8') as f:
                yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ channels_config.yaml
            try:
                with open('config/channels_config.yaml', 'r', encoding='utf-8') as f:
                    channels_config = yaml.safe_load(f) or {}
                
                if 'regions' not in channels_config:
                    channels_config['regions'] = {}
                
                channels_config['regions'][region_key] = {
                    'name': region_name,
                    'channels': []
                }
                
                with open('config/channels_config.yaml', 'w', encoding='utf-8') as f:
                    yaml.dump(channels_config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è channels_config.yaml: {e}")
            
            logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω: {region_name} ({region_key})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            return False
    
    def check_alert_keywords(self, text: str) -> tuple:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (is_alert, category, emoji, priority, matched_words)
        """
        if not self.alert_keywords or not text:
            return False, None, None, False, []
        
        text_lower = text.lower()
        
        for category, data in self.alert_keywords.items():
            matched_words = []
            for word in data['words']:
                if word in text_lower:
                    matched_words.append(word)
            
            if matched_words:
                return True, category, data['emoji'], data['priority'], matched_words
        
        return False, None, None, False, []
    
    def format_alert_message(self, original_text: str, channel_username: str, emoji: str, category: str, matched_words: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–ª–µ—Ä—Ç–æ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–ª–µ—Ä—Ç–∞
            alert_header = f"\n{emoji} <b>–í–ê–ñ–ù–ê–Ø –ù–û–í–û–°–¢–¨!</b> {emoji}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_names = {
                'emergency': 'üî• –ü–û–ñ–ê–†/–ß–°',
                'accident': 'üöó –î–¢–ü/–ê–í–ê–†–ò–Ø', 
                'disaster': 'üåä –°–¢–ò–•–ò–Ø',
                'crime': 'üöî –ö–†–ò–ú–ò–ù–ê–õ',
                'weather': 'üå®Ô∏è –ü–û–ì–û–î–ê'
            }
            
            category_name = category_names.get(category, category.upper())
            alert_header += f"<b>{category_name}</b>\n"
            alert_header += "‚îÄ" * 30 + "\n\n"
            
            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            formatted_text = original_text
            for word in matched_words:
                # –í—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∂–∏—Ä–Ω—ã–º
                formatted_text = formatted_text.replace(word, f"<b>{word.upper()}</b>")
                formatted_text = formatted_text.replace(word.capitalize(), f"<b>{word.upper()}</b>")
            
            return alert_header + formatted_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            return f"{emoji} –ê–õ–ï–†–¢ {emoji}\n\n{original_text}"
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            log_config = self.config.get('logging', {})
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
            log_file = Path(log_config.get('file', 'logs/news_monitor.log'))
            log_file.parent.mkdir(exist_ok=True)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º loguru
            logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            
            # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            logger.add(
                sys.stdout, 
                level="INFO",
                format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>",
                colorize=True
            )
            
            # –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            logger.add(
                log_file,
                level=log_config.get('level', 'INFO'),
                rotation=f"{log_config.get('max_size_mb', 10)} MB",
                retention=log_config.get('backup_count', 5),
                encoding='utf-8',
                format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function} - {message}"
            )
            
            logger.info("üìù –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def initialize_components(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            db_config = self.config.get('database', {})
            self.database = DatabaseManager(db_config.get('path', 'news_monitor.db'))
            await self.database.initialize()
            
            # 2. –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
            system_config = self.config.get('system', {})
            self.system_monitor = SystemMonitor(
                memory_limit_mb=system_config.get('memory_limit_mb', 800)
            )
            
            # 3. Telegram –±–æ—Ç (–û–°–ù–û–í–ù–û–ô –ö–ê–ù–ê–õ –°–í–Ø–ó–ò)
            self.telegram_bot = await create_bot_from_config(self.config, self)
            if not self.telegram_bot:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞")
                return False
            

            
            # 5. Telegram –º–æ–Ω–∏—Ç–æ—Ä (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Å—Å–∏–µ–π)
            try:
                telegram_config = self.config['telegram']
                self.telegram_monitor = TelegramMonitor(
                    api_id=telegram_config['api_id'],
                    api_hash=telegram_config['api_hash'],
                    database=self.database
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–±–µ–∑ –≤–≤–æ–¥–∞ –∫–æ–¥–∞)
                if await self.telegram_monitor.initialize():
                    logger.success("‚úÖ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    logger.warning("‚ö†Ô∏è Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
                    self.telegram_monitor = None
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.telegram_monitor = None
            
            # 6. –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
            monitoring_config = self.config.get('monitoring', {})
            self.news_processor = NewsProcessor(
                database=self.database,

                telegram_bot=self.telegram_bot,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                telegram_monitor=self.telegram_monitor,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º telegram_monitor!
                config=monitoring_config
            )
            
            # 7. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            try:
                web_port = self.config.get('web', {}).get('port', 8080)
                self.web_interface = WebInterface(
                    database=self.database,
                    system_monitor=self.system_monitor,
                    port=web_port
                )
                self.web_interface.start_server()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flask: pip install flask")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.telegram_bot.send_message(
                "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
                f"üì± Telegram –±–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞\n" 
                f"üß† –ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: ‚úÖ –ì–æ—Ç–æ–≤\n"
                f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.telegram_monitor else '‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω'}\n"
                f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {'‚úÖ http://localhost:8080' if self.web_interface else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
                f"üïê {datetime.now(pytz.timezone('Asia/Vladivostok')).strftime('%d.%m.%Y %H:%M:%S')} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
            )
            
            logger.success("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            if self.telegram_bot:
                await self.telegram_bot.send_error_alert(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def monitoring_cycle(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Telegram —Å–æ–±—ã—Ç–∏—è"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            self.load_subscription_cache()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            await self.setup_realtime_handlers()
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
            if self.telegram_bot:
                bot_listener_task = asyncio.create_task(self.telegram_bot.start_listening())
                logger.info("üëÇ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á
            status_interval = 3600  # 1 —á–∞—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            last_status_update = 0
            
            while self.running:
                try:
                    current_time = asyncio.get_event_loop().time()
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    if current_time - last_status_update >= status_interval:
                        await self.send_status_update()
                        last_status_update = current_time
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
                    if hasattr(self, 'last_cleanup_time'):
                        if current_time - self.last_cleanup_time >= 86400:  # 24 —á–∞—Å–∞
                            await self.auto_cleanup_old_data()
                            self.last_cleanup_time = current_time
                    else:
                        self.last_cleanup_time = current_time
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                    if self.system_monitor.check_memory_limit():
                        await self.telegram_bot.send_error_alert("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏!")
                    
                    await asyncio.sleep(300)  # –°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    if self.telegram_bot:
                        await self.telegram_bot.send_error_alert(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            if self.telegram_bot:
                await self.telegram_bot.send_error_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def get_channel_regions(self, channel_username: str) -> list:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –í–°–ï —Ä–µ–≥–∏–æ–Ω—ã –∫–∞–Ω–∞–ª–∞ –ø–æ –µ–≥–æ username (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö)"""
        found_regions = []
        
        try:
            channels_config_path = "config/channels_config.yaml"
            with open(channels_config_path, 'r', encoding='utf-8') as f:
                channels_data = yaml.safe_load(f) or {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
            if 'regions' in channels_data:
                for region_key, region_data in channels_data['regions'].items():
                    channels = region_data.get('channels', [])
                    for channel in channels:
                        if channel.get('username') == channel_username:
                            found_regions.append(region_key)
                            logger.info(f"üóÇÔ∏è –ö–∞–Ω–∞–ª @{channel_username} –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω–µ '{region_key}'")
            else:
                # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                all_channels = channels_data.get('channels', [])
                for channel in all_channels:
                    if channel.get('username') == channel_username:
                        region = channel.get('region', 'general')
                        found_regions.append(region)
                        logger.info(f"üóÇÔ∏è –ö–∞–Ω–∞–ª @{channel_username} –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: —Ä–µ–≥–∏–æ–Ω '{region}'")
            
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
            if found_regions:
                return found_regions
            
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            channel_lower = channel_username.lower()
            best_match_region = 'general'
            best_match_score = 0
            
            for region_key, region_data in self.regions_config.items():
                if region_key == 'general':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–π —Ä–µ–≥–∏–æ–Ω
                    continue
                    
                keywords = region_data.get('keywords', [])
                score = 0
                
                for keyword in keywords:
                    if keyword.lower() in channel_lower:
                        score += 1
                
                if score > best_match_score:
                    best_match_score = score
                    best_match_region = region_key
            
            if best_match_score > 0:
                region_name = self.regions_config.get(best_match_region, {}).get('name', best_match_region)
                logger.info(f"üóÇÔ∏è –ö–∞–Ω–∞–ª @{channel_username} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ {region_name} ({best_match_score} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)")
                return [best_match_region]
            else:
                logger.info(f"üóÇÔ∏è –ö–∞–Ω–∞–ª @{channel_username} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –æ–±—â–∏–π (–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)")
                return ['general']
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è {channel_username}: {e}")
            return ['general']
    
    def get_channel_region(self, channel_username: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ü–ï–†–í–´–ô —Ä–µ–≥–∏–æ–Ω –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        regions = self.get_channel_regions(channel_username)
        return regions[0] if regions else 'general'
    
    async def setup_realtime_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        from telethon import events
        from telethon.tl.functions.channels import JoinChannelRequest
        
        logger.info("‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
        
        if not self.telegram_monitor or not self.telegram_monitor.client:
            logger.error("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        channels_config_path = "config/channels_config.yaml"
        try:
            with open(channels_config_path, 'r', encoding='utf-8') as f:
                channels_data = yaml.safe_load(f) or {}
        except (FileNotFoundError, yaml.YAMLError) as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º –∫–∞–Ω–∞–ª–æ–≤ {channels_config_path}: {e}")
            channels_data = {}
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏ —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        all_channels = []
        
        if 'regions' in channels_data:
            # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
            for region_key, region_data in channels_data['regions'].items():
                region_channels = region_data.get('channels', [])
                for channel in region_channels:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –∫ –∫–∞–Ω–∞–ª—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    channel_with_region = channel.copy()
                    channel_with_region['region'] = region_key
                    all_channels.append(channel_with_region)
        elif channels_data and 'channels' in channels_data and channels_data['channels']:
            # –°—Ç–∞—Ä–∞—è –µ–¥–∏–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            all_channels = channels_data['channels']
        elif channels_data:
            # –°–æ–≤—Å–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å vip_channels –∏ regular_channels
            if 'vip_channels' in channels_data and channels_data['vip_channels']:
                all_channels.extend(channels_data['vip_channels'])
            if 'regular_channels' in channels_data and channels_data['regular_channels']:
                all_channels.extend(channels_data['regular_channels'])
        
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not all_channels:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π config/channels_config.yaml –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")
            all_channels = []
        
        # –ü–æ–ª—É—á–∞–µ–º entity –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∏—Ö
        monitored_channels = []
        subscribed_count = 0
        failed_count = 0
        rate_limited_count = 0
        rate_limited_channels = []  # –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã...")
        
        for channel_config in all_channels:
            try:
                entity = await self.telegram_monitor.get_channel_entity(channel_config['username'])
                if entity:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫
                    channel_username = channel_config['username']
                    if self.is_channel_cached_as_subscribed(channel_username):
                        logger.info(f"üíæ –ö–∞–Ω–∞–ª {channel_username} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –ø–æ–¥–ø–∏—Å–æ–∫")
                        monitored_channels.append(entity)
                        logger.info(f"üì° –î–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {channel_username}")
                        continue
                    
                    # –î–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    try:
                        already = await self.telegram_monitor.is_already_joined(entity)
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_username}: {'–î–ê' if already else '–ù–ï–¢'}")
                        if already:
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à, –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
                            self.add_channel_to_cache(channel_username)
                            monitored_channels.append(entity)
                            logger.info(f"üì° –î–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {channel_username}")
                            continue
                    except Exception as check_error:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_username}: {check_error}")
                        already = False

                    # üöÄ –ê–í–¢–û–ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–ù–ê–õ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω)
                    try:
                        await self.telegram_monitor.client(JoinChannelRequest(entity))
                        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {channel_username}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                        self.add_channel_to_cache(channel_username)
                        subscribed_count += 1
                        await asyncio.sleep(3)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                    except Exception as sub_error:
                        error_msg = str(sub_error).lower()
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting
                        if "wait" in error_msg and "seconds" in error_msg:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                            import re
                            wait_match = re.search(r'(\d+)\s+seconds', error_msg)
                            if wait_match:
                                wait_seconds = int(wait_match.group(1))
                                logger.warning(f"‚è≥ Rate limit –Ω–∞ {channel_config['username']} - –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å {wait_seconds}—Å")
                                logger.info(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {channel_config['username']} –∏–∑-–∑–∞ rate limit, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏")
                                rate_limited_channels.append((entity, channel_config['username'], wait_seconds))
                                rate_limited_count += 1
                            else:
                                logger.warning(f"‚è≥ Rate limit –Ω–∞ {channel_config['username']}: {sub_error}")
                                rate_limited_channels.append((entity, channel_config['username'], 90))  # 90 —Å–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                rate_limited_count += 1
                        elif "already" in error_msg or "—É—á–∞—Å—Ç–Ω–∏–∫" in error_msg:
                            logger.info(f"üîÑ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel_username}")
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                            self.add_channel_to_cache(channel_username)
                            subscribed_count += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö
                        elif "private" in error_msg or "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π" in error_msg:
                            logger.warning(f"üîí –ö–∞–Ω–∞–ª {channel_config['username']} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π - –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
                            failed_count += 1
                        elif "invite" in error_msg or "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ" in error_msg:
                            logger.warning(f"üì© –ö–∞–Ω–∞–ª {channel_config['username']} —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
                            failed_count += 1
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_config['username']}: {sub_error}")
                            failed_count += 1
                    
                    monitored_channels.append(entity)
                    logger.info(f"üì° –î–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {channel_config['username']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_config['username']}: {e}")
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏:")
        logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è: {subscribed_count} –∫–∞–Ω–∞–ª–æ–≤")
        logger.info(f"  ‚è≥ Rate limit: {rate_limited_count} –∫–∞–Ω–∞–ª–æ–≤")
        logger.info(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {failed_count} –∫–∞–Ω–∞–ª–æ–≤")
        logger.info(f"  üì° –í—Å–µ–≥–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {len(monitored_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–µ –≤ Telegram
        if subscribed_count > 0 or failed_count > 0 or rate_limited_count > 0:
            subscription_report = (
                f"üöÄ <b>–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>\n\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è: <b>{subscribed_count}</b> –∫–∞–Ω–∞–ª–æ–≤\n"
                f"‚è≥ Rate limit: <b>{rate_limited_count}</b> –∫–∞–Ω–∞–ª–æ–≤\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: <b>{failed_count}</b> –∫–∞–Ω–∞–ª–æ–≤\n"
                f"üì° –í—Å–µ–≥–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: <b>{len(monitored_channels)}</b> –∫–∞–Ω–∞–ª–æ–≤\n\n"
            )
            
            if rate_limited_count > 0:
                subscription_report += (
                    f"üí° <b>Rate limit</b> - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram\n"
                    f"–ö–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –Ω–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é\n\n"
                )
            
            subscription_report += f"üî• –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!"
            
            try:
                await self.telegram_bot.send_message(subscription_report)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: {e}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.telegram_monitor.client.on(events.NewMessage(chats=monitored_channels))
        async def handle_new_message(event):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if not self.monitoring_active:
                    logger.debug("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    return
                
                logger.info("üî• –°–†–ê–ë–û–¢–ê–õ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø!")
                message = event.message
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await event.get_chat()
                channel_username = getattr(chat, 'username', None)
                if not channel_username:
                    logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ username –∫–∞–Ω–∞–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return
                
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{channel_username}: {message.text[:100] if message.text else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")
                
                has_text = bool(getattr(message, "text", None))
                has_media = bool(getattr(message, "media", None))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞)
                if has_media and hasattr(message, 'grouped_id') and message.grouped_id:
                    grouped_id = message.grouped_id
                    logger.info(f"üì∏ –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã: {grouped_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –≥—Ä—É–ø–ø—É
                    if grouped_id in self.processed_media_groups:
                        logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ {grouped_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        return
                    
                    # –ü–æ–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
                    self.processed_media_groups.add(grouped_id)
                    logger.info(f"üîÑ –ü–æ–º–µ—á–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É {grouped_id} –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é")
                    
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∫—ç—à –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–µ—Å–ª–∏ —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
                    if len(self.processed_media_groups) > 1000:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –∑–∞–ø–∏—Å–µ–π
                        self.processed_media_groups = set(list(self.processed_media_groups)[-500:])
                        logger.info("üßπ –û—á–∏—â–µ–Ω –∫—ç—à –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è
                msg_time = message.date
                start_time = self.telegram_monitor.start_time
                
                # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
                vladivostok_tz = pytz.timezone('Asia/Vladivostok')
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–µ –≤—Ä–µ–º—è
                if msg_time.tzinfo is None:
                    # –ï—Å–ª–∏ –Ω–µ—Ç timezone, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                    msg_time = pytz.utc.localize(msg_time).astimezone(vladivostok_tz)
                else:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å timezone, –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–æ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–µ
                    msg_time = msg_time.astimezone(vladivostok_tz)
                
                logger.info(f"‚è∞ –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_time.strftime('%d.%m.%Y %H:%M:%S %Z')}, –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {start_time.strftime('%d.%m.%Y %H:%M:%S %Z')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–µ (–ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)
                if msg_time < start_time:
                    logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ (–¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                import hashlib
                text_for_hash = message.text or ''
                content_hash = hashlib.md5(
                    f"{text_for_hash[:1000]}{message.date}".encode()
                ).hexdigest()
                
                message_data = {
                    'id': f"{channel_username}_{message.id}",
                    'text': message.text or '',
                    'date': msg_time,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–µ –≤—Ä–µ–º—è
                    'channel_username': channel_username,
                    'message_id': message.id,
                    'url': f"https://t.me/{channel_username}/{message.id}",
                    'content_hash': content_hash,
                    'views': getattr(message, 'views', 0),
                    'forwards': getattr(message, 'forwards', 0),
                    'reactions_count': 0  # –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–ª–µ—Ä—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                is_alert, alert_category, alert_emoji, is_priority, matched_words = self.check_alert_keywords(message.text)
                
                if is_alert:
                    logger.warning(f"üö® –ê–õ–ï–†–¢ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ @{channel_username}! –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {alert_category}, —Å–ª–æ–≤–∞: {matched_words}")
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∞–ª–µ—Ä—Ç–æ–º
                    alert_text = self.format_alert_message(
                        message.text, 
                        channel_username, 
                        alert_emoji, 
                        alert_category, 
                        matched_words
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∞–ª–µ—Ä—Ç–æ–º
                    message_data['text'] = alert_text
                    message_data['is_alert'] = True
                    message_data['alert_category'] = alert_category
                    message_data['alert_priority'] = is_priority
                else:
                    message_data['is_alert'] = False
                
                logger.info(f"‚ö° –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ @{channel_username} - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞!")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                try:
                    await self.database.save_message(message_data)
                    logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã ‚Äî —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç+—Å—Å—ã–ª–∫—É
                if has_media:
                    logger.info(f"üìé –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª—ã –æ—Ç @{channel_username}")
                    media_sent = await self.download_and_send_media(message_data)
                    if not media_sent:
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                        await self.send_message_to_target(message_data, is_media=True)
                elif not has_text:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –º–µ–¥–∏–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
                    logger.info(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç @{channel_username}")
                    forwarded = await self.forward_original_message(message_data)
                    if not forwarded:
                        await self.send_message_to_target(message_data, is_media=True)
                else:
                    # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.send_message_to_target(message_data, is_media=False)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
                vladivostok_tz = pytz.timezone('Asia/Vladivostok')
                current_time_vlk = datetime.now(vladivostok_tz)
                await self.database.update_last_check_time(channel_username, current_time_vlk)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        
        logger.info(f"‚ö° –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(monitored_channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telethon
        logger.info("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É Telethon client...")
        try:
            me = await self.telegram_monitor.client.get_me()
            logger.info(f"‚úÖ Telethon client –∞–∫—Ç–∏–≤–µ–Ω: {me.first_name} (ID: {me.id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telethon client: {e}")
            
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.info(f"üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:")
        for i, entity in enumerate(monitored_channels[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            logger.info(f"  {i+1}. {getattr(entity, 'username', 'No username')} (ID: {entity.id})")
        if len(monitored_channels) > 5:
            logger.info(f"  ... –∏ –µ—â–µ {len(monitored_channels) - 5} –∫–∞–Ω–∞–ª–æ–≤")
        
        # üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å rate limit
        if rate_limited_channels:
            logger.info(f"‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {len(rate_limited_channels)} –∫–∞–Ω–∞–ª–æ–≤ —Å rate limit")
            asyncio.create_task(self.retry_rate_limited_subscriptions(rate_limited_channels))
    
    async def retry_rate_limited_subscriptions(self, rate_limited_channels):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å rate limit"""
        from telethon.tl.functions.channels import JoinChannelRequest
        
        logger.info(f"‚è∞ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {len(rate_limited_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        
        # –ñ–¥–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –≤—Å–µ—Ö rate limit + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
        max_wait = max(wait_time for _, _, wait_time in rate_limited_channels) + 10
        logger.info(f"‚è≥ –ñ–¥–µ–º {max_wait} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏...")
        await asyncio.sleep(max_wait)
        
        successful_retries = 0
        failed_retries = 0
        
        for entity, username, original_wait_time in rate_limited_channels:
            try:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {username}")
                await self.telegram_monitor.client(JoinChannelRequest(entity))
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {username} (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)")
                successful_retries += 1
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            except Exception as retry_error:
                error_msg = str(retry_error).lower()
                if "already" in error_msg or "—É—á–∞—Å—Ç–Ω–∏–∫" in error_msg:
                    logger.info(f"üîÑ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {username} (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)")
                    successful_retries += 1
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {username} –Ω–µ—É–¥–∞—á–Ω–∞: {retry_error}")
                    failed_retries += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        if successful_retries > 0 or failed_retries > 0:
            retry_report = (
                f"üîÑ <b>–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{successful_retries}</b> –∫–∞–Ω–∞–ª–æ–≤\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å: <b>{failed_retries}</b> –∫–∞–Ω–∞–ª–æ–≤\n\n"
                f"üéâ –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!"
            )
            try:
                await self.telegram_bot.send_message(retry_report)
                logger.info(f"üìä –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {successful_retries} —É—Å–ø–µ—à–Ω–æ, {failed_retries} –Ω–µ—É–¥–∞—á–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
    
    async def check_all_channels_for_new_messages(self):
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Ö –ø–µ—Ä–µ—Å—ã–ª–∫–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
            channels_config_path = "config/channels_config.yaml"
            with open(channels_config_path, 'r', encoding='utf-8') as f:
                channels_data = yaml.safe_load(f)
            
            all_channels = []
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã (VIP –∏ –æ–±—ã—á–Ω—ã–µ)
            if 'vip_channels' in channels_data:
                all_channels.extend(channels_data['vip_channels'])
            if 'regular_channels' in channels_data:
                all_channels.extend(channels_data['regular_channels'])
            
            logger.info(f"üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(all_channels)} –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            total_new_messages = 0
            for channel_config in all_channels:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    new_messages = await self.telegram_monitor.get_new_messages_simple(channel_config)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    for message in new_messages:
                        await self.send_text_with_link(message)
                        total_new_messages += 1
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(2)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_config.get('username', 'unknown')}: {e}")
            
            if total_new_messages > 0:
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total_new_messages} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    async def process_vip_channels(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ VIP –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.telegram_monitor:
            return
        
        try:
            channels = self.config.get('channels', [])
            vip_channels = [ch for ch in channels if ch.get('vip', False)]
            
            if not vip_channels:
                return
            
            result = await self.news_processor.process_vip_channels_batch(vip_channels)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
            if result.get('selected_news'):
                selected_news = result['selected_news']
                if selected_news:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                    new_news = await self.filter_unsent_news(selected_news)
                    if new_news:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                        for i, news in enumerate(new_news):
                            await self.send_single_news(news)
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                            await self.database.mark_digest_sent([news['id']])
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                            if i < len(new_news) - 1:
                                await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ VIP –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    async def process_regular_channels(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.telegram_monitor:
            return
        
        try:
            channels = self.config.get('channels', [])
            regular_channels = [ch for ch in channels if not ch.get('vip', False)]
            
            if not regular_channels:
                return
            
            result = await self.news_processor.process_regular_channels_batch(regular_channels)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
            if result.get('selected_news'):
                selected_news = result['selected_news']
                if selected_news:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                    new_news = await self.filter_unsent_news(selected_news)
                    if new_news:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                        for i, news in enumerate(new_news):
                            await self.send_single_news(news)
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                            await self.database.mark_digest_sent([news['id']])
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                            if i < len(new_news) - 1:
                                await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    async def send_single_news(self, news: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram"""
        try:
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç + —Å—Å—ã–ª–∫—É (–∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏)
            await self.send_text_with_link(news)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    
    async def forward_original_message(self, news: Dict) -> bool:
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            channel_username = news.get('channel_username')
            message_id = news.get('message_id')
            
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ –∏–∑ @{channel_username}, message_id: {message_id}")
            
            if not channel_username or not message_id:
                logger.warning("‚ùå –ù–µ—Ç channel_username –∏–ª–∏ message_id –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
                return False
            
            # –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ output.target_channel)
            target = self.config.get('output', {}).get('target_channel')
            
            # –ï—Å–ª–∏ target_channel –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –±–æ—Ç–∞
            if not target or target in ["@your_news_channel", "your_news_channel"]:
                target = self.config.get('bot', {}).get('chat_id')
                logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {target}")
            else:
                logger.info(f"üì∫ –ò—Å–ø–æ–ª—å–∑—É–µ–º target_channel –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {target}")
            
            if not target:
                logger.error("‚ùå –ù–µ—Ç target –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª
            entity = await self.telegram_monitor.get_channel_entity(channel_username)
            if not entity:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è {channel_username}")
                return False
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ü–µ–ª—å
            target_entity = None
            try:
                if isinstance(target, int) or (isinstance(target, str) and target.lstrip('-').isdigit()):
                    target_entity = await self.telegram_monitor.client.get_entity(int(target))
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω target_entity –¥–ª—è chat_id: {target}")
                elif isinstance(target, str) and target.startswith("https://t.me/+"):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞
                    logger.info(f"üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞: {target}")
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º hash –∏–∑ —Å—Å—ã–ª–∫–∏
                    invite_hash = target.split("https://t.me/+")[1]
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
                    from telethon.tl.functions.messages import ImportChatInviteRequest
                    try:
                        updates = await self.telegram_monitor.client(ImportChatInviteRequest(invite_hash))
                        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        if hasattr(updates, 'chats') and updates.chats:
                            target_entity = updates.chats[0]
                            logger.info(f"‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –∏ –ø–æ–ª—É—á–∏–ª–∏ entity")
                        else:
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    except Exception as join_error:
                        # –í–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å–æ—Å—Ç–æ–∏–º –≤ –∫–∞–Ω–∞–ª–µ
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ): {join_error}")
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ hash
                        try:
                            target_entity = await self.telegram_monitor.client.get_entity(f"https://t.me/+{invite_hash}")
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω entity –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                        except Exception as entity_error:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {entity_error}")
                else:
                    # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                    target_name = target[1:] if isinstance(target, str) and target.startswith('@') else target
                    target_entity = await self.telegram_monitor.get_channel_entity(target_name)
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω target_entity –¥–ª—è –∫–∞–Ω–∞–ª–∞: {target_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è target_entity: {e}")
                target_entity = None
                
            if not target_entity:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å target_entity")
                return False

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É...")
            forwarded = await self.telegram_monitor.client.forward_messages(
                entity=target_entity,
                messages=message_id,
                from_peer=entity
            )
            
            if forwarded:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ {channel_username}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        
        return False
    
    async def download_and_send_media(self, news: Dict) -> bool:
        """–°–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ Telethon –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Bot API"""
        try:
            import os
            import tempfile
            from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
            
            channel_username = news.get('channel_username')
            message_id = news.get('message_id')
            text = news.get('text', '')
            
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –∏–∑ @{channel_username}, message_id: {message_id}")
            logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª–∏–Ω–∞ {len(text)}): {text[:100]}{'...' if len(text) > 100 else ''}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            entity = await self.telegram_monitor.get_channel_entity(channel_username)
            if not entity:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è {channel_username}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.telegram_monitor.client.get_messages(entity, ids=message_id)
            if not message or not message.media:
                logger.warning("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ grouped_id (–º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞)
            messages_to_process = [message]
            if hasattr(message, 'grouped_id') and message.grouped_id:
                logger.info(f"üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ (grouped_id: {message.grouped_id})")
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
                all_messages = await self.telegram_monitor.client.get_messages(entity, limit=50)
                group_messages = [msg for msg in all_messages if hasattr(msg, 'grouped_id') and msg.grouped_id == message.grouped_id]
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                messages_to_process = sorted(group_messages, key=lambda x: x.id)
                logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(messages_to_process)} –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ")
                
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
                for msg in messages_to_process:
                    if msg.text and msg.text.strip():
                        text = msg.text.strip()
                        news['text'] = text  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ news
                        logger.info(f"üìù –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ (–¥–ª–∏–Ω–∞ {len(text)}): {text[:100]}{'...' if len(text) > 100 else ''}")
                        break
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
            media_files = []
            temp_files = []
            video_count = 0
            photo_count = 0
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –º–µ–¥–∏–∞
            for msg in messages_to_process:
                if not msg.media:
                    continue
                    
                if isinstance(msg.media, MessageMediaPhoto):
                    photo_count += 1
                elif isinstance(msg.media, MessageMediaDocument):
                    document = msg.media.document
                    if document.mime_type:
                        if document.mime_type.startswith('image/'):
                            photo_count += 1
                        elif document.mime_type.startswith('video/'):
                            video_count += 1
            
            logger.info(f"üìä –í –≥—Ä—É–ø–ø–µ: {photo_count} —Ñ–æ—Ç–æ, {video_count} –≤–∏–¥–µ–æ")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, msg in enumerate(messages_to_process):
                if not msg.media:
                    continue
                    
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                media_type = "document"
                file_extension = ".bin"
                should_download = False
                
                if isinstance(msg.media, MessageMediaPhoto):
                    media_type = "photo"
                    file_extension = ".jpg"
                    should_download = True
                elif isinstance(msg.media, MessageMediaDocument):
                    document = msg.media.document
                    if document.mime_type:
                        if document.mime_type.startswith('image/'):
                            media_type = "photo"
                            file_extension = ".jpg"
                            should_download = True
                        elif document.mime_type.startswith('video/'):
                            logger.info(f"üé¨ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ {i+1} (—Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è)")
                            continue
                        elif document.mime_type.startswith('audio/'):
                            media_type = "document"
                            file_extension = ".mp3"
                            should_download = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    for attr in document.attributes:
                        if hasattr(attr, 'file_name') and attr.file_name:
                            file_extension = os.path.splitext(attr.file_name)[1] or file_extension
                            break
                
                if should_download:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with tempfile.NamedTemporaryFile(suffix=f"_{i}{file_extension}", delete=False) as temp_file:
                        temp_path = temp_file.name
                        temp_files.append(temp_path)
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
                    logger.info(f"üíæ –°–∫–∞—á–∏–≤–∞–µ–º {media_type} {len(media_files)+1}")
                    await self.telegram_monitor.client.download_media(msg, temp_path)
                    media_files.append((temp_path, media_type))
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if not media_files:
                if video_count > 0:
                    logger.info(f"üé¨ –ü–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ ({video_count} —à—Ç.), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ news
                    news['video_count'] = video_count
                    news['photo_count'] = photo_count
                    await self.send_message_to_target(news, is_media=True)
                    return True
                else:
                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã")
                    return False
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                vladivostok_tz = pytz.timezone('Asia/Vladivostok')
                date = news.get('date')
                if date:
                    try:
                        if isinstance(date, str):
                            date = datetime.fromisoformat(date.replace('Z', '+00:00'))
                        if date.tzinfo is None:
                            date = date.replace(tzinfo=pytz.UTC)
                        date_vlk = date.astimezone(vladivostok_tz)
                        date_str = f"\nüìÖ {date_vlk.strftime('%d.%m.%Y %H:%M')} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
                    except:
                        date_str = ""
                else:
                    date_str = ""
                
                caption = f"<b>@{channel_username}</b>"
                if text:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    clean_text = self.convert_markdown_to_html(text.strip())
                    if len(clean_text) > 800:
                        clean_text = clean_text[:800] + "..."
                    caption += f"\n\n{clean_text}"
                    logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ caption: {clean_text[:50]}...")
                else:
                    logger.warning("‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç–æ–π!")
                
                if date_str:
                    caption += f"\n{date_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π
                
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if video_count > 0:
                    video_text = f"{video_count} –≤–∏–¥–µ–æ" if video_count > 1 else "–≤–∏–¥–µ–æ"
                    caption += f"\n\nüé¨ –í –ø–æ—Å—Ç–µ —Ç–∞–∫–∂–µ –µ—Å—Ç—å {video_text}"
                
                url = news.get('url')
                if url:
                    caption += f"\n\nüîó {url}"
                
                logger.info(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π caption (–¥–ª–∏–Ω–∞ {len(caption)}): {caption[:150]}{'...' if len(caption) > 150 else ''}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –≤ news –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                news['video_count'] = video_count
                news['photo_count'] = photo_count
                
                # –û–±–Ω–æ–≤–ª—è–µ–º news –¥–∞–Ω–Ω—ã–º–∏ –æ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ send_message_to_target
                news['media_files'] = media_files
                news['caption'] = caption
                news['text'] = caption  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å send_message_to_target
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ send_message_to_target –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–µ–º–∞–º
                await self.send_message_to_target(news, is_media=True)
                success = True
                
                if success:
                    logger.info(f"‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(media_files)} —Ñ–∞–π–ª(–æ–≤)")
                    return True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
                    return False
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for temp_path in temp_files:
                    try:
                        os.unlink(temp_path)
                    except:
                        pass
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(temp_files)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
            return False
    
    async def send_formatted_news(self, news: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            text = news.get('text', '')
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
            text = self.convert_markdown_to_html(text)
            channel_name = news.get('channel_name', news.get('channel_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'))
            url = news.get('url', '')
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ** –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            message_parts = [
                text,
                "",
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {channel_name}"
            ]
            
            if url:
                message_parts.append(f"–ß–∏—Ç–∞—Ç—å: {url}")
            
            message = "\n".join(message_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            success = await self.telegram_bot.send_message(message, parse_mode="HTML")  # –° HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if success:
                logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {text[:50]}...")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    
    async def send_media_via_bot(self, news: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        try:
            text = news.get('text', '')
            url = news.get('url', '')
            channel_username = news.get('channel_username', '')
            date = news.get('date')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
            date_str = ""
            if date:
                try:
                    if hasattr(date, 'strftime'):
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–µ –≤—Ä–µ–º—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                        date_str = f"\nüìÖ {date.strftime('%d.%m.%Y %H:%M')} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
                    else:
                        date_str = f"\nüìÖ {date}"
                except:
                    pass
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            media_notification = f"<b>@{channel_username}</b>"
            
            if text:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
                clean_text = self.convert_markdown_to_html(text)
                media_notification += f"\n\n{clean_text}"
            
            if date_str:
                media_notification += f"\n{date_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            video_count = news.get('video_count', 0)
            photo_count = news.get('photo_count', 0)
            
            if video_count > 0 or photo_count > 0:
                media_info = []
                if photo_count > 0:
                    photo_text = f"{photo_count} —Ñ–æ—Ç–æ" if photo_count > 1 else "—Ñ–æ—Ç–æ"
                    media_info.append(f"üì∏ {photo_text}")
                if video_count > 0:
                    video_text = f"{video_count} –≤–∏–¥–µ–æ" if video_count > 1 else "–≤–∏–¥–µ–æ"
                    media_info.append(f"üé¨ {video_text}")
                
                if media_info:
                    media_notification += f"\n\n{' + '.join(media_info)}"
            
            if url:
                media_notification += f"\n\nüîó {url}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            success = await self.telegram_bot.send_message(media_notification)
            if success:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: @{channel_username}")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_message_to_target(self, news: Dict, is_media: bool = False):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–µ–º–∞–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–º
            is_alert = news.get('is_alert', False)
            alert_priority = news.get('alert_priority', False)
            alert_category = news.get('alert_category', '')
            
            if is_alert:
                logger.warning(f"üö® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ê–õ–ï–†–¢: –∫–∞—Ç–µ–≥–æ—Ä–∏—è={alert_category}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç={alert_priority}")
                
                # –î–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                if alert_priority:
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    logger.error(f"üö® –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢! {alert_category}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –í–°–ï —Ä–µ–≥–∏–æ–Ω—ã –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–º—ã
            channel_username = news.get('channel_username', '')
            regions = self.get_channel_regions(channel_username)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞
            output_config = self.config.get('output', {})
            target = output_config.get('target_group') or output_config.get('target_channel')
            
            logger.info(f"üìÇ –ö–∞–Ω–∞–ª @{channel_username} –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö: {regions}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID —Ç–µ–º –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤
            topics = output_config.get('topics', {})
            region_threads = []
            
            for region in regions:
                thread_id = topics.get(region) if topics else None
                region_threads.append((region, thread_id))
                
                if thread_id:
                    logger.info(f"üìÇ –ö–∞–Ω–∞–ª @{channel_username} ‚Üí —Ä–µ–≥–∏–æ–Ω '{region}' ‚Üí —Ç–µ–º–∞ {thread_id}")
                else:
                    logger.info(f"üìÇ –ö–∞–Ω–∞–ª @{channel_username} ‚Üí —Ä–µ–≥–∏–æ–Ω '{region}' ‚Üí –æ–±—â–∞—è –ª–µ–Ω—Ç–∞ (—Ç–µ–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã)")
            
            # –ï—Å–ª–∏ target –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –±–æ—Ç–∞ (–ª–∏—á–Ω—ã–π —á–∞—Ç)  
            if not target or target in ["@your_news_channel", "your_news_channel"]:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                if is_media:
                    await self.send_media_via_bot(news)
                else:
                    await self.send_text_with_link(news)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {target}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = news.get('text', '')
            url = news.get('url', '')
            channel_username = news.get('channel_username', '')
            date = news.get('date')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
            text = self.convert_markdown_to_html(text)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = ""
            if date:
                try:
                    if hasattr(date, 'strftime'):
                        date_str = f"\nüìÖ {date.strftime('%d.%m.%Y %H:%M')} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
                    else:
                        date_str = f"\nüìÖ {date}"
                except:
                    pass
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if is_media:
                message = f"<b>@{channel_username}</b>"
                if text:
                    message += f"\n\n{text}"
                if date_str:
                    message += f"\n{date_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                video_count = news.get('video_count', 0)
                photo_count = news.get('photo_count', 0)
                
                if video_count > 0 or photo_count > 0:
                    media_info = []
                    if photo_count > 0:
                        photo_text = f"{photo_count} —Ñ–æ—Ç–æ" if photo_count > 1 else "—Ñ–æ—Ç–æ"
                        media_info.append(f"üì∏ {photo_text}")
                    if video_count > 0:
                        video_text = f"{video_count} –≤–∏–¥–µ–æ" if video_count > 1 else "–≤–∏–¥–µ–æ"
                        media_info.append(f"üé¨ {video_text}")
                    
                    if media_info:
                        message += f"\n\n{' + '.join(media_info)}"
                
                if url:
                    message += f"\n\nüîó {url}"
            else:
                message = f"<b>@{channel_username}</b>"
                if text:
                    message += f"\n\n{text}"
                if date_str:
                    message += f"\n{date_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π
                if url:
                    message += f"\n\n{url}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª (–≤–æ –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã/—Ç–µ–º—ã)
            all_success = True
            sent_count = 0
            
            for region, thread_id in region_threads:
                try:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–≥–∏–æ–Ω '{region}' (—Ç–µ–º–∞: {thread_id or '–æ–±—â–∞—è'})")
                    
                    if is_media and news.get('media_files'):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã —Å caption
                        media_files = news.get('media_files', [])
                        caption = news.get('caption', message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º message –∫–∞–∫ caption –µ—Å–ª–∏ caption –Ω–µ –∑–∞–¥–∞–Ω
                        
                        # –ï—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –∫–∞–∫ –≥—Ä—É–ø–ø—É
                        if len(media_files) == 1:
                            success = await self.telegram_bot.send_media_with_caption(
                                media_files[0][0], caption, target, media_files[0][1], thread_id
                            )
                        else:
                            success = await self.telegram_bot.send_media_group(
                                media_files, caption, target, thread_id
                            )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        success = await self.telegram_bot.send_message_to_channel(message, target, "HTML", thread_id)
                    
                    if success:
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–≥–∏–æ–Ω '{region}'")
                        sent_count += 1
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–≥–∏–æ–Ω '{region}'")
                        all_success = False
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–≥–∏–æ–Ω '{region}': {e}")
                    all_success = False
            
            if sent_count > 0:
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent_count}/{len(region_threads)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

    async def send_text_with_link(self, news: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ + –¥–∞—Ç—É/–≤—Ä–µ–º—è + —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç"""
        try:
            text = news.get('text', '')
            url = news.get('url', '')
            date = news.get('date')
            channel_username = news.get('channel_username', '')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
            text = self.convert_markdown_to_html(text)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
            date_str = ""
            if date:
                try:
                    if hasattr(date, 'strftime'):
                        date_str = f"\nüìÖ {date.strftime('%d.%m.%Y %H:%M')} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
                    else:
                        date_str = f"\nüìÖ {date}"
                except:
                    pass
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: @–∫–∞–Ω–∞–ª + —Ç–µ–∫—Å—Ç + –¥–∞—Ç–∞ + —Å—Å—ã–ª–∫–∞
            message = f"<b>@{channel_username}</b>"
            if text:
                message += f"\n\n{text}"
            if date_str:
                message += f"\n{date_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π
            if url:
                message += f"\n\n{url}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è @–∫–∞–Ω–∞–ª–∞
            success = await self.telegram_bot.send_message(message, parse_mode="HTML")
            if success:
                logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {text[:50]}...")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    
    async def filter_unsent_news(self, selected_news: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            vladivostok_tz = pytz.timezone('Asia/Vladivostok')
            today = datetime.now(vladivostok_tz).date()
            
            # –ü–æ–ª—É—á–∞–µ–º ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            with self.database._get_connection() as conn:
                cursor = conn.execute(
                    "SELECT news_ids FROM sent_digests WHERE date = ?",
                    (today,)
                )
                sent_results = cursor.fetchall()
            
            sent_ids = set()
            for row in sent_results:
                if row[0]:
                    sent_ids.update(row[0].split(','))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            new_news = []
            for news in selected_news:
                if news['id'] not in sent_ids:
                    new_news.append(news)
            
            logger.info(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(new_news)} –Ω–æ–≤—ã—Ö –∏–∑ {len(selected_news)} –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö")
            return new_news
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return selected_news  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ
    
    async def send_status_update(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            stats = await self.database.get_today_stats()
            system_stats = {
                'memory_percent': self.system_monitor.get_memory_usage()['used_percent'],
                'cpu_percent': self.system_monitor.get_cpu_usage()['cpu_percent']
            }
            
            combined_stats = {**stats, **system_stats}
            await self.telegram_bot.send_status_update(combined_stats)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def auto_cleanup_old_data(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            await self.database.cleanup_old_data(days_to_keep=7)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            with self.database._get_connection() as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM messages")
                messages_count = cursor.fetchone()[0]
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
            await self.telegram_bot.send_message(
                f"üßπ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞</b>\n\n"
                f"üìä –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (>7 –¥–Ω–µ–π)\n"
                f"üì∞ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: {messages_count}\n"
                f"üïê {datetime.now(pytz.timezone('Asia/Vladivostok')).strftime('%d.%m.%Y %H:%M:%S')} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        
        try:
            if self.telegram_bot:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
                self.telegram_bot.stop_listening()
                
                await self.telegram_bot.send_message(
                    "üõë <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                    f"üïê {datetime.now(pytz.timezone('Asia/Vladivostok')).strftime('%d.%m.%Y %H:%M:%S')} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
                )
            
            if self.database:
                await self.database.close()
            
            if self.telegram_monitor:
                await self.telegram_monitor.disconnect()
            
            if self.web_interface:
                self.web_interface.stop_server()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø
            self.processed_media_groups.clear()
            logger.info("üßπ –ö—ç—à –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self.load_config():
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            self.load_alert_keywords()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤
            self.load_regions_config()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.setup_logging()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if not await self.initialize_components():
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            self.running = True
            await self.monitoring_cycle()
            
        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            if self.telegram_bot:
                await self.telegram_bot.send_error_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await self.shutdown()
        
        return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram News Monitor Bot...")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    bot = NewsMonitorWithBot()
    success = await bot.run()
    
    if success:
        print("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return success


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ Ctrl+C")
        sys.exit(0)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
