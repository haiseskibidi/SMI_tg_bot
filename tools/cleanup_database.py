
"""
üßπ –£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–π–¥–∂–µ—Å—Ç—ã –∏ —Ö—ç—à–∏
"""

import asyncio
import sqlite3
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path


sys.path.append(str(Path(__file__).parent.parent))

from src.database import DatabaseManager

async def cleanup_database(days_to_keep: int = 7, clear_all: bool = False):
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    
    db_path = "news_monitor.db"
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_to_keep} –¥–Ω–µ–π")
    
    try:
        
        db_manager = DatabaseManager(db_path)
        await db_manager.initialize()
        
        if clear_all:
            print("‚ö†Ô∏è  –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–°–ï–• –î–ê–ù–ù–´–•!")
            confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
            if confirm != "YES":
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            
            with db_manager._get_connection() as conn:
                tables = ['messages', 'sent_digests', 'processed_hashes', 'channel_checks', 'statistics']
                for table in tables:
                    result = conn.execute(f"DELETE FROM {table}")
                    print(f"üóëÔ∏è  –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}: {result.rowcount} –∑–∞–ø–∏—Å–µ–π")
                conn.commit()
                
                
                conn.execute("VACUUM")
                print("üóúÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∂–∞—Ç–∞")
        else:
            
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            print(f"üìÖ –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')}")
            
            with db_manager._get_connection() as conn:
                
                result = conn.execute(
                    "DELETE FROM messages WHERE created_at < ?",
                    (cutoff_date,)
                )
                print(f"üì∞ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {result.rowcount}")
                
                
                result = conn.execute(
                    "DELETE FROM sent_digests WHERE sent_at < ?",
                    (cutoff_date,)
                )
                print(f"üì® –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {result.rowcount}")
                
                
                result = conn.execute(
                    "DELETE FROM processed_hashes WHERE first_seen < ?",
                    (cutoff_date,)
                )
                print(f"üîó –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ö—ç—à–µ–π: {result.rowcount}")
                
                
                result = conn.execute(
                    "DELETE FROM channel_checks WHERE updated_at < ?",
                    (cutoff_date,)
                )
                print(f"üì∫ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {result.rowcount}")
                
                conn.commit()
                
                
                conn.execute("VACUUM")
                print("üóúÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∂–∞—Ç–∞")
        
        
        with db_manager._get_connection() as conn:
            cursor = conn.execute("SELECT COUNT(*) FROM messages")
            messages_count = cursor.fetchone()[0]
            
            cursor = conn.execute("SELECT COUNT(*) FROM sent_digests")
            digests_count = cursor.fetchone()[0]
            
            print(f"\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã:")
            print(f"üì∞ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}")
            print(f"üì® –î–∞–π–¥–∂–µ—Å—Ç–æ–≤: {digests_count}")
            
            
            db_size = os.path.getsize(db_path) / 1024 / 1024
            print(f"üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {db_size:.2f} MB")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return False
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("="*50)
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "all":
            
            await cleanup_database(clear_all=True)
        else:
            
            try:
                days = int(sys.argv[1])
                await cleanup_database(days_to_keep=days)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ 'all'")
    else:
        
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏:")
        print("1. –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π")
        print("2. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("3. –û—Ç–º–µ–Ω–∞")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ")
        
        if choice == "1":
            try:
                days = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): ") or "7")
                await cleanup_database(days_to_keep=days)
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
        elif choice == "2":
            await cleanup_database(clear_all=True)
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
