from __future__ import annotations

from typing import Any, Dict, Optional
import asyncio
from datetime import datetime
import pytz


class ChannelCommands:
    def __init__(self, bot: "TelegramBot") -> None:
        self.bot = bot

    async def add_channel(self, message: Optional[Dict[str, Any]]) -> None:
        if not message:
            await self.bot.send_message("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>https://t.me/channel_name</code>")
            return
        text = message.get("text", "")
        parts = text.split(maxsplit=1)
        if len(parts) < 2:
            await self.bot.send_message(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ <code>/add_channel https://t.me/news_channel</code>\n"
                "‚Ä¢ <code>/add_channel @news_channel</code>"
            )
            return
        channel_link = parts[1].strip()
        await self.bot.add_channel_handler(channel_link)

    async def force_subscribe(self, message: Optional[Dict[str, Any]]) -> None:
        try:
            await self.bot.send_message(
                "üì° <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>\n\n"
                "üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
            )

            if not hasattr(self.bot, "main_instance") or not self.bot.main_instance:
                await self.bot.send_message("‚ùå –ì–ª–∞–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            if not hasattr(self.bot.main_instance, "telegram_monitor") or not self.bot.main_instance.telegram_monitor:
                await self.bot.send_message("‚ùå Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            self.bot.main_instance.clear_subscription_cache()
            if hasattr(self.bot.main_instance.telegram_monitor, "clear_cache"):
                await self.bot.main_instance.telegram_monitor.clear_cache()

            channels_data = await self.bot.get_channels_from_config()  # type: ignore[attr-defined]
            all_channels = channels_data.get("channels", [])
            if not all_channels:
                await self.bot.send_message("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return

            await self.bot.send_message(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

            success_count = 0
            already_subscribed_count = 0
            failed_count = 0
            rate_limited_count = 0

            from telethon.tl.functions.channels import JoinChannelRequest

            for i, channel_config in enumerate(all_channels, 1):
                try:
                    username = channel_config.get("username", "")
                    if not username:
                        continue

                    entity = await self.bot.main_instance.telegram_monitor.get_channel_entity(username)
                    if not entity:
                        failed_count += 1
                        continue

                    already_joined = await self.bot.main_instance.telegram_monitor.is_already_joined(entity)
                    if already_joined:
                        already_subscribed_count += 1
                        self.bot.main_instance.add_channel_to_cache(username)
                    else:
                        try:
                            await self.bot.main_instance.telegram_monitor.client(JoinChannelRequest(entity))
                            success_count += 1
                            self.bot.main_instance.add_channel_to_cache(username)
                            await asyncio.sleep(3)
                        except Exception as sub_error:
                            error_msg = str(sub_error).lower()
                            if "wait" in error_msg and "seconds" in error_msg:
                                rate_limited_count += 1
                            elif "already" in error_msg or "—É—á–∞—Å—Ç–Ω–∏–∫" in error_msg:
                                already_subscribed_count += 1
                                self.bot.main_instance.add_channel_to_cache(username)
                            else:
                                failed_count += 1

                    if i % 10 == 0:
                        progress_text = (
                            f"üîÑ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(all_channels)}</b>\n\n"
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è: {success_count}\n"
                            f"üíæ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω: {already_subscribed_count}\n"
                            f"‚è≥ Rate limit: {rate_limited_count}\n"
                            f"‚ùå –û—à–∏–±–∫–∏: {failed_count}"
                        )
                        await self.bot.send_message(progress_text)
                except Exception:
                    failed_count += 1

            final_report = (
                f"üì° <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è: <b>{success_count}</b>\n"
                f"üíæ –£–∂–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω: <b>{already_subscribed_count}</b>\n"
                f"‚è≥ Rate limit: <b>{rate_limited_count}</b>\n"
                f"‚ùå –û—à–∏–±–∫–∏: <b>{failed_count}</b>\n\n"
                f"üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: <b>{len(all_channels)}</b> –∫–∞–Ω–∞–ª–æ–≤\n"
                f"üéâ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{success_count + already_subscribed_count}</b>"
            )
            if rate_limited_count > 0:
                final_report += (
                    "\n\nüí° <b>Rate limit</b> - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram.\n"
                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
                )
            await self.bot.send_message(final_report)
        except Exception as e:
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


