from __future__ import annotations

from typing import Any, Dict, Optional, TYPE_CHECKING
from datetime import datetime
import pytz
import asyncio
from loguru import logger

if TYPE_CHECKING:
    from src.telegram_bot import TelegramBot


class BasicCommands:
    def __init__(self, bot: "TelegramBot") -> None:
        self.bot = bot
        self.digest_generator = None
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
        self._init_digest_generator()

    async def start(self, message: Optional[Dict[str, Any]]) -> None:
        chat_id = message.get("chat", {}).get("id") if message else self.bot.admin_chat_id
        to_group = self.bot.is_message_from_group(chat_id) if chat_id else None

        keyboard = [
            [{"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "status"}, {"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
            [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": "add_channel"}, {"text": "üì° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", "callback_data": "force_subscribe"}],
            [{"text": "üöÄ –ó–∞–ø—É—Å–∫", "callback_data": "start_monitoring"}, {"text": "üõë –°—Ç–æ–ø", "callback_data": "stop_monitoring"}],
            [{"text": "üîÑ –†–µ—Å—Ç–∞—Ä—Ç", "callback_data": "restart"}, {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"}],
            [{"text": "üì∞ –î–∞–π–¥–∂–µ—Å—Ç", "callback_data": "digest"}, {"text": "üÜò –°–ø—Ä–∞–≤–∫–∞", "callback_data": "help"}],
        ]

        welcome_text = (
            "ü§ñ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "üìä /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "üóÇÔ∏è /manage_channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "‚ûï /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "üöÄ /start_monitoring - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "üõë /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "üîÑ /restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã\n"
            "üì∞ /digest - –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "üõë /kill_switch - –ø–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞\n"
            "üîì /unlock - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞\n"
            "üìÇ /topic_id - —É–∑–Ω–∞—Ç—å ID —Ç–µ–º—ã –≤ –≥—Ä—É–ø–ø–µ\n"
            "üì° /force_subscribe - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
            "‚öôÔ∏è /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            "‚å®Ô∏è <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</b>\n\n"
            "‚ö†Ô∏è <b>–í –≥—Ä—É–ø–ø–µ:</b> –ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞!"
        )

        await self.bot.remove_old_keyboard(to_group)
        await self.bot.send_message_with_keyboard(welcome_text, keyboard, use_reply_keyboard=False, to_group=to_group)

    async def help(self, message: Optional[Dict[str, Any]]) -> None:
        help_text = (
            "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º</b>\n\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:</b>\n"
            "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ /start_monitoring - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "‚Ä¢ /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:</b>\n"
            "‚Ä¢ /channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ /add_channel [—Å—Å—ã–ª–∫–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            "‚å®Ô∏è <b>–ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:</b>\n"
            "‚Ä¢ üöÄ –ó–∞–ø—É—Å–∫ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ üõë –°—Ç–æ–ø - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ üîÑ –†–µ—Å—Ç–∞—Ä—Ç - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª - –ø–æ–º–æ—â—å –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é\n"
            "‚Ä¢ üì° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ üì∞ –î–∞–π–¥–∂–µ—Å—Ç - —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
            "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            "<b>üí° –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            "‚Ä¢ <code>/add_channel https://t.me/news_channel</code>\n"
            "‚Ä¢ <code>https://t.me/news_channel</code> (–ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞)\n"
            "‚Ä¢ <code>@news_channel</code>\n\n"
            "<b>üöÄ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            "‚Ä¢ <code>@channel1 @channel2 @channel3</code>\n"
            "‚Ä¢ <code>https://t.me/ch1 t.me/ch2 @ch3</code>\n"
            "‚Ä¢ –°–º–µ—à–∏–≤–∞–π—Ç–µ –ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "<b>üì§ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ forward:</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ –†–µ–≥–∏–æ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è! ‚ö°\n\n"
            "<b>üîß –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:</b>\n"
            "‚Ä¢ <b>–ó–∞–ø—É—Å–∫</b> - –Ω–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ <b>–°—Ç–æ–ø</b> - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∫–∞–Ω–∞–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è)\n"
            "‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)"
        )

        keyboard = [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]]
        await self.bot.edit_message_with_keyboard(help_text, keyboard, use_reply_keyboard=False, chat_id=self.bot.current_callback_chat_id)

    async def status(self, message: Optional[Dict[str, Any]]) -> None:
        if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, "monitoring_active"):
            is_running = self.bot.monitor_bot.monitoring_active
        else:
            is_running = True

        monitoring_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        monitoring_emoji = "üì°" if is_running else "‚èπÔ∏è"

        try:
            channels = await self.bot.get_channels_from_config()  # type: ignore[attr-defined]
            channels_count = len(channels)
        except Exception:
            channels_count = 0

        active_channels_count = 0
        latest_message_info = {
            'channel_name': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            'text_preview': '–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç'
        }

        if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'database'):
            try:
                active_channels_count = await self.bot.monitor_bot.database.get_active_channels_count()
                latest_message_info = await self.bot.monitor_bot.database.get_latest_message_info()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

        status_text = (
            "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            f"üîÑ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> üü¢ –ê–∫—Ç–∏–≤–Ω–∞\n"
            f"{monitoring_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {monitoring_status}\n"
            f"üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> {channels_count}\n"
            f"üì° <b>–ê–∫—Ç–∏–≤–Ω–æ –∑–∞ 24—á:</b> {active_channels_count}\n\n"
        )

        if latest_message_info['channel_name'] != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':
            status_text += (
                f"üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                f"üì£ –ö–∞–Ω–∞–ª: {latest_message_info['channel_name']}\n"
                f"üí¨ –¢–µ–∫—Å—Ç: {latest_message_info['text_preview']}\n\n"
            )

        if is_running:
            status_text += "üí° <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n\n"
        else:
            status_text += "üí° <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ üöÄ –ó–∞–ø—É—Å–∫\n\n"

        vladivostok_tz = pytz.timezone("Asia/Vladivostok")
        current_time = datetime.now(vladivostok_tz).strftime("%d.%m.%Y %H:%M:%S")
        status_text += f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"

        keyboard = [
            [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}],
        ]

        chat_id = message.get("chat", {}).get("id") if message else self.bot.admin_chat_id
        to_group = self.bot.is_message_from_group(chat_id) if chat_id else None
        await self.bot.send_message_with_keyboard(status_text, keyboard, use_reply_keyboard=False, to_group=to_group)

    async def start_monitoring(self, message: Optional[Dict[str, Any]]) -> None:
        keyboard = [["üõë –°—Ç–æ–ø", "üìä –°—Ç–∞—Ç—É—Å"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        if not self.bot.monitor_bot:
            await self.bot.send_message_with_keyboard("‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", keyboard)
            return
        if self.bot.monitor_bot.monitoring_active:
            await self.bot.send_message_with_keyboard(
                "‚ö†Ô∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üõë –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
                keyboard,
            )
            return
        await self.bot.monitor_bot.resume_monitoring()
        vladivostok_tz = pytz.timezone("Asia/Vladivostok")
        current_time = datetime.now(vladivostok_tz).strftime("%d.%m.%Y %H:%M:%S")
        await self.bot.send_message_with_keyboard(
            "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            "üì± <b>Telegram –±–æ—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            "üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
            "üß† <b>–ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä:</b> ‚úÖ –ì–æ—Ç–æ–≤\n"
            "üì∫ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            "üåê <b>–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b> ‚úÖ http://localhost:8080\n\n"
            f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)",
            keyboard,
        )

    async def stop_monitoring(self, message: Optional[Dict[str, Any]]) -> None:
        keyboard = [["üöÄ –ó–∞–ø—É—Å–∫", "üìä –°—Ç–∞—Ç—É—Å"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        if not self.bot.monitor_bot:
            await self.bot.send_message_with_keyboard("‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", keyboard)
            return
        if not self.bot.monitor_bot.monitoring_active:
            await self.bot.send_message_with_keyboard(
                "‚ö†Ô∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üöÄ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
                keyboard,
            )
            return
        await self.bot.monitor_bot.pause_monitoring()
        vladivostok_tz = pytz.timezone("Asia/Vladiv–æ—Å—Ç–æ–∫")
        current_time = datetime.now(vladivostok_tz).strftime("%d.%m.%Y %H:%M:%S")
        await self.bot.send_message_with_keyboard(
            "üõë <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)",
            keyboard,
        )

    async def restart(self, message: Optional[Dict[str, Any]]) -> None:
        keyboard = [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        vladivostok_tz = pytz.timezone("Asia/Vladivostok")
        current_time = datetime.now(vladivostok_tz).strftime("%d.%m.%Y %H:%M:%S")
        await self.bot.send_message_with_keyboard(
            "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...</b>\n\n"
            "üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n"
            "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...\n"
            "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å...\n\n"
            f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)\n\n"
            "‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...</i>",
            keyboard,
        )
        await asyncio.sleep(2)
        import os
        import sys
        os.execv(sys.executable, ["python"] + sys.argv)

    async def kill_switch(self, message: Optional[Dict[str, Any]]) -> None:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞"""
        try:
            keyboard = [
                ["‚úÖ –î–ê, –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨", "‚ùå –û—Ç–º–µ–Ω–∞"],
                ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            await self.bot.send_message_with_keyboard(
                "üõë <b>KILL SWITCH - –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</b>\n\n"
                "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞:\n"
                "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç –±–æ—Ç–∞ –ù–ê–í–°–ï–ì–î–ê\n"
                "‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏\n"
                "‚Ä¢ –ü–æ—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ /unlock\n\n"
                "ü§î <b>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞?</b>",
                keyboard,
            )
        except Exception as e:
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ Kill Switch: {e}")

    async def unlock(self, message: Optional[Dict[str, Any]]) -> None:
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ (—É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª STOP_BOT)"""
        try:
            import os
            stop_file = "STOP_BOT"
            
            if os.path.exists(stop_file):
                os.remove(stop_file)
                keyboard = [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
                vladivostok_tz = pytz.timezone("Asia/Vladiv–æ—Å—Ç–æ–∫")
                current_time = datetime.now(vladivostok_tz).strftime("%d.%m.%Y %H:%M:%S")
                await self.bot.send_message_with_keyboard(
                    "üîì <b>–ë–û–¢ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù!</b>\n\n"
                    "‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω\n"
                    "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É\n\n"
                    f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)\n\n"
                    "üí° <i>Systemd –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</i>",
                    keyboard,
                )
            else:
                keyboard = [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
                await self.bot.send_message_with_keyboard(
                    "‚ÑπÔ∏è <b>–ë–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "–§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ STOP_BOT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    keyboard,
                )
        except Exception as e:
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

    def _init_digest_generator(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
        try:
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ monitor_bot: {self.bot.monitor_bot}")
            
            if self.bot.monitor_bot:
                logger.debug(f"üîç Monitor_bot –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º database: {hasattr(self.bot.monitor_bot, 'database')}")
                
                if hasattr(self.bot.monitor_bot, 'database'):
                    logger.debug(f"üîç Database –Ω–∞–π–¥–µ–Ω–∞: {self.bot.monitor_bot.database}")
                    
                    from src.digest_generator import DigestGenerator
                    self.digest_generator = DigestGenerator(self.bot.monitor_bot.database)
                    logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –£ monitor_bot –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'database'")
            else:
                logger.warning("‚ö†Ô∏è monitor_bot —Ä–∞–≤–µ–Ω None")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")

    async def digest(self, message: Optional[Dict[str, Any]]) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            logger.info("üì∞ –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã digest")
            
            if not self.digest_generator:
                logger.warning("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ")
                self._init_digest_generator()
            
            if not self.digest_generator:
                error_msg = "‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                if not self.bot.monitor_bot:
                    error_msg += "–ü—Ä–∏—á–∏–Ω–∞: Monitor bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                elif not hasattr(self.bot.monitor_bot, 'database'):
                    error_msg += "–ü—Ä–∏—á–∏–Ω–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                else:
                    error_msg += "–ü—Ä–∏—á–∏–Ω–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
                
                await self.bot.send_message(error_msg)
                return

            # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            command_text = message.get("text", "") if message else ""
            params = command_text.split()[1:] if command_text else []
            
            days = 7  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–µ–ª—è
            custom_start = None
            custom_end = None
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if len(params) == 1:
                try:
                    days = int(params[0])
                except ValueError:
                    pass
            elif len(params) == 2:
                try:
                    custom_start = params[0]
                    custom_end = params[1]
                except ValueError:
                    pass

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏  
            available_channels = await self.digest_generator.get_available_channels(days)
            
            if not available_channels:
                await self.bot.send_message("‚ùå –ö–∞–Ω–∞–ª—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ (—Ç–æ–ø-10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö)
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–í—Å–µ –∫–∞–Ω–∞–ª—ã" –∫–∞–∫ –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é
            keyboard.append([{"text": "üåç –í—Å–µ –∫–∞–Ω–∞–ª—ã", "callback_data": f"digest_all_channels_{days}"}])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∫–∞–Ω–∞–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 8)
            for i, channel in enumerate(available_channels[:8]):
                name = channel['name'][:25] + "..." if len(channel['name']) > 25 else channel['name']
                emoji = "üì∫"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
                msg_count = channel['messages_count']
                text = f"{emoji} {name} ({msg_count})"
                
                keyboard.append([{"text": text, "callback_data": f"digest_channel_{channel['username']}_{days}"}])
            
            keyboard.append([{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}])

            channel_text = "üì∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:</b>\n\n"
            channel_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π\n"
            channel_text += f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(available_channels)}\n\n"
            channel_text += "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</b>\n"
            channel_text += "‚Ä¢ <code>/digest</code> - –Ω–µ–¥–µ–ª—è, –≤—Å–µ –∫–∞–Ω–∞–ª—ã\n"
            channel_text += "‚Ä¢ <code>/digest 14</code> - 14 –¥–Ω–µ–π\n"
            channel_text += "‚Ä¢ <code>/digest 2025-01-01 2025-01-07</code> - —Å–≤–æ–π –ø–µ—Ä–∏–æ–¥"

            await self.bot.send_message_with_keyboard(channel_text, keyboard)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã digest: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")

    async def generate_digest_for_channel(self, channel: Optional[str], days: int = 7) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            if not self.digest_generator:
                self._init_digest_generator()
            
            if not self.digest_generator:
                return "‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_text = await self.digest_generator.generate_weekly_digest(
                channel=channel,
                days=days,
                limit=10
            )
            
            return digest_text

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç: {e}"

    async def topic_id(self, message: Optional[Dict[str, Any]]) -> None:
        chat = message.get("chat", {}) if message else {}
        chat_type = chat.get("type")
        chat_title = chat.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
        chat_id = chat.get("id")
        thread_id = message.get("message_thread_id") if message else None

        if chat_type not in ["group", "supergroup"]:
            await self.bot.send_message(
                "‚ùå <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /topic_id –≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã"
            )
            return

        self.bot.pending_topic_data = {  # type: ignore[attr-defined]
            "chat_title": chat_title,
            "chat_id": chat_id,
            "thread_id": thread_id,
        }

        if not thread_id:
            response_text = (
                f"üéØ <b>ID –¢–ï–ú–´ –ü–û–õ–£–ß–ï–ù!</b>\n\n"
                f"üìÇ <b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}\n"
                f"üè† <b>Chat ID:</b> <code>{chat_id}</code>\n"
                f"üìã <b>–¢–µ–º–∞:</b> –û–±—â–∞—è –ª–µ–Ω—Ç–∞ (–≥–ª–∞–≤–Ω–∞—è)\n"
                f"üÜî <b>Topic ID:</b> <code>null</code>\n\n"
                f"üìù <b>–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
                f"<code>general: null</code>"
            )
            keyboard = [
                [{"text": "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥", "callback_data": "auto_add_topic_general"}],
                [{"text": "üìã –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "callback_data": "no_action"}],
            ]
        else:
            response_text = (
                f"üéØ <b>ID –¢–ï–ú–´ –ü–û–õ–£–ß–ï–ù!</b>\n\n"
                f"üìÇ <b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}\n"
                f"üè† <b>Chat ID:</b> <code>{chat_id}</code>\n"
                f"üìã <b>–¢–µ–º–∞:</b> –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞\n"
                f"üÜî <b>Topic ID:</b> <code>{thread_id}</code>\n\n"
                f"üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>"
            )
            regions = await self.bot.load_regions_from_config()  # type: ignore[attr-defined]
            keyboard = [[{"text": f"{r['emoji']} {r['name']}", "callback_data": f"auto_add_topic_{r['key']}"}] for r in regions]
            keyboard.append([{"text": "üìã –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "callback_data": "no_action"}])

        await self.bot.send_message_with_keyboard(response_text, keyboard, use_reply_keyboard=False)


