"""
AI —á–∞—Ç - –æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –ø—Ä—è–º–æ –≤ –≥—Ä—É–ø–ø–µ
"""
import asyncio
from typing import Dict, Any, Optional
from loguru import logger
import httpx

class AIChatHandler:
    def __init__(self, bot):
        self.bot = bot
        self.ollama_client = None
        self.model_name = "qwen2.5:7b"
        self.ollama_url = "http://localhost:11434"
        self.chat_history = {}  # –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        self.max_history = 6    # –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π    
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama"""
        try:
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —á–∞—Ç–∞ - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Ollama
            self.ollama_client = httpx.AsyncClient(timeout=60.0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
            response = await self.ollama_client.get(f"{self.ollama_url}/api/tags")
            if response.status_code != 200:
                raise Exception(f"Ollama —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
            models = response.json().get("models", [])
            model_names = [model["name"] for model in models]
            
            if self.model_name not in model_names:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è AI —á–∞—Ç–∞")
                logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_names}")
            
            logger.success(f"‚úÖ AI —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Ollama (–º–æ–¥–µ–ª—å: {self.model_name})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —á–∞—Ç–∞: {e}")
            if self.ollama_client:
                await self.ollama_client.aclose()
            self.ollama_client = None
    
    async def handle_ai_question(self, message: Optional[Dict[str, Any]]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI"""
        try:
            if not message or 'text' not in message:
                await self.bot.send_message("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
                return
                
            text = message['text'].strip()
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/ask '):
                question = text[5:].strip()
            elif text.lower().startswith('ai:'):
                question = text[3:].strip()
            elif text.lower().startswith('–∏–∏:'):
                question = text[3:].strip()
            else:
                # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                await self.bot.send_message(
                    "ü§ñ <b>AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                    "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
                    "‚Ä¢ <code>/ask –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\n"
                    "‚Ä¢ <code>AI: –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\n"
                    "‚Ä¢ <code>–ò–ò: –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/ask –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?</code>"
                )
                return
                
            if not question:
                await self.bot.send_message("‚ùì –ê —á—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å-—Ç–æ —Ö–æ—Ç–µ–ª–∏?")
                return
            
            chat_id = message.get("chat", {}).get("id")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await self.bot.send_chat_action(chat_id, "typing")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ AI
            answer = await self._ask_ai(question, chat_id)
            
            if answer:
                await self.bot.send_message(answer, chat_id=chat_id)
            else:
                await self.bot.send_message(
                    "üòî <b>–ê—Ä–Ω–æ–ª—å–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω",
                    chat_id=chat_id
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await self.bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
    
    def _add_to_history(self, chat_id: int, user_message: str, ai_response: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if chat_id not in self.chat_history:
            self.chat_history[chat_id] = []
        
        self.chat_history[chat_id].append({
            "user": user_message,
            "assistant": ai_response
        })
        
        # –ü—Ä–æ—Å—Ç–æ–µ FIFO –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(self.chat_history[chat_id]) > self.max_history:
            self.chat_history[chat_id] = self.chat_history[chat_id][-self.max_history:]
    
    def _get_history_context(self, chat_id: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        if chat_id not in self.chat_history or not self.chat_history[chat_id]:
            return ""
        
        history_text = "\nPREVIOUS CONVERSATION CONTEXT:\n"
        for msg in self.chat_history[chat_id]:
            history_text += f"User: {msg['user']}\n"
            history_text += f"–ê—Ä–Ω–æ–ª—å–¥: {msg['assistant']}\n\n"
        
        return history_text
    
    def clear_chat_history(self, chat_id: int):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
        if chat_id in self.chat_history:
            del self.chat_history[chat_id]
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    async def _ask_ai(self, question: str, chat_id: Optional[int] = None) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ AI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        try:
            if not self.ollama_client:
                logger.warning("‚ö†Ô∏è Ollama –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è AI —á–∞—Ç–∞")
                return None
            
            prompt = f"""You are –ê—Ä–Ω–æ–ª—å–¥, an AI analyst assistant for SMI#1 media holding. You help journalists with analysis, ideas, and editorial tasks.

CRITICAL: Respond ONLY in Russian. Never use Chinese or other languages.
IMPORTANT: Never use letter "—ë" - always write "–µ" instead (–µ–ª–∫–∏ –Ω–µ "—ë–ª–∫–∏", –≤—Å–µ –Ω–µ "–≤—Å—ë")

üéØ –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å (–±–µ–∑ —Å–ª–æ–≤ "–∑–∞–≥–æ–ª–æ–≤–æ–∫", "–±–∞–π—Ç—ã", "–Ω–æ–≤–æ—Å—Ç—å"), –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
- –°–æ–∑–¥–∞–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –±–∞–π—Ç—ã –¢–û–õ–¨–ö–û –ø—Ä–∏ —è–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ

üîç –¢–í–û–ò –§–£–ù–ö–¶–ò–ò:
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª—é–±—ã—Ö —Ç–µ–º–∞—Ö
- –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º  
- –ü–æ–º–æ–≥–∞—Ç—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–∫—Å—Ç–æ–≤ (—Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –±–∞–π—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É

PERSONALITY: –¢—ã –ê—Ä–Ω–æ–ª—å–¥ - —É–º–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.

{self._get_history_context(chat_id) if chat_id else ""}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:"""

            response = await self._make_ollama_request(prompt)
            
            if response:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º)
                if len(response) > 4000:
                    response = response[:3950] + "\n\n... (–æ—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                if chat_id:
                    self._add_to_history(chat_id, question, response)
                    
                return response
            else:
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI: {e}")
            return None
    
    async def _make_ollama_request(self, prompt: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Ollama –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        if not self.ollama_client:
            return None
            
        try:
            response = await self.ollama_client.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.3,  # –ß—É—Ç—å –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —á–∞—Ç–∞
                        "top_p": 0.9,
                        "num_predict": 800   
                    }
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get("response", "").strip()
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Ollama –∑–∞–ø—Ä–æ—Å–∞ –≤ AI —á–∞—Ç–µ: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama –≤ AI —á–∞—Ç–µ: {e}")
            return None
    
    async def handle_ai_info(self, message: Optional[Dict[str, Any]]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± AI —Å–∏—Å—Ç–µ–º–µ"""
        try:
            ai_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if self.ollama_client else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            info_text = (
                f"ü§ñ <b>–ê—Ä–Ω–æ–ª—å–¥ - AI –ê–Ω–∞–ª–∏—Ç–∏–∫ SMI#1</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {ai_status}\n"
                f"üß† <b>–ú–æ–¥–µ–ª—å:</b> {self.model_name}\n"
                f"üîç <b>–†–æ–ª—å:</b> –ü–æ–º–æ—â–Ω–∏–∫-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–≤\n\n"
                f"üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
                f"  ‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ (—Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, –∏—Å—Ç–æ—á–Ω–∏–∫–∏)\n"
                f"  ‚Ä¢ üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ö–µ—à—Ç–µ–≥–∏)\n"
                f"  ‚Ä¢ üì± –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ (—Ä–µ–∞–∫—Ü–∏–∏ –∫ –Ω–æ–≤–æ—Å—Ç—è–º)\n"
                f"  ‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—à–∏–±–∫–∏, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞)\n"
                f"  ‚Ä¢ üìù –†–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∞—è –ø–æ–º–æ—â—å (–æ–±—ä—è—Å–Ω–µ–Ω–∏—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"
                f"  ‚Ä¢ üåê –°–ø—Ä–∞–≤–∫–∏ –ø–æ –º–µ–¥–∏–∞-—Ç–µ—Ä–º–∏–Ω–∞–º\n\n"
                f"üí¨ <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n"
                f"  <code>–ù–∞–π–¥–∏ –≤—Å–µ —á–∏—Å–ª–∞ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ</code>\n"
                f"  <code>–ï—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞?</code>\n"
                f"  <code>–ü—Ä–∏–¥—É–º–∞–π –±–∞–π—Ç—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ —é—Ä–∏—Å—Ç–æ–≤</code>\n"
                f"  <code>–ü—Ä–∏–¥—É–º–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞</code>\n"
                f"  <code>–°–¥–µ–ª–∞–π —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É –ø—Ä–æ –ø–æ–≥–æ–¥—É</code>\n"
                f"  <code>–ö–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É–ø–æ–º—è–Ω—É—Ç—ã?</code>\n\n"
                f"üîç <b>–§–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n"
                f"  ‚Ä¢ <b>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</b>\n"
                f"    üè• –û—Ç–∫—Ä—ã–ª–∏ –≤—ã—Å—Ç–∞–≤–∫—É –≤ –±–æ–ª—å–Ω–∏—Ü–µ –Ø–∫—É—Ç—Å–∫–∞\n"
                f"    üå≤ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –ø–æ–≤—Ä–µ–¥–∏–ª–∏ –¥–µ—Ä–µ–≤—å—è –≤ –ï–ª–∏–∑–æ–≤–æ\n\n"
                f"  ‚Ä¢ <b>–ë–∞–π—Ç—ã (—Ç–æ–ª—å–∫–æ –∏–∑ 41 —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏):</b>\n"
                f"    üò± ‚Äî –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–¥–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è;\n"
                f"    üëç ‚Äî –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ;\n"
                f"    <i>–°–ø–∏—Å–æ–∫: ‚≠ê ‚ù§Ô∏è üëç üò° üò± üåô üòî ü§ì üíî üòê üî• üê≥ üéâ üòÉ üëé üëè üò¨ üòÅ ü§¶ üé≠ ü§Æ üëë üòä üòà üò¢ üòç üòé üíØ üòÇ ‚ö° üèÜ üíñ üòÑ üëø üò≠ üíú üëª üëÄ ü§î üôÑ ü§Ø</i>\n\n"
                f"üí≠ <b>–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤:</b>\n"
                f"  ‚Ä¢ –ê—Ä–Ω–æ–ª—å–¥ –ø–æ–º–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ {self.max_history} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/clear_ai</code> –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏\n\n"
                f"‚ùå <b>–ù–ï –¥–µ–ª–∞–µ—Ç:</b> –ø–æ–ª–Ω—ã–µ —Ä–µ—Ä–∞–π—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π (–º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ)\n\n"
                f"‚ÑπÔ∏è <code>/ai_info</code> - —ç—Ç–æ —Å–ø—Ä–∞–≤–∫–∞"
            )
            
            await self.bot.send_message(info_text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            await self.bot.send_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± AI")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        if self.ollama_client:
            await self.ollama_client.aclose()
            logger.info("üßπ –ê—Ä–Ω–æ–ª—å–¥: HTTP –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")
