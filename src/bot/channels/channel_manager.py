"""
üì∫ Channel Manager
–õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ –±–µ–∑ UI
"""

import yaml
import os
from typing import Dict, List, Optional, Any
from loguru import logger
from datetime import datetime
from .channel_parser import ChannelParser


class ChannelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    
    def __init__(self, bot: "TelegramBot"):
        self.bot = bot
        self.parser = ChannelParser()
    
    async def add_channel_handler(self, channel_link: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ"""
        try:
            logger.info(f"‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {channel_link}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏
            channel_username = self.parser.parse_channel_username(channel_link)
            if not channel_username:
                await self.bot.send_message(
                    "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    "‚Ä¢ <code>https://t.me/channel_name</code>\n"
                    "‚Ä¢ <code>@channel_name</code>\n"
                    "‚Ä¢ <code>channel_name</code>"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            if self.is_channel_already_added(channel_username):
                await self.bot.send_message(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª @{channel_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            channel_title = await self._get_channel_title(channel_username)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
            self.bot.pending_channel_url = channel_username
            
            # –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
            from ..ui.keyboard_builder import KeyboardBuilder
            keyboard_builder = KeyboardBuilder(self.bot)
            from ..channels.channel_ui import ChannelUI
            channel_ui = ChannelUI(self.bot)
            await channel_ui.show_channel_preview_and_region_selection(channel_username, channel_title)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def add_channel_to_config(self, channel_username: str, region: str = "general") -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            config_path = "config/channels_config.yaml"
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f) or {}
            else:
                config = {}
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if 'regions' not in config:
                config['regions'] = {}
            if region not in config['regions']:
                config['regions'][region] = {
                    'name': f'üìç {region.title()}',
                    'channels': []
                }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            existing_channels = config['regions'][region].get('channels', [])
            for channel in existing_channels:
                if channel.get('username') == channel_username:
                    logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª @{channel_username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}")
                    return False
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            new_channel = {
                'title': f'–ö–∞–Ω–∞–ª @{channel_username}',
                'username': channel_username
            }
            config['regions'][region]['channels'].append(new_channel)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, allow_unicode=True, indent=2, default_flow_style=False)
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω {region}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            await self._auto_commit_config(
                f"Add channel @{channel_username} to {region}",
                ["config/channels_config.yaml"]
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –∫–æ–Ω—Ñ–∏–≥: {e}")
            return False
    
    async def delete_channel_from_config(self, region_key: str, username: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = "config/channels_config.yaml"
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            if 'regions' not in config or region_key not in config['regions']:
                return False
            
            channels = config['regions'][region_key].get('channels', [])
            original_count = len(channels)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            config['regions'][region_key]['channels'] = [
                ch for ch in channels if ch.get('username') != username
            ]
            
            new_count = len(config['regions'][region_key]['channels'])
            
            if original_count == new_count:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω–µ {region_key}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, allow_unicode=True, indent=2, default_flow_style=False)
            
            logger.info(f"üóëÔ∏è –ö–∞–Ω–∞–ª @{username} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ {region_key}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç
            await self._auto_commit_config(
                f"Remove channel @{username} from {region_key}",
                ["config/channels_config.yaml"]  
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def get_all_channels_grouped(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
        try:
            config_path = "config/channels_config.yaml"
            
            if not os.path.exists(config_path):
                return {}
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            if not config or 'regions' not in config:
                return {}
            
            # –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            main_config = await self._load_main_config()
            regions_info = main_config.get('regions', {})
            
            result = {}
            for region_key, region_data in config['regions'].items():
                channels = region_data.get('channels', [])
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞
                region_info = regions_info.get(region_key, {})
                
                result[region_key] = {
                    'name': region_data.get('name') or region_info.get('name', f'üìç {region_key.title()}'),
                    'emoji': region_info.get('emoji', 'üìç'),
                    'channels': channels,
                    'count': len(channels)
                }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {}
    
    async def get_channels_from_config(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            config_path = "config/channels_config.yaml"
            
            if not os.path.exists(config_path):
                return {"channels": []}
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
            all_channels = []
            for region_key, region_data in config.get('regions', {}).items():
                channels = region_data.get('channels', [])
                for channel in channels:
                    channel_copy = channel.copy()
                    channel_copy['region'] = region_key
                    all_channels.append(channel_copy)
            
            return {"channels": all_channels}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {"channels": []}
    
    def is_channel_already_added(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º—É"""
        try:
            config_path = "config/channels_config.yaml"
            
            if not os.path.exists(config_path):
                return False
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            for region_key, region_data in config.get('regions', {}).items():
                channels = region_data.get('channels', [])
                for channel in channels:
                    if channel.get('username') == username:
                        return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    async def _get_channel_title(self, username: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ monitor_bot
            if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'telegram_monitor'):
                telegram_monitor = self.bot.monitor_bot.telegram_monitor
                if telegram_monitor and telegram_monitor.is_connected:
                    entity = await telegram_monitor.get_channel_entity(username)
                    if entity and hasattr(entity, 'title'):
                        return entity.title
            
            # Fallback –Ω–∞–∑–≤–∞–Ω–∏–µ
            return f"–ö–∞–Ω–∞–ª @{username}"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{username}: {e}")
            return f"–ö–∞–Ω–∞–ª @{username}"
    
    async def _show_region_selection_for_channel(self, username: str, title: str):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            regions_config = await self._load_main_config()
            regions = regions_config.get('regions', {})
            
            if not regions:
                await self.bot.send_message("‚ùå –†–µ–≥–∏–æ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
            auto_region = self._detect_channel_region(title, username, regions)
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞
            keyboard = []
            for region_key, region_data in regions.items():
                emoji = region_data.get('emoji', 'üìç')
                name = region_data.get('name', region_key.title())
                
                # –û—Ç–º–µ—á–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
                if region_key == auto_region:
                    name += " ‚≠ê"
                
                display_name = name if name.startswith(emoji) else f"{emoji} {name}"
                
                keyboard.append([{
                    "text": display_name,
                    "callback_data": f"region_selected_{region_key}"
                }])
            
            # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            keyboard.append([{
                "text": "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω",
                "callback_data": "create_new_region"
            }])
            
            text = f"üåè <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b>\n\nüì∫ <b>{title}</b>\n@{username}"
            if auto_region:
                text += f"\n\nüí° –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {regions[auto_region].get('name', auto_region)} ‚≠ê"
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    def _detect_channel_region(self, channel_title: str, username: str, regions: Dict) -> Optional[str]:
        """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        try:
            title_lower = channel_title.lower()
            username_lower = username.lower()
            combined_text = f"{title_lower} {username_lower}"
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            for region_key, region_data in regions.items():
                keywords = region_data.get('keywords', [])
                for keyword in keywords:
                    if str(keyword).lower() in combined_text:
                        logger.info(f"üéØ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: @{username} ‚Üí {region_key} (–ø–æ —Å–ª–æ–≤—É '{keyword}')")
                        return region_key
            
            logger.info(f"‚ùì –†–µ–≥–∏–æ–Ω –¥–ª—è @{username} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            return None
    
    async def _load_main_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_path = "config/config.yaml"
            
            if not os.path.exists(config_path):
                return {}
            
            with open(config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f) or {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    async def _auto_commit_config(self, action_description: str, files_changed: List[str] = None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if not files_changed:
                files_changed = ["config/channels_config.yaml"]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è git
            import subprocess
            try:
                subprocess.run(["git", "--version"], capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                logger.debug("üìù Git –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç")
                return True
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ git
            for file_path in files_changed:
                result = subprocess.run(
                    ["git", "add", file_path], 
                    capture_output=True, text=True
                )
                if result.returncode != 0:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {file_path} –≤ git: {result.stderr}")
            
            # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            commit_message = f"Update configuration: {action_description}"
            result = subprocess.run(
                ["git", "commit", "-m", commit_message],
                capture_output=True, text=True
            )
            
            if result.returncode == 0:
                logger.info(f"üìù –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {action_description}")
                return True
            else:
                logger.debug(f"üìù –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞: {action_description}")
                return True
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞: {e}")
            return False
    
    async def _show_region_selection_for_channel(self, username: str, title: str):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ChannelUI
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        await self.bot.send_message(
            f"üåè <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b>\n\n"
            f"üì∫ <b>{title}</b>\n@{username}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage_channels –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"
        )

