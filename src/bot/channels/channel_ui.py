"""
üé® Channel UI
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
"""

from typing import Dict, List, Optional, Any
from loguru import logger


class ChannelUI:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    
    def __init__(self, bot: "TelegramBot"):
        self.bot = bot
    
    async def show_channels_management(self, channels_data: Dict, message: Optional[Dict] = None):
        """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            text = "üóÇÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_channels = 0
            for region_data in channels_data.values():
                total_channels += len(region_data.get('channels', []))
            
            text += f"üìä <b>–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {total_channels}\n"
            text += f"üìÇ <b>–†–µ–≥–∏–æ–Ω–æ–≤:</b> {len(channels_data)}\n\n"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            keyboard = []
            
            for region_key, region_data in channels_data.items():
                region_name = region_data.get('name', f'üìç {region_key.title()}')
                channels_count = len(region_data.get('channels', []))
                
                button_text = f"{region_name} ({channels_count})"
                callback_data = f"manage_region_{region_key}"
                keyboard.append([{"text": button_text, "callback_data": callback_data}])
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": "add_channel"},
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh_channels"}
            ])
            keyboard.append([{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}])
            
            text += "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:"
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            chat_id = message.get("chat", {}).get("id") if message else self.bot.admin_chat_id
            to_group = self.bot.is_message_from_group(chat_id) if chat_id else None
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False, to_group=to_group
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    async def show_region_channels(self, region_key: str, page: int = 1):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
            channels_data = await self.bot.channel_manager.get_all_channels_grouped()
            
            if region_key not in channels_data:
                await self.bot.send_message(f"‚ùå –†–µ–≥–∏–æ–Ω '{region_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            region_info = channels_data[region_key]
            region_name = region_info.get('name', f'üìç {region_key.title()}')
            channels = region_info.get('channels', [])
            
            if not channels:
                await self._show_empty_region(region_key, region_name)
                return
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            channels_per_page = 10
            total_pages = (len(channels) + channels_per_page - 1) // channels_per_page
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page < 1:
                page = 1
            elif page > total_pages:
                page = total_pages
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = (page - 1) * channels_per_page
            end_idx = min(start_idx + channels_per_page, len(channels))
            current_channels = channels[start_idx:end_idx]
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text = f"üìÇ <b>{region_name}</b>\n\n"
            text += f"üìä <b>–ö–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ:</b> {len(channels)}\n"
            text += f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page} –∏–∑ {total_pages}\n\n"
            text += "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            
            keyboard = []
            for i, channel in enumerate(current_channels, start_idx + 1):
                username = channel.get('username', 'unknown')
                
                text += f"{i}. <a href=\"https://t.me/{username}\">@{username}</a>\n"
                
                button_text = f"üóëÔ∏è @{username[:15]}{'...' if len(username) > 15 else ''}"
                callback_data = f"delete_channel|{region_key}|{username}"
                keyboard.append([{"text": button_text, "callback_data": callback_data}])
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ 1)
            if total_pages > 1:
                nav_buttons = []
                
                if page > 1:
                    nav_buttons.append({
                        "text": f"‚¨ÖÔ∏è –°—Ç—Ä. {page-1}",
                        "callback_data": f"manage_region_{region_key}_page_{page-1}"
                    })
                
                if page < total_pages:
                    nav_buttons.append({
                        "text": f"–°—Ç—Ä. {page+1} ‚û°Ô∏è",
                        "callback_data": f"manage_region_{region_key}_page_{page+1}"
                    })
                
                if nav_buttons:
                    keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard.append([
                {"text": "‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ä–µ–≥–∏–æ–Ω–æ–≤", "callback_data": "manage_channels"},
                {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}
            ])
            
            await self.bot.keyboard_builder.send_or_edit_message_with_keyboard(
                text, keyboard, should_edit=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞ {region_key}: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def show_delete_confirmation(self, region_key: str, username: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            channels_data = await self.bot.channel_manager.get_all_channels_grouped()
            
            region_info = channels_data.get(region_key, {})
            region_name = region_info.get('name', f'üìç {region_key.title()}')
            
            # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            channel_title = f"@{username}"
            channels = region_info.get('channels', [])
            for channel in channels:
                if channel.get('username') == username:
                    channel_title = channel.get('title', f"@{username}")
                    break
            
            text = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            text += f"üìÇ <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n"
            text += f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}\n"
            text += f"üîó <b>Username:</b> @{username}\n\n"
            text += "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª?</b>\n"
            text += "–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            
            keyboard = [
                [{"text": "‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_channel_confirmed|{region_key}|{username}"}],
                [{"text": "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", "callback_data": f"manage_region_{region_key}"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    async def show_channel_preview_and_region_selection(self, channel_username: str, channel_title: str):
        """–ü—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞ –∏ –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
            regions_config = await self._load_regions_config()
            
            if not regions_config:
                await self.bot.send_message("‚ùå –†–µ–≥–∏–æ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
            auto_region = self._detect_channel_region(channel_title, channel_username, regions_config)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é
            text = f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            text += f"üìÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_title}\n"
            text += f"üîó <b>Username:</b> @{channel_username}\n\n"
            
            if auto_region:
                auto_region_info = regions_config.get(auto_region, {})
                auto_region_name = auto_region_info.get('name', auto_region.title())
                text += f"üéØ <b>–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b> {auto_region_name} ‚≠ê\n\n"
            
            text += "üåè <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b>"
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞
            keyboard = []
            for region_key, region_data in regions_config.items():
                emoji = region_data.get('emoji', 'üìç')
                name = region_data.get('name', region_key.title())
                
                # –û—Ç–º–µ—á–∞–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
                if region_key == auto_region:
                    name += " ‚≠ê"
                
                display_name = name if name.startswith(emoji) else f"{emoji} {name}"
                
                keyboard.append([{
                    "text": display_name,
                    "callback_data": f"region_selected_{region_key}"
                }])
            
            # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            keyboard.append([{
                "text": "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω",
                "callback_data": "create_new_region"
            }])
            
            keyboard.append([{
                "text": "‚ùå –û—Ç–º–µ–Ω–∞",
                "callback_data": "start"
            }])
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def show_multiple_channels_selection(self):
        try:
            channels_list = self.bot.pending_channels_list
            if not channels_list:
                await self.bot.send_message("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
                return
            
            channels_text = f"üì∫ <b>–ù–∞–π–¥–µ–Ω–æ {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
            for i, channel in enumerate(channels_list, 1):
                channels_text += f"  {i}. @{channel}\n"
            
            channels_text += "\nüìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤:</b>"
            
            regions = await self._load_regions_config()
            
            keyboard = []
            row = []
            for i, (region_key, region_info) in enumerate(regions.items()):
                emoji = region_info.get('emoji', 'üìç')
                region_name = region_info.get('name', region_key.title())
                
                if not region_name.startswith(emoji):
                    display_name = f"{emoji} {region_name}"
                else:
                    display_name = region_name
                
                callback_data = f"region_bulk_{region_key}"
                row.append({"text": display_name, "callback_data": callback_data})
                
                if len(row) == 2 or i == len(regions) - 1:
                    keyboard.append(row)
                    row = []
            
            keyboard.extend([
                [{"text": "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω", "callback_data": "create_new_region"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ])
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                channels_text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    async def show_channel_added_success(self, username: str, region: str, region_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            text = f"‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            text += f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{username}\n"
            text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n\n"
            text += "üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—à–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
            
            keyboard = [
                [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", "callback_data": "add_channel"}],
                [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
    
    async def show_channel_delete_success(self, username: str, region_key: str, region_name: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            text = f"üóëÔ∏è <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
            text += f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{username}\n"
            text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n\n"
            text += "‚ÑπÔ∏è –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            
            keyboard = [
                [{"text": "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω—É", "callback_data": f"manage_region_{region_key}"}],
                [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    async def show_add_channel_help(self):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            text = (
                "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                "üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n"
                "üîó <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
                "‚Ä¢ <code>https://t.me/channel_name</code>\n"
                "‚Ä¢ <code>@channel_name</code>\n"
                "‚Ä¢ <code>tg://resolve?domain=channel_name</code>\n\n"
                "üåç –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>https://t.me/news_kamchatka</code>\n"
                "‚Ä¢ <code>@sakhalin_news</code>"
            )
            
            keyboard = [
                [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é: {e}")
    
    async def _show_empty_region(self, region_key: str, region_name: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
        try:
            text = f"üìÇ <b>{region_name}</b>\n\n"
            text += "üì≠ <b>–í —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            text += "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!"
            
            keyboard = [
                [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": f"add_to_region_{region_key}"}],
                [{"text": "‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —Ä–µ–≥–∏–æ–Ω–æ–≤", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def show_region_stats(self, region_key: str):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã —á–µ—Ä–µ–∑ monitor_bot
            if not self.bot.monitor_bot or not self.bot.monitor_bot.database:
                await self.bot.send_message("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
            channels_data = await self.bot.channel_manager.get_all_channels_grouped()
            region_info = channels_data.get(region_key, {})
            region_name = region_info.get('name', f'üìç {region_key.title()}')
            channels = region_info.get('channels', [])
            
            if not channels:
                await self.bot.send_message(f"üìä –í —Ä–µ–≥–∏–æ–Ω–µ {region_name} –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ {region_name}</b>\n\n"
            text += f"üìÇ <b>–ö–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ:</b> {len(channels)}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            text += "üìã <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            
            active_count = 0
            for channel in channels[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                username = channel.get('username')
                try:
                    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
                    count = 0  # –ó–¥–µ—Å—å –º–æ–≥ –±—ã –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î
                    status = "üü¢" if count > 0 else "‚ö™"
                    text += f"{status} @{username}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    if count > 0:
                        active_count += 1
                except:
                    text += f"‚ö™ @{username}: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            if len(channels) > 10:
                text += f"... –∏ –µ—â–µ {len(channels) - 10} –∫–∞–Ω–∞–ª–æ–≤\n"
            
            text += f"\nüìà <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:</b> {active_count}/{len(channels)}"
            
            keyboard = [
                [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "callback_data": f"region_stats_{region_key}"}],
                [{"text": "‚Ü©Ô∏è –ö –∫–∞–Ω–∞–ª–∞–º —Ä–µ–≥–∏–æ–Ω–∞", "callback_data": f"manage_region_{region_key}"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _detect_channel_region(self, channel_title: str, username: str, regions: Dict) -> Optional[str]:
        """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        try:
            title_lower = channel_title.lower()
            username_lower = username.lower()
            combined_text = f"{title_lower} {username_lower}"
            
            # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            for region_key, region_data in regions.items():
                keywords = region_data.get('keywords', [])
                for keyword in keywords:
                    if str(keyword).lower() in combined_text:
                        logger.info(f"üéØ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: @{username} ‚Üí {region_key} (–ø–æ '{keyword}')")
                        return region_key
            
            logger.info(f"‚ùì –†–µ–≥–∏–æ–Ω –¥–ª—è @{username} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            return None
    
    async def _load_regions_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        try:
            if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'config_loader'):
                config_loader = self.bot.monitor_bot.config_loader
                return config_loader.get_regions_config()
            
            # Fallback - –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            import yaml
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                return config.get('regions', {})
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
            return {}
