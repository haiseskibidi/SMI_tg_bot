import yaml
import os
import re
import subprocess
import asyncio
from typing import Dict, List, Optional, Any
from loguru import logger
from datetime import datetime


class RegionManager:
    
    def __init__(self, bot: "TelegramBot"):
        self.bot = bot
    
    async def start_create_region_flow(self):
        try:
            self.bot.waiting_for_region_name = True
            self.bot.pending_region_data = None
            
            text = (
                "üåè <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫\n"
                "‚Ä¢ –ü—Ä–∏–º–æ—Ä—å–µ\n"
                "‚Ä¢ –ú–∞–≥–∞–¥–∞–Ω\n"
                "‚Ä¢ –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫\n\n"
                "üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —ç–º–æ–¥–∑–∏ –≤—ã–±–µ—Ä–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ"
            )
            
            keyboard = [[{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "start"}]]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def handle_region_creation(self, region_input: str):
        try:
            region_name_clean = region_input.strip()
            
            if not region_name_clean or len(region_name_clean) < 2:
                await self.bot.send_message(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫</code>"
                )
                return
            
            if any(ord(char) > 127 for char in region_name_clean if len(char.encode('utf-8')) > 3):
                await self.bot.send_message(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏!\n\n"
                    "–≠–º–æ–¥–∑–∏ –≤—ã–±–µ—Ä–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ üòä\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫</code>"
                )
                return
            
            region_key = self._create_region_key(region_name_clean)
            
            if await self._is_region_exists(region_key):
                await self.bot.send_message(
                    f"‚ùå –†–µ–≥–∏–æ–Ω '{region_name_clean}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–≥–∏–æ–Ω."
                )
                return
            
            self.bot.pending_region_data = {
                'key': region_key,
                'name_clean': region_name_clean,
                'description': f"–†–µ–≥–∏–æ–Ω {region_name_clean}"
            }
            
            from .region_ui import RegionUI
            region_ui = RegionUI(self.bot)
            await region_ui.show_emoji_selection(region_name_clean)
            
            self.bot.waiting_for_region_name = False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def create_region_confirmed(self, region_key: str) -> bool:
        try:
            if not hasattr(self.bot, 'pending_region_data') or not self.bot.pending_region_data:
                await self.bot.send_message("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                return False
            
            data = self.bot.pending_region_data
            
            if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'add_new_region'):
                success = await self.bot.monitor_bot.add_new_region(
                    region_key=data['key'],
                    region_name=data['name'],
                    region_emoji=data['emoji'],
                    region_description=data['description']
                )
                
                if success:
                    await self._show_region_created_success(data)
                    return True
            
            success = await self._create_region_in_config(data)
            
            if success:
                await self._show_region_created_success(data)
                
                if hasattr(self.bot, 'pending_channel_url') and self.bot.pending_channel_url:
                    channel_username = self.bot.pending_channel_url
                    try:
                        channel_success = await self.bot.channel_manager.add_channel_to_config(channel_username, region_key)
                        if channel_success:
                            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω {region_key}")
                            
                            if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'channel_monitor'):
                                try:
                                    success = await self.bot.monitor_bot.channel_monitor.add_single_channel_to_monitoring(channel_username)
                                    if success:
                                        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @{channel_username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{channel_username}")
                                except Exception as sub_e:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{channel_username}: {sub_e}")
                            
                            await self.bot.send_message(
                                f"üéØ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω!</b>\n\n"
                                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{channel_username}\n"
                                f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {data['name']}\n\n"
                                f"üìù –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
                                f"üîÑ <b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /restart</b>"
                            )
                            
                            self.bot.pending_channel_url = None
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª @{channel_username} –≤ —Ä–µ–≥–∏–æ–Ω {region_key}")
                    except Exception as channel_e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω: {channel_e}")
                
                if hasattr(self.bot, 'pending_channels_list') and self.bot.pending_channels_list:
                    channels_to_add = self.bot.pending_channels_list.copy()
                    logger.info(f"üìù –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(channels_to_add)} –∫–∞–Ω–∞–ª–æ–≤ –≤ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω {region_key}")
                    
                    added_count = 0
                    failed_channels = []
                    
                    for channel_username in channels_to_add:
                        try:
                            channel_success = await self.bot.channel_manager.add_channel_to_config(channel_username, region_key)
                            if channel_success:
                                added_count += 1
                                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω {region_key}")
                                
                                if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'channel_monitor'):
                                    try:
                                        success = await self.bot.monitor_bot.channel_monitor.add_single_channel_to_monitoring(channel_username)
                                        if success:
                                            logger.info(f"‚úÖ @{channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                                        await asyncio.sleep(1)
                                    except Exception as sub_e:
                                        logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ @{channel_username}: {sub_e}")
                                        await asyncio.sleep(0.5)
                            else:
                                failed_channels.append(channel_username)
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è @{channel_username}: {e}")
                            failed_channels.append(channel_username)
                    
                    region_info = data
                    region_name = region_info.get('name', region_key.title())
                    
                    result_text = f"üéâ <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                    result_text += f"üìÇ <b>–ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:</b> {region_name}\n"
                    result_text += f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {added_count}\n"
                    
                    if failed_channels:
                        result_text += f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:</b> {len(failed_channels)}\n"
                        result_text += "üîó " + ", ".join([f"@{ch}" for ch in failed_channels[:5]])
                        if len(failed_channels) > 5:
                            result_text += f" –∏ –µ—â–µ {len(failed_channels) - 5}..."
                    
                    keyboard = [
                        [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
                        [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
                    ]
                    
                    await self.bot.keyboard_builder.send_message_with_keyboard(
                        result_text, keyboard, use_reply_keyboard=False
                    )
                    
                    self.bot.pending_channels_list = []
                
                await self.auto_add_topic_to_config(region_key)
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            return False
    
    async def auto_add_topic_to_config(self, region_key: str):
        try:
            if not hasattr(self.bot, 'pending_topic_id') or not self.bot.pending_topic_id:
                self.bot.waiting_for_topic_id = True
                
                text = (
                    f"üîó <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_key}</b>\n\n"
                    "üì± <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è topic_id:</b>\n"
                    "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—É—é —Ç–µ–º—É –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ\n"
                    "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /topic_id –≤ —ç—Ç–æ–π —Ç–µ–º–µ\n"
                    "3. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n\n"
                    "üí° Topic ID –Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–∞–º"
                )
                
                keyboard = [
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
                ]
                
                await self.bot.keyboard_builder.send_message_with_keyboard(
                    text, keyboard, use_reply_keyboard=False
                )
                return
            
            topic_id = self.bot.pending_topic_id
            
            success = await self._update_region_topic_id(region_key, topic_id)
            
            if success:
                if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'config_loader'):
                    regions = self.bot.monitor_bot.config_loader.get_regions_config()
                    region_info = regions.get(region_key, {})
                    region_name = region_info.get('name', region_key.title())
                else:
                    region_name = region_key.title()
                
                text = f"‚úÖ <b>Topic ID –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n"
                text += f"üÜî <b>Topic ID:</b> {topic_id}\n\n"
                text += "üìù Topic ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
                text += "üîÑ <b>–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /restart</b>\n\n"
                text += "üéØ –ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É"
                
                keyboard = [
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
                ]
                
                await self.bot.keyboard_builder.send_message_with_keyboard(
                    text, keyboard, use_reply_keyboard=False
                )
                
                self.bot.pending_topic_id = None
                self.bot.waiting_for_topic_id = False
            else:
                await self.bot.send_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å topic_id –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_key}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è topic: {e}")
    
    async def handle_region_selection(self, region: str):
        try:
            if not self.bot.pending_channel_url:
                await self.bot.send_message("‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –∑–∞–Ω–æ–≤–æ.")
                return
            
            channel_username = self.bot.pending_channel_url
            
            success = await self.bot.channel_manager.add_channel_to_config(channel_username, region)
            
            if success:
                regions_config = await self._load_regions_config()
                region_info = regions_config.get(region, {})
                region_name = region_info.get('name', f'üìç {region.title()}')
                
                from ..channels.channel_ui import ChannelUI
                channel_ui = ChannelUI(self.bot)
                await channel_ui.show_channel_added_success(channel_username, region, region_name)
                
                self.bot.pending_channel_url = None
                
                if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'channel_monitor'):
                    try:
                        success = await self.bot.monitor_bot.channel_monitor.add_single_channel_to_monitoring(channel_username)
                        if success:
                            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @{channel_username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{channel_username}")
                        
                    except Exception as sub_e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{channel_username}: {sub_e}")
            else:
                await self.bot.send_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª @{channel_username} –≤ —Ä–µ–≥–∏–æ–Ω {region}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def handle_bulk_region_selection(self, region: str):
        try:
            if not self.bot.pending_channels_list:
                await self.bot.send_message("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
                return
            
            channels_to_add = self.bot.pending_channels_list.copy()
            added_count = 0
            failed_channels = []
            
            regions_config = await self._load_regions_config()
            region_info = regions_config.get(region, {})
            region_name = region_info.get('name', f'üìç {region.title()}')
            
            await self.bot.send_message(f"üìù –î–æ–±–∞–≤–ª—è–µ–º {len(channels_to_add)} –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω {region_name}...")
            
            for channel_username in channels_to_add:
                try:
                    success = await self.bot.channel_manager.add_channel_to_config(channel_username, region)
                    if success:
                        added_count += 1
                        
                        if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'channel_monitor'):
                            try:
                                success = await self.bot.monitor_bot.channel_monitor.add_single_channel_to_monitoring(channel_username)
                                if success:
                                    logger.info(f"‚úÖ @{channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ @{channel_username}: –Ω–µ—É–¥–∞—á–Ω–æ")
                                await asyncio.sleep(1)
                            except Exception as sub_e:
                                logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ @{channel_username}: {sub_e}")
                                await asyncio.sleep(0.5)
                    else:
                        failed_channels.append(channel_username)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è @{channel_username}: {e}")
                    failed_channels.append(channel_username)
            
            result_text = f"‚úÖ <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            result_text += f"üìÇ <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n"
            result_text += f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {added_count}\n"
            
            if failed_channels:
                result_text += f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:</b> {len(failed_channels)}\n"
                result_text += "üîó " + ", ".join([f"@{ch}" for ch in failed_channels[:5]])
                if len(failed_channels) > 5:
                    result_text += f" –∏ –µ—â–µ {len(failed_channels) - 5}..."
            
            keyboard = [
                [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                result_text, keyboard, use_reply_keyboard=False
            )
            
            self.bot.pending_channels_list = []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
            await self.bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    def _create_region_key(self, region_name: str) -> str:
        try:
            translit_map = {
                '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
                '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
                '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
                '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
                '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
            }
            
            region_lower = region_name.lower()
            
            region_key = ""
            for char in region_lower:
                region_key += translit_map.get(char, char)
            
            region_key = re.sub(r'[^a-zA-Z0-9_]', '_', region_key)
            region_key = re.sub(r'_+', '_', region_key).strip('_')
            
            if len(region_key) < 3:
                region_key = f"region_{region_key}"
            
            return region_key
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            return f"region_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    async def _is_region_exists(self, region_key: str) -> bool:
        try:
            regions_config = await self._load_regions_config()
            return region_key in regions_config
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            return False
    
    async def _create_region_in_config(self, region_data: Dict) -> bool:
        try:
            success_main = await self._add_region_to_main_config(region_data)
            success_channels = await self._add_region_to_channels_config(region_data)
            
            if success_main and success_channels:
                logger.info(f"‚úÖ –†–µ–≥–∏–æ–Ω {region_data['key']} —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
                await self._auto_commit_config(
                    f"Create new region: {region_data['name']}",
                    ["config/config.yaml", "config/channels_config.yaml"]
                )
                
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {e}")
            return False
    
    async def _add_region_to_main_config(self, region_data: Dict) -> bool:
        try:
            config_path = "config/config.yaml"
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f) or {}
            
            if 'regions' not in config:
                config['regions'] = {}
            
            config['regions'][region_data['key']] = {
                'name': region_data['name'],
                'emoji': region_data['emoji'],
                'description': region_data['description'],
                'keywords': [region_data['name'].lower()],
                'topic_id': None,
                'created_at': datetime.now().strftime('%Y-%m-%d')
            }
            
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, allow_unicode=True, indent=2, default_flow_style=False)
            
            logger.info(f"‚úÖ –†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ config.yaml: {region_data['key']}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –≤ config.yaml: {e}")
            return False
    
    async def _add_region_to_channels_config(self, region_data: Dict) -> bool:
        try:
            config_path = "config/channels_config.yaml"
            
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f) or {}
            else:
                config = {}
            
            if 'regions' not in config:
                config['regions'] = {}
            
            config['regions'][region_data['key']] = {
                'name': region_data['name'],
                'channels': []
            }
            
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, allow_unicode=True, indent=2, default_flow_style=False)
            
            logger.info(f"‚úÖ –†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ channels_config.yaml: {region_data['key']}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –≤ channels_config.yaml: {e}")
            return False
    
    async def _show_region_created_success(self, region_data: Dict):
        try:
            text = f"üéâ <b>–†–µ–≥–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            text += f"üåç <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {region_data['name']}\n"
            text += f"üîë <b>–ö–ª—é—á:</b> {region_data['key']}\n"
            text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {region_data['description']}\n\n"
            text += "‚úÖ –†–µ–≥–∏–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
            text += "üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª—ã –≤ —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω"
            
            keyboard = [
                [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Ä–µ–≥–∏–æ–Ω", "callback_data": f"add_to_region_{region_data['key']}"}],
                [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
            self.bot.pending_region_data = None
            self.bot.waiting_for_region_name = False
            self.bot.waiting_for_emoji = False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")
    
    async def _update_region_topic_id(self, region_key: str, topic_id: int) -> bool:
        try:
            config_path = "config/config.yaml"
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f) or {}
            
            if 'regions' not in config:
                config['regions'] = {}
            
            if region_key not in config['regions']:
                logger.error(f"‚ùå –†–µ–≥–∏–æ–Ω {region_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            config['regions'][region_key]['topic_id'] = topic_id
            
            if 'output' not in config:
                config['output'] = {}
            if 'topics' not in config['output']:
                config['output']['topics'] = {}
            
            config['output']['topics'][region_key] = topic_id
            
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, allow_unicode=True, indent=2, default_flow_style=False)
            
            logger.info(f"‚úÖ Topic ID {topic_id} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region_key}")
            
            await self._auto_commit_config(
                f"Add topic_id {topic_id} for region {region_key}",
                ["config/config.yaml"]
            )
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è topic_id: {e}")
            return False
    
    async def _load_regions_config(self) -> Dict:
        try:
            if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'config_loader'):
                config_loader = self.bot.monitor_bot.config_loader
                return config_loader.get_regions_config()
            
            config_path = "config/config.yaml"
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                return config.get('regions', {})
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
            return {}
    
    async def _auto_commit_config(self, action_description: str, files_changed: List[str]):
        try:
            try:
                subprocess.run(["git", "--version"], capture_output=True, check=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                logger.debug("üìù Git –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç")
                return True
            
            for file_path in files_changed:
                result = subprocess.run(
                    ["git", "add", file_path], 
                    capture_output=True, text=True
                )
                if result.returncode != 0:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {file_path} –≤ git")
            
            commit_message = f"Add new region: {action_description}"
            result = subprocess.run(
                ["git", "commit", "-m", commit_message],
                capture_output=True, text=True
            )
            
            if result.returncode == 0:
                logger.info(f"üìù –ê–≤—Ç–æ–∫–æ–º–º–∏—Ç: {action_description}")
            
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞: {e}")
            return False
    