from typing import Dict, List, Optional, Any
from loguru import logger


class RegionUI:
    
    def __init__(self, bot: "TelegramBot"):
        self.bot = bot
    
    async def show_emoji_selection(self, region_name: str):
        try:
            text = (
                f"üé® <b>–í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞</b>\n\n"
                f"üìç <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:"
            )
            
            keyboard = [
                [
                    {"text": "üåã", "callback_data": "emoji_üåã"},
                    {"text": "üèîÔ∏è", "callback_data": "emoji_üèîÔ∏è"},  
                    {"text": "üèùÔ∏è", "callback_data": "emoji_üèùÔ∏è"}
                ],
                [
                    {"text": "‚ùÑÔ∏è", "callback_data": "emoji_‚ùÑÔ∏è"},
                    {"text": "üåä", "callback_data": "emoji_üåä"},
                    {"text": "üå≤", "callback_data": "emoji_üå≤"}
                ],
                [
                    {"text": "üèôÔ∏è", "callback_data": "emoji_üèôÔ∏è"},
                    {"text": "üåÖ", "callback_data": "emoji_üåÖ"},
                    {"text": "üéØ", "callback_data": "emoji_üéØ"}
                ],
                [
                    {"text": "‚≠ê", "callback_data": "emoji_‚≠ê"},
                    {"text": "üíé", "callback_data": "emoji_üíé"},
                    {"text": "üî•", "callback_data": "emoji_üî•"}
                ],
                [{"text": "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —ç–º–æ–¥–∑–∏", "callback_data": "custom_emoji"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏: {e}")
    
    async def show_region_creation_confirmation(self, region_key: str, region_full_name: str, region_emoji: str, region_name: str):
        try:
            text = (
                f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞</b>\n\n"
                f"üåç <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {region_full_name}\n"
                f"üîë <b>–ö–ª—é—á:</b> {region_key}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –†–µ–≥–∏–æ–Ω {region_name}\n\n"
                "–°–æ–∑–¥–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω?"
            )
            
            keyboard = [
                [{"text": "‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å", "callback_data": f"create_region_confirmed_{region_key}"}],
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}]
            ]
            
            self.bot.pending_region_data.update({
                'name': region_full_name,
                'emoji': region_emoji,
                'description': f"–†–µ–≥–∏–æ–Ω {region_name}"
            })
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def show_region_selection(self):
        try:
            regions_config = await self._load_regions_config()
            
            if not regions_config:
                await self.bot.send_message("‚ùå –†–µ–≥–∏–æ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            text = (
                "üåè <b>–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞</b>\n\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{self.bot.pending_channel_url}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:"
            )
            
            keyboard = []
            for region_key, region_data in regions_config.items():
                emoji = region_data.get('emoji', 'üìç')
                name = region_data.get('name', region_key.title())
                
                display_name = name if name.startswith(emoji) else f"{emoji} {name}"
                
                keyboard.append([{
                    "text": display_name,
                    "callback_data": f"region_selected_{region_key}"
                }])
            
            keyboard.append([{
                "text": "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω",
                "callback_data": "create_new_region"
            }])
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def show_multiple_channels_selection(self):
        try:
            text = (
                "üìù <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ):\n\n"
                "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
                "‚Ä¢ <code>https://t.me/channel_name</code>\n"
                "‚Ä¢ <code>@channel_name</code>\n"
                "‚Ä¢ <code>channel_name</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>@news_channel1\n"
                "https://t.me/news_channel2\n"
                "news_channel3</code>"
            )
            
            keyboard = [
                [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "start"}]
            ]
            
            await self.bot.keyboard_builder.send_message_with_keyboard(
                text, keyboard, use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    async def handle_emoji_selection(self, emoji: str):
        try:
            if not self.bot.pending_region_data:
                await self.bot.send_message("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            region_key = self.bot.pending_region_data['key']
            region_name_clean = self.bot.pending_region_data['name_clean']
            region_full_name = f"{emoji} {region_name_clean}"
            
            await self.show_region_creation_confirmation(
                region_key, region_full_name, emoji, region_name_clean
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏: {e}")
    
    async def start_custom_emoji_input(self):
        try:
            text = (
                "‚úèÔ∏è <b>–í–≤–æ–¥ —Å–≤–æ–µ–≥–æ —ç–º–æ–¥–∑–∏</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞:\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "üåç üóª üèôÔ∏è üåÖ ‚≠ê üî• üíé üéØ\n\n"
                "üí° –õ—é–±–æ–π —ç–º–æ–¥–∑–∏ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä!"
            )
            
            keyboard = [[{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}]]
            
            success = await self.bot.keyboard_builder.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
            if not success:
                await self.bot.keyboard_builder.send_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
            
            self.bot.waiting_for_emoji = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —ç–º–æ–¥–∑–∏: {e}")
    
    async def handle_custom_emoji_input(self, emoji_input: str):
        try:
            emoji = emoji_input.strip()
            
            if not emoji or len(emoji) > 10:
                await self.bot.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —ç–º–æ–¥–∑–∏!\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"
                )
                return
            
            if not self.bot.pending_region_data:
                await self.bot.send_message("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            region_key = self.bot.pending_region_data['key']
            region_name_clean = self.bot.pending_region_data['name_clean']
            region_full_name = f"{emoji} {region_name_clean}"
            
            await self.show_region_creation_confirmation(
                region_key, region_full_name, emoji, region_name_clean
            )
            
            self.bot.waiting_for_emoji = False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏: {e}")
    
    async def _load_regions_config(self) -> Dict:
        try:
            if self.bot.monitor_bot and hasattr(self.bot.monitor_bot, 'config_loader'):
                config_loader = self.bot.monitor_bot.config_loader
                return config_loader.get_regions_config()
            
            import yaml
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                return config.get('regions', {})
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
            return {}
