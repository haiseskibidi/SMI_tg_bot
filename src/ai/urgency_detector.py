"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é Ollama
"""

import asyncio
import re
import json
from typing import Dict, List, Optional, Tuple
from loguru import logger
import httpx


class UrgencyDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Ollama AI"""
    
    def __init__(self):
        self.ollama_client = None
        self.model_name = "qwen2.5:7b"
        self.ollama_url = "http://localhost:11434"
        self.urgent_keywords = {
            'emergency': [
                '–ø–æ–∂–∞—Ä', '–≤–∑—Ä—ã–≤', '–∞–≤–∞—Ä–∏—è', '–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞', '—Ç–µ—Ä–∞–∫—Ç', '—Å—Ç—Ä–µ–ª—å–±–∞',
                '–∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ', '–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ', '—Ü—É–Ω–∞–º–∏', '—É—Ä–∞–≥–∞–Ω', '—à—Çorm',
                '—á–ø', '—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è', '—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ', '—Å—Ä–æ—á–Ω–æ', 'alarm',
                'breaking', 'urgent', 'emergency', 'disaster', 'crash', 'explosion',
                # –î–¢–ü –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                '–¥—Ç–ø', '–≤–ª–µ—Ç–µ–ª', '–≤–ª–µ—Ç–µ–ª–∞', '—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ', '–ª–æ–±–æ–≤–æ–µ', '—Ñ—É—Ä–∞', '–≥—Ä—É–∑–æ–≤–∏–∫',
                '–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –∞–≤—Ç–æ', '—Å–±–∏–ª –ø–µ—à–µ—Ö–æ–¥–∞', '–Ω–∞–µ–∑–¥', '—Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å'
            ],
            'deaths_critical': [
                '–ø–æ–≥–∏–±', '–ø–æ–≥–∏–±–ª–∞', '–ø–æ–≥–∏–±–ª–∏', '–ø–æ–≥–∏–±—à–∏—Ö', '—Å–º–µ—Ä—Ç—å', '—É–º–µ—Ä', '—É–º–µ—Ä–ª–∞',
                '–∂–µ—Ä—Ç–≤—ã', '–∂–µ—Ä—Ç–≤', '–ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ', '—Å–∫–æ–Ω—á–∞–ª—Å—è', '—Å–∫–æ–Ω—á–∞–ª–∞—Å—å',
                '—Ç–µ–ª–æ', '—Ç—Ä—É–ø', '–º–µ—Ä—Ç–≤—ã–π', '—É–±–∏—Ç', '—É–±–∏—Ç–∞', '—É–±–∏—Ç—ã'
            ],
            'politics_urgent': [
                '–æ—Ç—Å—Ç–∞–≤–∫–∞', '–∞—Ä–µ—Å—Ç', '–∑–∞–¥–µ—Ä–∂–∞–Ω–∏–µ', '–æ–±—ã—Å–∫', '—Å–∞–Ω–∫—Ü–∏–∏',
                '–≤–æ–π–Ω–∞', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ø—Ä–æ—Ç–µ—Å—Ç—ã',
                '–º–∏—Ç–∏–Ω–≥', '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è', '–≤—ã–±–æ—Ä—ã', '—Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º'
            ],
            'economy_urgent': [
                '–¥–µ—Ñ–æ–ª—Ç', '–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ', '–∫—Ä–∞—Ö', '–æ–±–≤–∞–ª', '–¥–µ–≤–∞–ª—å–≤–∞—Ü–∏—è',
                '–∫—Ä–∏–∑–∏—Å', '—Ä–µ—Ü–µ—Å—Å–∏—è', '–∏–Ω—Ñ–ª—è—Ü–∏—è', '—Å–∫–∞—á–æ–∫ —Ü–µ–Ω', '–ø–∞–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞'
            ],
            'crime_urgent': [
                '—É–±–∏–π—Å—Ç–≤–æ', '–ø–æ—Ö–∏—â–µ–Ω–∏–µ', '–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ', '–Ω–∞–ª–µ—Ç', '–∑–∞—Ö–≤–∞—Ç',
                '–∑–∞–ª–æ–∂–Ω–∏–∫–∏', '—Ç–µ—Ä—Ä–æ—Ä', '–≤–∑—è—Ç–∫–∞', '–∫–æ—Ä—Ä—É–ø—Ü–∏—è', '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ'
            ]
        }
        
    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama AI"""
        try:
            logger.info("ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏...")
            
            # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
            self.ollama_client = httpx.AsyncClient(timeout=60.0)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 60 —Å–µ–∫—É–Ω–¥
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama —Å–µ—Ä–≤–µ—Ä–∞
            response = await self.ollama_client.get(f"{self.ollama_url}/api/tags")
            if response.status_code != 200:
                raise Exception(f"Ollama —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
            models = response.json().get("models", [])
            model_names = [model["name"] for model in models]
            
            if self.model_name not in model_names:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {model_names}")
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {self.model_name}...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
                pull_response = await self.ollama_client.post(
                    f"{self.ollama_url}/api/pull", 
                    json={"name": self.model_name}
                )
                
                if pull_response.status_code != 200:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {self.model_name}")
                
                logger.info("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            test_response = await self._make_ollama_request("–¢–µ—Å—Ç")
            if not test_response:
                raise Exception("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
            
            logger.success(f"‚úÖ Ollama AI —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω (–º–æ–¥–µ–ª—å: {self.model_name})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
            logger.info("üîÑ –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ AI —Ñ—É–Ω–∫—Ü–∏–π")
            if self.ollama_client:
                await self.ollama_client.aclose()
            self.ollama_client = None
    
    async def _make_ollama_request(self, prompt: str) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Ollama –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        if not self.ollama_client:
            logger.warning("‚ö†Ô∏è Ollama –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
            
        try:
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Ollama: {prompt[:50]}...")
            
            response = await self.ollama_client.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,
                        "top_p": 0.9,
                        "num_predict": 100
                    }
                }
            )
            
            logger.debug(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Ollama: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                ollama_response = result.get("response", "").strip()
                logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç Ollama: {ollama_response}")
                return ollama_response
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Ollama –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                logger.warning(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—à–∏–±–∫–∏: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}")
            import traceback
            logger.error(f"üìã –¢—Ä–µ–π—Å: {traceback.format_exc()}")
            return None
    
    def _extract_keywords(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        found_keywords = []
        
        for category, keywords in self.urgent_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    found_keywords.append(f"{category}:{keyword}")
                    
        return found_keywords
    
    def _calculate_keyword_urgency(self, text: str) -> Tuple[float, List[str]]:
        """–ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        keywords = self._extract_keywords(text)
        
        if not keywords:
            return 0.0, []
            
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        weights = {
            'emergency': 1.0,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
            'crime_urgent': 0.8,   # –í—ã—Å–æ–∫–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
            'politics_urgent': 0.6, # –°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
            'economy_urgent': 0.4   # –ù–∏–∑–∫–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
        }
        
        total_score = 0.0
        for keyword in keywords:
            category = keyword.split(':')[0]
            total_score += weights.get(category, 0.2)
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—á–µ—Ç (–º–∞–∫—Å–∏–º—É–º 1.0)
        urgency_score = min(total_score / 2, 1.0)
        
        return urgency_score, keywords
    
    async def _ai_classify_urgency(self, text: str) -> Dict:
        """AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é Ollama"""
        if not self.ollama_client:
            return {'scores': [], 'ai_available': False}
            
        try:
            prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –°–ú–ò. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:

–ò–ì–ù–û–†–ò–†–û–í–ê–¢–¨ - –µ—Å–ª–∏ —ç—Ç–æ –†–ï–ö–õ–ê–ú–ê –∏–ª–∏ –°–ü–ê–ú:
‚Ä¢ –ü—Ä—è–º—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫—É–ø–∏—Ç—å/–∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å–ª—É–≥, —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (@username, —Ç–µ–ª–µ—Ñ–æ–Ω—ã)
‚Ä¢ –°–ª–æ–≤–∞: "—Ä–µ–∫–ª–∞–º–∞", "–ø–∏—à–∏—Ç–µ", "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å", "–∑–∞–∫–∞–∑–∞—Ç—å"
‚Ä¢ –ü—Ä–∏–∑—ã–≤—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã

–°–†–û–ß–ù–û - –µ—Å–ª–∏ –µ—Å—Ç—å –ñ–ï–†–¢–í–´ –∏–ª–∏ –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–ê–Ø –£–ì–†–û–ó–ê:
‚Ä¢ –ü–æ–≥–∏–±–ª–∏/—É–º–µ—Ä–ª–∏ –ª—é–¥–∏ (–ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)  
‚Ä¢ –ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–µ –≤ –±–æ–ª—å–Ω–∏—Ü–µ
‚Ä¢ –ü–æ–∂–∞—Ä—ã, –≤–∑—Ä—ã–≤—ã, –æ–±—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –°—Ç—Ä–µ–ª—å–±–∞, —Ç–µ—Ä–∞–∫—Ç—ã, –∑–∞—Ö–≤–∞—Ç—ã
‚Ä¢ –°—Ç–∏—Ö–∏–π–Ω—ã–µ –±–µ–¥—Å—Ç–≤–∏—è
‚Ä¢ –ö—Ä—É–ø–Ω—ã–µ –∞–≤–∞—Ä–∏–∏/–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã

–í–ê–ñ–ù–û - —Å–æ–±—ã—Ç–∏—è –ë–ï–ó –∂–µ—Ä—Ç–≤, –Ω–æ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–Ω–∞—á–∏–º—ã–µ:
‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, –æ—Ç—Å—Ç–∞–≤–∫–∏
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –ê—Ä–µ—Å—Ç—ã —á–∏–Ω–æ–≤–Ω–∏–∫–æ–≤/–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—Ü
‚Ä¢ –ó–∞–±–∞—Å—Ç–æ–≤–∫–∏, –ø—Ä–æ—Ç–µ—Å—Ç—ã

–û–ë–´–ß–ù–û - —Ä—É—Ç–∏–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:
‚Ä¢ –°–ø–æ—Ä—Ç, –∫—É–ª—å—Ç—É—Ä–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ –ü–ª–∞–Ω—ã, –∞–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ—Ç—á–µ—Ç—ã

–ù–æ–≤–æ—Å—Ç—å: {text[:500]}

–û—Ç–≤–µ—Ç:"""

            response = await self._make_ollama_request(prompt)
            if not response:
                return {'scores': [], 'ai_available': False}
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            response_lower = response.lower().strip()
            if "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å" in response_lower or "–∏–≥–Ω–æ—Ä" in response_lower:
                urgency_level = "ignore"
                score = 0.0
            elif "—Å—Ä–æ—á–Ω–æ" in response_lower:
                urgency_level = "urgent"
                score = 0.9
            elif "–≤–∞–∂–Ω–æ" in response_lower:
                urgency_level = "important" 
                score = 0.6
            else:
                urgency_level = "normal"
                score = 0.2
            
            return {
                'labels': [urgency_level],
                'scores': [score],
                'ai_available': True,
                'raw_response': response
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            return {'scores': [], 'ai_available': False}
    
    async def _analyze_sentiment(self, text: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é Ollama"""
        if not self.ollama_client:
            return {'sentiment': 'neutral', 'confidence': 0.5, 'ai_available': False}
            
        try:
            prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:

–ù–ï–ì–ê–¢–ò–í–ù–ê–Ø - –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ –ø–ª–æ—Ö–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –ø—Ä–æ–±–ª–µ–º–∞—Ö, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
–ü–û–ó–ò–¢–ò–í–ù–ê–Ø - –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, —É—Å–ø–µ—Ö–∞—Ö  
–ù–ï–ô–¢–†–ê–õ–¨–ù–ê–Ø - –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π

–¢–µ–∫—Å—Ç: {text[:300]}

–û—Ç–≤–µ—Ç:"""

            response = await self._make_ollama_request(prompt)
            if not response:
                return {'sentiment': 'neutral', 'confidence': 0.5, 'ai_available': False}
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            response_lower = response.lower().strip()
            if "–Ω–µ–≥–∞—Ç–∏–≤–Ω" in response_lower:
                sentiment = "negative"
                confidence = 0.8
            elif "–ø–æ–∑–∏—Ç–∏–≤–Ω" in response_lower:
                sentiment = "positive"
                confidence = 0.8
            else:
                sentiment = "neutral"
                confidence = 0.6
            
            return {
                'sentiment': sentiment,
                'confidence': confidence,
                'ai_available': True,
                'raw_response': response
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return {'sentiment': 'neutral', 'confidence': 0.5, 'ai_available': False}
    
    def _detect_time_markers(self, text: str) -> float:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        urgent_time_patterns = [
            r'\b(—Ç–æ–ª—å–∫–æ —á—Ç–æ|—Å–µ–π—á–∞—Å|–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å|–≤ —ç—Ç—É –º–∏–Ω—É—Ç—É)\b',
            r'\b(breaking|—Å—Ä–æ—á–Ω–æ|—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ|–≤–Ω–∏–º–∞–Ω–∏–µ)\b',
            r'\b(just now|right now|urgent|breaking news)\b',
            r'\b\d{1,2}:\d{2}\b',  # –í—Ä–µ–º—è –≤–∏–¥–∞ 15:30
        ]
        
        score = 0.0
        for pattern in urgent_time_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                score += 0.2
                
        return min(score, 1.0)
    
    async def detect_urgency(self, news_text: str, source_channel: str = "") -> Dict:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏
        
        Returns:
            Dict —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏:
            {
                'urgency_level': 'urgent'|'important'|'normal',
                'urgency_score': float (0.0-1.0),
                'emoji': str,
                'keywords': List[str],
                'ai_classification': Dict,
                'sentiment': Dict,
                'reasoning': str
            }
        """
        try:
            # 1. –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            keyword_score, keywords = self._calculate_keyword_urgency(news_text)
            
            # 2. AI –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            ai_result = await self._ai_classify_urgency(news_text)
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            sentiment = await self._analyze_sentiment(news_text)
            
            # 4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            time_score = self._detect_time_markers(news_text)
            
            # 5. AI-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            ai_level = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if ai_result['ai_available'] and ai_result['labels']:
                # AI - –≥–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è!
                ai_level = ai_result['labels'][0]
                ai_score = ai_result['scores'][0]
                
                # –ë–∞–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ AI —Ä–µ—à–µ–Ω–∏–∏
                if ai_level == 'ignore':
                    # AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    final_score = 0.0
                    urgency_level = 'ignore'
                    emoji = 'üö´'
                elif ai_level == 'urgent':
                    final_score = max(0.8, ai_score)  # –ú–∏–Ω–∏–º—É–º 0.8 –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ
                    urgency_level = 'urgent'
                    emoji = 'üî¥'
                elif ai_level == 'important':
                    final_score = max(0.5, min(ai_score, 0.7))  # 0.5-0.7 –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ
                    urgency_level = 'important'
                    emoji = 'üü°'
                else:
                    final_score = min(ai_score, 0.4)  # –ú–∞–∫—Å–∏–º—É–º 0.4 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ
                    urgency_level = 'normal'
                    emoji = '‚ö™'
                
                # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç AI —Ä–µ—à–µ–Ω–∏–µ
                if keywords:
                    keyword_bonus = min(keyword_score * 0.2, 0.15)  # –ú–∞–∫—Å–∏–º—É–º +15%
                    final_score = min(final_score + keyword_bonus, 1.0)
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —É—Å–∏–ª–∏–≤–∞—é—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å
                if time_score > 0 and urgency_level in ['urgent', 'important']:
                    final_score = min(final_score + time_score * 0.1, 1.0)
                
            else:
                # Fallback –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                final_score = keyword_score + time_score * 0.3
                final_score = min(final_score, 1.0)
                
                if final_score >= 0.7:
                    urgency_level = 'urgent'
                    emoji = 'üî¥'
                elif final_score >= 0.4:
                    urgency_level = 'important' 
                    emoji = 'üü°'
                else:
                    urgency_level = 'normal'
                    emoji = '‚ö™'
            
            # 7. –°–æ–∑–¥–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è  
            reasoning_parts = []
            if ai_level:
                ai_response = ai_result.get('raw_response', 'N/A')[:30]
                reasoning_parts.append(f"AI: {ai_level} ({ai_response}...)")
            elif ai_result['ai_available']:
                reasoning_parts.append("AI: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            if keywords:
                reasoning_parts.append(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {len(keywords)}")
            if time_score > 0:
                reasoning_parts.append("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã")
                
            reasoning = f"–§–∞–∫—Ç–æ—Ä—ã: {', '.join(reasoning_parts) if reasoning_parts else '–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞'}. –ò—Ç–æ–≥: {final_score:.2f}"
            
            result = {
                'urgency_level': urgency_level,
                'urgency_score': round(final_score, 3),
                'emoji': emoji,
                'keywords': keywords,
                'ai_classification': ai_result,
                'sentiment': sentiment,
                'reasoning': reasoning,
                'time_markers': time_score > 0
            }
            
            logger.debug(f"üéØ –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {urgency_level} ({final_score:.2f}) - {reasoning}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {e}")
            # Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'urgency_level': 'normal',
                'urgency_score': 0.0,
                'emoji': '‚ö™',
                'keywords': [],
                'ai_classification': {'ai_available': False},
                'sentiment': {'ai_available': False},
                'reasoning': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}',
                'time_markers': False
            }
    
    def format_urgent_message(self, original_text: str, urgency_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ä–∫–µ—Ä–æ–º —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        emoji = urgency_data['emoji']
        level = urgency_data['urgency_level']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if level == 'urgent':
            prefix = f"{emoji} **–°–†–û–ß–ù–û**"
        elif level == 'important':
            prefix = f"{emoji} **–í–ê–ñ–ù–û**"
        else:
            prefix = f"{emoji}"
            
        return f"{prefix}\n\n{original_text}"
    
    async def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        return {
            'ai_models_loaded': self.sentiment_analyzer is not None,
            'total_keywords': sum(len(keywords) for keywords in self.urgent_keywords.values()),
            'categories': list(self.urgent_keywords.keys())
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
urgency_detector = UrgencyDetector()


async def initialize_urgency_detector():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    await urgency_detector.initialize()


async def analyze_news_urgency(text: str, source: str = "") -> Dict:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏"""
    return await urgency_detector.detect_urgency(text, source)
