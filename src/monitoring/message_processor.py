import asyncio
import hashlib
import pytz
from datetime import datetime
from typing import Dict, Any, Set, TYPE_CHECKING
from loguru import logger

if TYPE_CHECKING:
    from ..database import DatabaseManager

try:
    from ..ai.urgency_detector import analyze_news_urgency
    AI_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è AI –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞")
    AI_AVAILABLE = False


class MessageProcessor:
    def __init__(self, database: "DatabaseManager", app_instance):
        self.database = database
        self.app_instance = app_instance
        self.processed_media_groups: Set[int] = set()

    async def handle_new_message(self, event):
        try:
            if not self.app_instance.monitoring_active:
                logger.debug("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            
            logger.info("üî• –°–†–ê–ë–û–¢–ê–õ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø!")
            message = event.message
            
            chat = await event.get_chat()
            channel_username = getattr(chat, 'username', None)
            if not channel_username:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ username –∫–∞–Ω–∞–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{channel_username}: {message.text[:100] if message.text else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")
            
            has_text = bool(getattr(message, "text", None))
            has_media = bool(getattr(message, "media", None))
            
            if has_text and self._is_spam_message(message.text):
                logger.info(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{channel_username}")
                return
            
            if not await self._process_media_group(message, has_media):
                return
            
            if not await self._validate_message_time(message):
                return
                
            message_data = self._create_message_data(message, channel_username)
            
            analysis_text = await self._get_text_for_analysis(message, channel_username)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–∫—Å—Ç –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ, –æ–±–Ω–æ–≤–ª—è–µ–º message_data
            if analysis_text and not message_data.get('text'):
                message_data['text'] = analysis_text
                logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ message_data –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {analysis_text[:100]}...")
            
            final_text = analysis_text or message.text
            
            message_data = await self._check_alerts(message_data, final_text)
            
            # ü§ñ –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI
            message_data = await self._analyze_urgency(message_data, final_text)
            
            logger.info(f"‚ö° –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ @{channel_username} - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞!")
            
            await self._save_to_database(message_data)
            
            await self._send_message(message_data, has_text, has_media)
            
            await self._update_last_check_time(channel_username)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")

    async def _process_media_group(self, message, has_media: bool) -> bool:
        if has_media and hasattr(message, 'grouped_id') and message.grouped_id:
            grouped_id = message.grouped_id
            logger.info(f"üì∏ –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã: {grouped_id}")
            
            if grouped_id in self.processed_media_groups:
                logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ {grouped_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            self.processed_media_groups.add(grouped_id)
            logger.info(f"üîÑ –ü–æ–º–µ—á–∞–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É {grouped_id} –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é")
            
            if len(self.processed_media_groups) > 1000:
                self.processed_media_groups = set(list(self.processed_media_groups)[-500:])
                logger.info("üßπ –û—á–∏—â–µ–Ω –∫—ç—à –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)")
        
        return True

    async def _get_text_for_analysis(self, message, channel_username: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç –∏–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø"""
        try:
            # –ï—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if message.text and message.text.strip():
                return message.text.strip()
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞, –∏—â–µ–º —Ç–µ–∫—Å—Ç –≤ –≥—Ä—É–ø–ø–µ
            if hasattr(message, 'grouped_id') and message.grouped_id:
                logger.info(f"üîç –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ {message.grouped_id} –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
                
                entity = await self.app_instance.telegram_monitor.get_channel_entity(channel_username)
                if not entity:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è {channel_username}")
                    return ""
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                all_messages = await self.app_instance.telegram_monitor.client.get_messages(entity, limit=20)
                group_messages = [msg for msg in all_messages if hasattr(msg, 'grouped_id') and msg.grouped_id == message.grouped_id]
                
                # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ
                for msg in group_messages:
                    if msg.text and msg.text.strip():
                        logger.info(f"üìù –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ (–¥–ª–∏–Ω–∞ {len(msg.text)}): {msg.text[:100]}...")
                        return msg.text.strip()
                
                logger.debug("üìù –¢–µ–∫—Å—Ç –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return ""

    async def _validate_message_time(self, message) -> bool:
        msg_time = message.date
        start_time = self.app_instance.telegram_monitor.start_time
        
        vladivostok_tz = pytz.timezone('Asia/Vladivostok')
        
        if msg_time.tzinfo is None:
            msg_time = pytz.utc.localize(msg_time).astimezone(vladivostok_tz)
        else:
            msg_time = msg_time.astimezone(vladivostok_tz)
        
        logger.info(f"‚è∞ –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_time.strftime('%d.%m.%Y %H:%M:%S %Z')}, –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {start_time.strftime('%d.%m.%Y %H:%M:%S %Z')}")
        
        if msg_time < start_time:
            logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ (–¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        return True

    def _create_message_data(self, message, channel_username: str) -> Dict[str, Any]:
        vladivostok_tz = pytz.timezone('Asia/Vladivostok')
        msg_time = message.date
        
        if msg_time.tzinfo is None:
            msg_time = pytz.utc.localize(msg_time).astimezone(vladivostok_tz)
        else:
            msg_time = msg_time.astimezone(vladivostok_tz)
        
        text_for_hash = message.text or ''
        content_hash = hashlib.md5(
            f"{text_for_hash[:1000]}{message.date}".encode()
        ).hexdigest()
        
        return {
            'id': f"{channel_username}_{message.id}",
            'text': message.text or '',
            'date': msg_time,
            'channel_username': channel_username,
            'message_id': message.id,
            'url': f"https://t.me/{channel_username}/{message.id}",
            'content_hash': content_hash,
            'views': getattr(message, 'views', 0),
            'forwards': getattr(message, 'forwards', 0),
            'reactions_count': 0
        }

    async def _check_alerts(self, message_data: Dict[str, Any], text: str) -> Dict[str, Any]:
        is_alert, alert_category, alert_emoji, is_priority, matched_words = self.app_instance.check_alert_keywords(text)
        
        if is_alert:
            logger.warning(f"üö® –ê–õ–ï–†–¢ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ @{message_data['channel_username']}! –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {alert_category}, —Å–ª–æ–≤–∞: {matched_words}")
            
            alert_text = self.app_instance.format_alert_message(
                text, 
                message_data['channel_username'], 
                alert_emoji, 
                alert_category, 
                matched_words
            )
            
            message_data['text'] = alert_text
            message_data['is_alert'] = True
            message_data['alert_category'] = alert_category
            message_data['alert_priority'] = is_priority
        else:
            message_data['is_alert'] = False
        
        return message_data

    async def _analyze_urgency(self, message_data: Dict[str, Any], text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            if not text or not text.strip():
                logger.info(f"ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ - –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç @{message_data.get('channel_username', 'unknown')}")
                # –î–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—ã–π –∫—Ä—É–≥
                if not message_data.get('text'):
                    message_data['text'] = f"‚ö™ {message_data.get('text', '')}"
                return message_data
            
            if not AI_AVAILABLE:
                logger.debug("ü§ñ AI –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏")
                return message_data
            
            logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç @{message_data['channel_username']} (–¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)})")
            
            # –í—ã–∑—ã–≤–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            urgency_result = await analyze_news_urgency(
                text=text,
                source=message_data['channel_username']
            )
            
            logger.info(f"üéØ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —É—Ä–æ–≤–µ–Ω—å={urgency_result['urgency_level']}, —Å–∫–æ—Ä={urgency_result['urgency_score']:.2f}, —ç–º–æ–¥–∑–∏={urgency_result['emoji']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ª–∏ AI —ç—Ç–æ –∫–∞–∫ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º—É
            if urgency_result['urgency_level'] == 'ignore':
                logger.info(f"üö´ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message_data['channel_username']} - –ø–æ–º–µ—á–∞–µ–º —ç–º–æ–¥–∑–∏")
                # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ üö´ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                message_data['text'] = f"üö´ {text}"
                message_data['urgency_level'] = 'ignore'
                message_data['urgency_score'] = 0.0
                message_data['urgency_emoji'] = 'üö´'
                message_data['ai_analyzed'] = True
                
                logger.info(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞: üö´ {text[:50]}...")
                return message_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ message_data
            message_data['urgency_level'] = urgency_result['urgency_level']
            message_data['urgency_score'] = urgency_result['urgency_score'] 
            message_data['urgency_emoji'] = urgency_result['emoji']
            message_data['urgency_keywords'] = urgency_result['keywords']
            message_data['urgency_reasoning'] = urgency_result['reasoning']
            message_data['ai_analyzed'] = urgency_result['ai_classification']['ai_available']
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            urgency_level = urgency_result['urgency_level']
            emoji = urgency_result['emoji']
            
            if urgency_level == 'urgent':
                # –î–æ–±–∞–≤–ª—è–µ–º —è—Ä–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                message_data['text'] = f"{emoji} **üö® –°–†–û–ß–ù–û üö®**\n\n{text}"
                logger.warning(f"üî¥ –°–†–û–ß–ù–ê–Ø –Ω–æ–≤–æ—Å—Ç—å –æ—Ç @{message_data['channel_username']}: {urgency_result['urgency_score']:.2f}")
                
            elif urgency_level == 'important':
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                message_data['text'] = f"{emoji} **–í–ê–ñ–ù–û**\n\n{text}"
                logger.info(f"üü° –í–ê–ñ–ù–ê–Ø –Ω–æ–≤–æ—Å—Ç—å –æ—Ç @{message_data['channel_username']}: {urgency_result['urgency_score']:.2f}")
                
            else:
                # –û–±—ã—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
                message_data['text'] = f"{emoji} {text}"
                logger.debug(f"‚ö™ –û–±—ã—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç @{message_data['channel_username']}: {urgency_result['urgency_score']:.2f}")
            
            logger.info(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ AI –∞–Ω–∞–ª–∏–∑–∞: {message_data['text'][:100]}...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
            if urgency_result['keywords']:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {urgency_result['keywords'][:3]}...")
            
            if urgency_result['time_markers']:
                logger.info("‚è∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏")
            
            return message_data
            
        except Exception as e:
            import traceback
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {e}")
            logger.error(f"üìã –¢—Ä–µ–π—Å –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–µ–ª—ã–º –∫—Ä—É–∂–∫–æ–º
            message_data['text'] = f"‚ö™ {text}"
            return message_data

    async def _save_to_database(self, message_data: Dict[str, Any]):
        try:
            await self.database.save_message(message_data)
            logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

    async def _send_message(self, message_data: Dict[str, Any], has_text: bool, has_media: bool):
        if has_media:
            logger.info(f"üìé –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª—ã –æ—Ç @{message_data['channel_username']}")
            media_sent = await self.app_instance.download_and_send_media(message_data)
            if not media_sent:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                await self.app_instance.send_message_to_target(message_data, is_media=True)
        elif not has_text:
            logger.info(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç @{message_data['channel_username']}")
            forwarded = await self.app_instance.forward_original_message(message_data)
            if not forwarded:
                await self.app_instance.send_message_to_target(message_data, is_media=True)
        else:
            await self.app_instance.send_message_to_target(message_data, is_media=False)

    async def _update_last_check_time(self, channel_username: str):
        vladivostok_tz = pytz.timezone('Asia/Vladivostok')
        current_time_vlk = datetime.now(vladivostok_tz)
        await self.database.update_last_check_time(channel_username, current_time_vlk)

    def clear_media_groups_cache(self):
        self.processed_media_groups.clear()
        logger.info("üßπ –ö—ç—à –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø –æ—á–∏—â–µ–Ω")

    def _is_spam_message(self, text: str) -> bool:        
        text_lower = text.lower()
        
        spam_keywords = [
            '—Ä–µ–∫–ª–∞–º–∞', '–†–µ–∫–ª–∞–º–∞'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º-—Å–ª–æ–≤
        spam_words_found = [word for word in spam_keywords if word in text_lower]
        
        if spam_words_found:
            logger.debug(f"üö´ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–ª–æ–≤–∞: {spam_words_found}")
            return True
            
        return False
