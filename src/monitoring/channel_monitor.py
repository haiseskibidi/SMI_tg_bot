import asyncio
import re
import yaml
from typing import List, Dict, Any, Optional, Tuple, TYPE_CHECKING
from loguru import logger

if TYPE_CHECKING:
    from ..telegram_client import TelegramMonitor
    from .message_processor import MessageProcessor
    from .subscription_cache import SubscriptionCacheManager


class ChannelMonitor:
    def __init__(self, telegram_monitor: "TelegramMonitor", 
                 subscription_cache: "SubscriptionCacheManager",
                 message_processor: "MessageProcessor",
                 config_loader=None):
        self.telegram_monitor = telegram_monitor
        self.subscription_cache = subscription_cache
        self.message_processor = message_processor
        self.channels_config_path = "config/channels_config.yaml"
        
        
        if config_loader:
            try:
                timeouts = config_loader.get_monitoring_timeouts()
                if timeouts and isinstance(timeouts, dict):
                    self.batch_size = timeouts.get('batch_size', 6)
                    self.delay_cached_channel = timeouts.get('delay_cached_channel', 1)
                    self.delay_already_joined = timeouts.get('delay_already_joined', 2)
                    self.delay_verification = timeouts.get('delay_verification', 3)
                    self.delay_after_subscribe = timeouts.get('delay_after_subscribe', 5)
                    self.delay_between_batches = timeouts.get('delay_between_batches', 8)
                    self.delay_retry_wait = timeouts.get('delay_retry_wait', 300)
                    self.delay_retry_subscribe = timeouts.get('delay_retry_subscribe', 5)
                    self.delay_between_retries = timeouts.get('delay_between_retries', 8)
                    
                    self.fast_start_mode = timeouts.get('fast_start_mode', True)
                    self.skip_new_on_startup = timeouts.get('skip_new_on_startup', False)
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    self._set_default_timeouts()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–π–º–∞—É—Ç–æ–≤: {e}")
                self._set_default_timeouts()
        else:
            
            self._set_default_timeouts()

    def _set_default_timeouts(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.batch_size = 6
        self.delay_cached_channel = 1
        self.delay_already_joined = 2
        self.delay_verification = 3
        self.delay_after_subscribe = 5
        self.delay_between_batches = 8
        self.delay_retry_wait = 300
        self.delay_retry_subscribe = 5
        self.delay_between_retries = 8
        self.fast_start_mode = True
        self.skip_new_on_startup = False

    async def setup_realtime_handlers(self):
        from telethon import events
        
        logger.info("‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
        
        if not self.telegram_monitor or not self.telegram_monitor.client:
            logger.error("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        all_channels = await self._load_channels_config()
        
        if not all_channels:
            logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π config/channels_config.yaml –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")
            return
        
        monitored_channels = await self._subscribe_to_channels(all_channels)
        
        if monitored_channels:
            self.telegram_monitor.client.add_event_handler(
                self.message_processor.handle_new_message,
                events.NewMessage(chats=monitored_channels)
            )
            logger.info(f"‚ö° –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(monitored_channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")
        
        await self._test_telethon_client()
        
        rate_limited_channels = getattr(self, '_rate_limited_channels', [])
        if rate_limited_channels:
            await self._retry_rate_limited_subscriptions(rate_limited_channels)

    async def _load_channels_config(self) -> List[Dict[str, Any]]:
        try:
            with open(self.channels_config_path, 'r', encoding='utf-8') as f:
                channels_data = yaml.safe_load(f) or {}
        except (FileNotFoundError, yaml.YAMLError) as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º –∫–∞–Ω–∞–ª–æ–≤ {self.channels_config_path}: {e}")
            return []
        
        all_channels = []
        
        if 'regions' in channels_data:
            for region_key, region_data in channels_data['regions'].items():
                if not region_data or not isinstance(region_data, dict):
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '{region_key}' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                    
                region_channels = region_data.get('channels', [])
                for channel in region_channels:
                    if not channel or not isinstance(channel, dict):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ '{region_key}' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                        
                    channel_with_region = channel.copy()
                    channel_with_region['region'] = region_key
                    all_channels.append(channel_with_region)
        elif channels_data and 'channels' in channels_data and channels_data['channels']:
            channels_list = channels_data['channels']
            if isinstance(channels_list, list):
                all_channels = channels_list
            else:
                logger.warning("‚ö†Ô∏è –°–µ–∫—Ü–∏—è 'channels' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        elif channels_data:
            if 'vip_channels' in channels_data and channels_data['vip_channels']:
                vip_channels = channels_data['vip_channels']
                if isinstance(vip_channels, list):
                    all_channels.extend(vip_channels)
                else:
                    logger.warning("‚ö†Ô∏è –°–µ–∫—Ü–∏—è 'vip_channels' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    
            if 'regular_channels' in channels_data and channels_data['regular_channels']:
                regular_channels = channels_data['regular_channels']
                if isinstance(regular_channels, list):
                    all_channels.extend(regular_channels)
                else:
                    logger.warning("‚ö†Ô∏è –°–µ–∫—Ü–∏—è 'regular_channels' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        return all_channels

    async def _fast_load_cached_channels(self, all_channels: List[Dict[str, Any]]) -> Tuple[List, List[Dict[str, Any]]]:
        """üöÄ –ë–´–°–¢–†–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (–±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤)"""
        logger.info("üöÄ –ë–´–°–¢–†–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã...")
        
        cached_channels = []
        new_channels = []
        failed_entities = []
        
        for channel_config in all_channels:
            username = channel_config['username']
            
            
            if self.subscription_cache.is_channel_cached_as_subscribed(username):
                cached_channels.append(channel_config)
            else:
                new_channels.append(channel_config)
        
        logger.info(f"üíæ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {len(cached_channels)} –∫–∞–Ω–∞–ª–æ–≤")
        logger.info(f"üÜï –ù–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(new_channels)} (—Ç—Ä–µ–±—É—é—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)")
        
        if new_channels and len(new_channels) <= 10:
            new_usernames = [ch['username'] for ch in new_channels]
            logger.info(f"üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {new_usernames}")
        elif len(new_channels) > 10:
            new_usernames = [ch['username'] for ch in new_channels[:5]]
            logger.info(f"üìã –ü–µ—Ä–≤—ã–µ 5 –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {new_usernames}... –∏ –µ—â–µ {len(new_channels)-5}")
        
        
        monitored_channels = []
        for i, channel_config in enumerate(cached_channels):
            try:
                username = channel_config['username']
                logger.debug(f"üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {username} ({i+1}/{len(cached_channels)})")
                
                entity = await self.telegram_monitor.get_channel_entity(username)
                if entity:
                    monitored_channels.append(entity)
                    
                    if i % 10 == 0 and i > 0:  
                        await asyncio.sleep(0.5)
                else:
                    failed_entities.append(channel_config)
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {username}")
                    
            except Exception as e:
                failed_entities.append(channel_config)
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {username}: {e}")
        
        
        new_channels.extend(failed_entities)
        
        logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(monitored_channels)} –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        if failed_entities:
            logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {len(failed_entities)} –∫–∞–Ω–∞–ª–æ–≤ (–±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –º–µ–¥–ª–µ–Ω–Ω–æ)")
        
        return monitored_channels, new_channels

    async def _slow_process_new_channels(self, new_channels: List[Dict[str, Any]]) -> Tuple[List, List[Dict[str, Any]]]:
        """üêå –ú–ï–î–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        from telethon.tl.functions.channels import JoinChannelRequest
        
        if not new_channels:
            logger.info("‚úÖ –ù–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return [], []
        
        logger.info(f"üêå –ú–ï–î–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: {len(new_channels)} –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        logger.info("‚ö†Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è, –Ω–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        
        monitored_channels = []
        subscribed_count = 0
        failed_count = 0
        rate_limited_count = 0
        rate_limited_channels = []
        
        processed_count = 0
        
        for i in range(0, len(new_channels), self.batch_size):
            batch = new_channels[i:i + self.batch_size]
            logger.info(f"üîÑ –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {i//self.batch_size + 1}/{(len(new_channels) + self.batch_size - 1)//self.batch_size} ({len(batch)} –∫–∞–Ω–∞–ª–æ–≤)")
            
            for channel_config in batch:
                try:
                    processed_count += 1
                    username = channel_config['username']
                    logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ entity –¥–ª—è –ù–û–í–û–ì–û –∫–∞–Ω–∞–ª–∞ {username} ({processed_count}/{len(new_channels)})")
                    
                    entity = await self.telegram_monitor.get_channel_entity(username)
                    if not entity:
                        failed_count += 1
                        continue
                    
                    try:
                        already = await self.telegram_monitor.is_already_joined(entity)
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {username}: {'–î–ê' if already else '–ù–ï–¢'}")
                        if already:
                            self.subscription_cache.add_channel_to_cache(username)
                            monitored_channels.append(entity)
                            logger.info(f"üì° –î–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {username}")
                            await asyncio.sleep(self.delay_already_joined)
                            continue
                    except Exception as check_error:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {username}: {check_error}")
                        already = False

                    try:
                        logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: @{username}")
                        await self.telegram_monitor.client(JoinChannelRequest(entity))
                        
                        verification_attempts = 3
                        for attempt in range(verification_attempts):
                            await asyncio.sleep(self.delay_verification)
                            try:
                                now_joined = await self.telegram_monitor.is_already_joined(entity)
                                if now_joined:
                                    logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @{username}")
                                    subscribed_count += 1
                                    self.subscription_cache.add_channel_to_cache(username)
                                    monitored_channels.append(entity)
                                    break
                            except Exception as verify_error:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {username} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {verify_error}")
                        
                        await asyncio.sleep(self.delay_after_subscribe)
                        
                    except Exception as sub_error:
                        error_msg = str(sub_error).lower()
                        if any(keyword in error_msg for keyword in ["wait", "flood", "timeout", "seconds"]):
                            wait_time = self._extract_wait_time(str(sub_error))
                            if wait_time and wait_time > 3600:
                                logger.error(f"üö´ –î–õ–ò–¢–ï–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –¥–ª—è @{username}: {wait_time//3600:.1f} —á–∞—Å–æ–≤ ({wait_time} —Å–µ–∫)")
                                logger.error(f"üí° –ü—Ä–∏—á–∏–Ω—ã: —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª Telegram")
                                logger.error(f"üîß –†–µ—à–µ–Ω–∏–µ: –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç")
                            else:
                                logger.warning(f"‚è≥ Rate limit –¥–ª—è @{username}: {sub_error}")
                            
                            rate_limited_count += 1
                            rate_limited_channels.append(channel_config)
                        elif any(keyword in error_msg for keyword in ["already", "—É—á–∞—Å—Ç–Ω–∏–∫", "member"]):
                            logger.info(f"‚úÖ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{username}")
                            self.subscription_cache.add_channel_to_cache(username)
                            monitored_channels.append(entity)
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @{username}: {sub_error}")
                            failed_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_config.get('username', 'unknown')}: {e}")
                    failed_count += 1
            
            
            await asyncio.sleep(self.delay_between_batches)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è: {subscribed_count}")
        logger.info(f"üíæ –£–∂–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω: {len(monitored_channels) - subscribed_count}")
        logger.info(f"‚è≥ Rate limit: {rate_limited_count}")
        logger.info(f"‚ùå –û—à–∏–±–∫–∏: {failed_count}")
        
        return monitored_channels, rate_limited_channels

    async def _subscribe_to_channels(self, all_channels: List[Dict[str, Any]]) -> List:
        """üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞: –±—ã—Å—Ç—Ä–æ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö + –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö"""
        if self.fast_start_mode:
            logger.info("üöÄ –†–ï–ñ–ò–ú –ë–´–°–¢–†–û–ì–û –°–¢–ê–†–¢–ê –≤–∫–ª—é—á–µ–Ω!")
            logger.info("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")
        else:
            logger.info("üêå –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –≤—Å–µ –∫–∞–Ω–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ")
            
        logger.info(f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(all_channels)}")
        
        if not self.fast_start_mode:
            
            return await self._slow_process_new_channels(all_channels)[0]
        
        
        current_channels = {ch['username'] for ch in all_channels}
        self.subscription_cache.sync_cache_with_config(current_channels)
        
        
        fast_channels, new_channels = await self._fast_load_cached_channels(all_channels)
        
        
        if self.skip_new_on_startup and new_channels:
            logger.warning(f"‚è≠Ô∏è –ü–†–û–ü–£–°–ö –ù–û–í–´–• –ö–ê–ù–ê–õ–û–í: {len(new_channels)} –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
            logger.warning("üí° –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /force_subscribe –≤ –±–æ—Ç–µ")
            slow_channels = []
            rate_limited_channels = []
        else:
            
            slow_channels, rate_limited_channels = await self._slow_process_new_channels(new_channels)
        
        
        all_monitored = fast_channels + slow_channels
        self._rate_limited_channels = rate_limited_channels
        
        logger.info(f"üéâ –ò–¢–û–ì–û –ó–ê–ì–†–£–ñ–ï–ù–û: {len(all_monitored)} –∫–∞–Ω–∞–ª–æ–≤")
        logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–æ (–∫–µ—à): {len(fast_channels)}")
        logger.info(f"üêå –ú–µ–¥–ª–µ–Ω–Ω–æ (–Ω–æ–≤—ã–µ): {len(slow_channels)}")
        if self.skip_new_on_startup and new_channels:
            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–æ–≤—ã—Ö: {len(new_channels)}")
        logger.info(f"‚è≥ Rate limit: {len(rate_limited_channels)}")
        
        return all_monitored

    async def _test_telethon_client(self):
        logger.info("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É Telethon client...")
        try:
            me = await self.telegram_monitor.client.get_me()
            logger.info(f"‚úÖ Telethon client –∞–∫—Ç–∏–≤–µ–Ω: {me.first_name} (ID: {me.id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telethon client: {e}")

    async def _retry_rate_limited_subscriptions(self, rate_limited_channels: List[Dict[str, Any]]):
        if not rate_limited_channels:
            return
        
        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {len(rate_limited_channels)} –∫–∞–Ω–∞–ª–æ–≤ —Å rate limit —á–µ—Ä–µ–∑ {self.delay_retry_wait//60} –º–∏–Ω—É—Ç...")
        await asyncio.sleep(self.delay_retry_wait)
        
        from telethon.tl.functions.channels import JoinChannelRequest
        
        success_retry = 0
        failed_retry = 0
        
        for channel_config in rate_limited_channels:
            try:
                username = channel_config['username']
                entity = await self.telegram_monitor.get_channel_entity(username)
                if not entity:
                    continue
                
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @{username}")
                await self.telegram_monitor.client(JoinChannelRequest(entity))
                
                await asyncio.sleep(self.delay_retry_subscribe)
                
                now_joined = await self.telegram_monitor.is_already_joined(entity)
                if now_joined:
                    logger.success(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: @{username}")
                    success_retry += 1
                    self.subscription_cache.add_channel_to_cache(username)
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: @{username}")
                    failed_retry += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @{username}: {e}")
                failed_retry += 1
            
            await asyncio.sleep(self.delay_between_retries)
        
        logger.info(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ‚úÖ {success_retry} | ‚ùå {failed_retry}")

    def _extract_wait_time(self, error_message: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ Telegram"""
        try:
            
            match = re.search(r'wait of (\d+) seconds', error_message)
            if match:
                return int(match.group(1))
            
            
            match = re.search(r'(\d+) seconds is required', error_message)
            if match:
                return int(match.group(1))
                
            return None
        except Exception:
            return None

    async def add_single_channel_to_monitoring(self, channel_username: str) -> bool:
        try:
            logger.info(f"üìù –ö–∞–Ω–∞–ª @{channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            logger.info(f"üîÑ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /restart")
            
            self.subscription_cache.add_channel_to_cache(channel_username)
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False

    def get_monitoring_stats(self) -> Dict[str, Any]:
        return {
            'subscription_cache': self.subscription_cache.get_cache_stats(),
            'channels_config_path': self.channels_config_path,
            'processor_media_groups': len(self.message_processor.processed_media_groups)
        }
