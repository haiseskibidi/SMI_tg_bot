"""
üì∞ News Processor Module
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from loguru import logger

from .telegram_client import TelegramMonitor

from .database import DatabaseManager


class NewsProcessor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, database: DatabaseManager, 
                 telegram_bot=None, config: Dict = None, telegram_monitor: TelegramMonitor = None):
        self.telegram = telegram_monitor  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
        self.telegram_bot = telegram_bot  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.database = database
        self.config = config or {}
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.processed_channels = 0
        self.processed_messages = 0
        self.selected_news = 0
        self.errors_count = 0
        
        logger.info("üì∞ NewsProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_channel(self, channel: Dict, is_vip: bool = False) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        
        channel_username = channel.get('username')
        if not channel_username:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω username –∫–∞–Ω–∞–ª–∞")
            return {'success': False, 'error': 'No username'}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if not self.telegram:
                logger.warning(f"‚ö†Ô∏è Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {channel_username}")
                return {'success': False, 'error': 'Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
            
            logger.info(f"üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_username} (VIP: {is_vip})")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.telegram.get_recent_messages(
                channel_config=channel,
                limit=50 if is_vip else 30  # VIP –∫–∞–Ω–∞–ª—ã - –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            
            if not messages:
                logger.debug(f"üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel_username}")
                return {'success': True, 'messages': 0, 'selected': 0}
            
            # 2. –ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            filtered_messages = await self.telegram.apply_prefilter(messages, self.config)
            
            if not filtered_messages:
                logger.debug(f"üîç –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –≤ {channel_username}")
                return {'success': True, 'messages': len(messages), 'selected': 0}
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É (–¥–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∞)
            saved_count = await self.database.save_messages_batch(filtered_messages)
            
            # 4. –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –î–õ–Ø –û–î–ù–û–ô –°–ê–ú–´–ô –°–í–ï–ñ–ï–ô –Ω–æ–≤–æ—Å—Ç–∏
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ
            latest_msg = max(filtered_messages, key=lambda m: m.get('date')) if filtered_messages else None
            messages_for_ai = [latest_msg] if latest_msg else []
            
            if messages_for_ai:
                # –ë–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞ - –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(messages_for_ai)} —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
                await self.database.save_messages_batch(messages_for_ai)
                
                # –ë–µ—Ä–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                selected = messages_for_ai
                
                if selected:
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ
                    selected_ids = [msg['id'] for msg in selected]
                    await self.database.mark_as_selected(selected_ids)
                    
                    self.selected_news += len(selected)
                    
                    logger.info(f"‚úÖ {channel_username}: {len(selected)} –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–æ–±—Ä–∞–Ω–æ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)")
            
            self.processed_channels += 1
            self.processed_messages += len(messages)
            
            return {
                'success': True,
                'messages': len(messages),
                'filtered': len(filtered_messages),
                'analyzed': len(messages_for_ai) if messages_for_ai else 0,
                'selected': len(selected) if 'selected' in locals() else 0,
                'selected_news': selected if 'selected' in locals() else []
            }
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
            return {'success': False, 'error': str(e)}
    
    async def process_vip_channels_batch(self, vip_channels: List[Dict]) -> Dict:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ VIP –∫–∞–Ω–∞–ª–æ–≤"""
        
        logger.info(f"üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(vip_channels)} VIP –∫–∞–Ω–∞–ª–æ–≤")
        
        results = []
        for channel in vip_channels:
            try:
                result = await self.process_channel(channel, is_vip=True)
                results.append(result)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ VIP –∫–∞–Ω–∞–ª–∞ {channel.get('username')}: {e}")
                results.append({'success': False, 'error': str(e)})
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = sum(1 for r in results if r.get('success'))
        total_selected = sum(r.get('selected', 0) for r in results if r.get('success'))
        
        logger.info(f"‚úÖ VIP –∫–∞–Ω–∞–ª—ã: {successful}/{len(vip_channels)} —É—Å–ø–µ—à–Ω–æ, {total_selected} –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–æ–±—Ä–∞–Ω–æ")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        all_selected_news = []
        for result in results:
            if result.get('success') and result.get('selected_news'):
                all_selected_news.extend(result['selected_news'])
        
        return {
            'processed': len(vip_channels),
            'successful': successful,
            'total_selected': total_selected,
            'selected_news': all_selected_news,
            'results': results
        }
    
    async def process_regular_channels_batch(self, regular_channels: List[Dict]) -> Dict:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        
        logger.info(f"üì∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(regular_channels)} –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ RAM
        batch_size = self.config.get('max_concurrent_channels', 25)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 25
        total_results = []
        
        for i in range(0, len(regular_channels), batch_size):
            batch = regular_channels[i:i+batch_size]
            
            logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}: {len(batch)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞
            tasks = []
            for channel in batch:
                task = self.process_channel(channel, is_vip=False)
                tasks.append(task)
            
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in batch_results:
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ: {result}")
                    total_results.append({'success': False, 'error': str(result)})
                else:
                    total_results.append(result)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try:
                import psutil
                memory_percent = psutil.virtual_memory().percent
                if memory_percent > 80:
                    logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_percent}%")
                    await asyncio.sleep(10)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
            except ImportError:
                pass
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful = sum(1 for r in total_results if r.get('success'))
        total_selected = sum(r.get('selected', 0) for r in total_results if r.get('success'))
        
        logger.info(f"‚úÖ –û–±—ã—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {successful}/{len(regular_channels)} —É—Å–ø–µ—à–Ω–æ, {total_selected} –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–æ–±—Ä–∞–Ω–æ")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        all_selected_news = []
        for result in total_results:
            if result.get('success') and result.get('selected_news'):
                all_selected_news.extend(result['selected_news'])
        
        return {
            'processed': len(regular_channels),
            'successful': successful,
            'total_selected': total_selected,
            'selected_news': all_selected_news,
            'results': total_results
        }
    
    async def generate_daily_digest(self) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ª—É—á—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            selected_news = await self.database.get_selected_news_today(
                limit=self.config.get('target_news_count', 999999)
            )
            
            if not selected_news:
                logger.info("üì≠ –ù–µ—Ç –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞")
                return None
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            sakhalin_news = [n for n in selected_news if n.get('channel_region') == 'sakhalin']
            kamchatka_news = [n for n in selected_news if n.get('channel_region') == 'kamchatka']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_parts = []
            
            if sakhalin_news:
                digest_parts.append(f"üèùÔ∏è **–°–ê–•–ê–õ–ò–ù –ò –ö–£–†–ò–õ–´** ({len(sakhalin_news)} –Ω–æ–≤–æ—Å—Ç–µ–π)")
                for news in sakhalin_news[:5]:  # –¢–æ–ø-5
                    title = news.get('ai_analysis', {}).get('title', news['text'][:50] + '...')
                    score = news.get('ai_score', 0)
                    channel = news.get('channel_name', news.get('channel_username'))
                    digest_parts.append(f"‚Ä¢ {title} (‚≠ê {score}/50) - {channel}")
            
            if kamchatka_news:
                digest_parts.append(f"\nüåã **–ö–ê–ú–ß–ê–¢–ö–ê** ({len(kamchatka_news)} –Ω–æ–≤–æ—Å—Ç–µ–π)")
                for news in kamchatka_news[:5]:  # –¢–æ–ø-5
                    title = news.get('ai_analysis', {}).get('title', news['text'][:50] + '...')
                    score = news.get('ai_score', 0)
                    channel = news.get('channel_name', news.get('channel_username'))
                    digest_parts.append(f"‚Ä¢ {title} (‚≠ê {score}/50) - {channel}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_processed = self.processed_messages
            total_channels = self.processed_channels
            
            digest_parts.extend([
                f"\nüìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –î–ï–ù–¨**",
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}",
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_processed}",
                f"–û—Ç–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(selected_news)}",
                f"",
                f"ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–æ—Ç–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"
            ])
            
            digest = "\n".join(digest_parts)
            
            logger.info(f"üìã –î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {len(selected_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            return digest
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return None
    
    async def send_to_output_channel(self, selected_news: List[Dict]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
        if not self.telegram_bot:
            logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            success = await self.telegram_bot.send_news_digest(selected_news)
            
            if success:
                logger.success(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –∏–∑ {len(selected_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª: {e}")
            return False
    
    async def get_processing_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        db_stats = await self.database.get_statistics()
        
        return {
            'session_stats': {
                'processed_channels': self.processed_channels,
                'processed_messages': self.processed_messages,
                'selected_news': self.selected_news,
                'errors_count': self.errors_count
            },
            'database_stats': db_stats,
            'ai_stats': {}  # AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω
        }
    
    async def cleanup_session(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Å—Å–∏–∏"""
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à–∏
        if self.telegram:
            await self.telegram.clear_cache()
        await self.database.clear_cache()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.processed_channels = 0
        self.processed_messages = 0
        self.selected_news = 0
        self.errors_count = 0
        
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ NewsProcessor –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
