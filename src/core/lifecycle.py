import sys
import os
import asyncio
import pytz
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, TYPE_CHECKING
from loguru import logger

if TYPE_CHECKING:
    from ..database import DatabaseManager
    from ..telegram_client import TelegramMonitor
    from ..bot import TelegramBot
    from ..news_processor import NewsProcessor
    from ..system_monitor import SystemMonitor
    from .config_loader import ConfigLoader


class LifecycleManager:
    def __init__(self, config_loader: "ConfigLoader"):
        self.config_loader = config_loader
        self.running = False
        self.restart_check_file = "config/.last_restart"
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.database: Optional["DatabaseManager"] = None
        self.telegram_monitor: Optional["TelegramMonitor"] = None
        self.telegram_bot: Optional["TelegramBot"] = None
        self.news_processor: Optional["NewsProcessor"] = None
        self.system_monitor: Optional["SystemMonitor"] = None

    def setup_logging(self):
        try:
            log_config = self.config_loader.get_config().get('logging', {})
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è 
            default_log_file = 'logs/news_monitor.log'
            if os.getenv('LOG_PATH') and os.getenv('DEPARTMENT_KEY'):
                log_path = os.getenv('LOG_PATH')
                dept_key = os.getenv('DEPARTMENT_KEY')
                default_log_file = os.path.join(log_path, f'{dept_key}_monitor.log')
            
            log_file = Path(log_config.get('file') or default_log_file)
            log_file.parent.mkdir(exist_ok=True)
            
            logger.remove()
            
            logger.add(
                sys.stdout, 
                level="INFO",
                format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>",
                colorize=True
            )
            
            logger.add(
                log_file,
                level=log_config.get('level', 'INFO'),
                rotation=f"{log_config.get('max_size_mb', 10)} MB",
                retention=log_config.get('backup_count', 5),
                encoding='utf-8',
                format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function} - {message}"
            )
            
            logger.info("üìù –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def initialize_components(self) -> bool:
        try:
            from ..database import DatabaseManager
            from ..telegram_client import TelegramMonitor
            from ..bot import create_bot_from_config
            from ..news_processor import NewsProcessor
            from ..system_monitor import SystemMonitor

            config = self.config_loader.get_config()
            
            # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            db_config = config.get('database', {})
            self.database = DatabaseManager(db_config.get('path', 'news_monitor.db'))
            await self.database.initialize()
            
            # 2. –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
            system_config = config.get('system', {})
            self.system_monitor = SystemMonitor(
                memory_limit_mb=system_config.get('memory_limit_mb', 800)
            )
            
            # 3. Telegram –±–æ—Ç (–û–°–ù–û–í–ù–û–ô –ö–ê–ù–ê–õ –°–í–Ø–ó–ò) - –≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ monitor_bot
            self.telegram_bot = await create_bot_from_config(config, None)
            if not self.telegram_bot:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞")
                return False
            
            # 4. Telegram –º–æ–Ω–∏—Ç–æ—Ä (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û)
            try:
                telegram_config = config['telegram']
                self.telegram_monitor = TelegramMonitor(
                    api_id=telegram_config['api_id'],
                    api_hash=telegram_config['api_hash'],
                    database=self.database
                )
                
                if await self.telegram_monitor.initialize():
                    logger.success("‚úÖ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    logger.warning("‚ö†Ô∏è Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)")
                    self.telegram_monitor = None
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.telegram_monitor = None
            
            # 5. –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
            monitoring_config = config.get('monitoring', {})
            self.news_processor = NewsProcessor(
                database=self.database,
                telegram_bot=self.telegram_bot,
                telegram_monitor=self.telegram_monitor,
                config=monitoring_config
            )
            
            logger.success("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def shutdown(self):
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        
        try:
            if self.telegram_bot:
                self.telegram_bot.stop_listening()
                
                await self.telegram_bot.send_system_notification(
                    "üõë <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                    f"üïê {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M:%S')} (–ú–æ—Å–∫–≤–∞)"
                )
            
            if self.database:
                await self.database.close()
            
            if self.telegram_monitor:
                await self.telegram_monitor.disconnect()
            
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        
        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _check_restart_safety(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Telegram)"""
        try:
            if not os.path.exists(self.restart_check_file):
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
                self._update_restart_time()
                return True
            
            with open(self.restart_check_file, 'r') as f:
                last_restart_str = f.read().strip()
            
            last_restart = datetime.fromisoformat(last_restart_str)
            now = datetime.now()
            time_diff = now - last_restart
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            min_restart_interval = timedelta(minutes=30)  # –ú–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
            
            if time_diff < min_restart_interval:
                remaining = min_restart_interval - time_diff
                logger.error(f"üö´ –û–ü–ê–°–ù–û–°–¢–¨ –ë–õ–û–ö–ò–†–û–í–ö–ò! –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫!")
                logger.error(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_restart.strftime('%H:%M:%S')}")
                logger.error(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ: {remaining.total_seconds()//60:.0f} –º–∏–Ω—É—Ç")
                logger.error(f"üí° –ü—Ä–∏—á–∏–Ω–∞: —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ 24 —á–∞—Å–∞")
                logger.error(f"üîß –†–µ—à–µ–Ω–∏–µ: –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self._update_restart_time()
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            self._update_restart_time()
            return True

    def _update_restart_time(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        try:
            os.makedirs(os.path.dirname(self.restart_check_file), exist_ok=True)
            with open(self.restart_check_file, 'w') as f:
                f.write(datetime.now().isoformat())
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")

    async def run(self):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            if not self._check_restart_safety():
                return False
            
            if not self.config_loader.load_config():
                return False
            
            self.config_loader.load_alert_keywords()
            self.config_loader.load_regions_config()
            
            self.setup_logging()
            
            if not await self.initialize_components():
                return False
            
            self.running = True
            logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            return True
            
        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            if self.telegram_bot:
                await self.telegram_bot.send_error_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            await self.shutdown()
        
        return True
