"""
üì∞ Digest Generator Module
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
"""

from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from loguru import logger
import pytz


class DigestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, database_manager, telegram_monitor=None):
        self.db = database_manager
        self.telegram_monitor = telegram_monitor
        self.vladivostok_tz = pytz.timezone("Asia/Vladivostok")
    
    async def generate_weekly_digest(
        self, 
        region: Optional[str] = None,
        channel: Optional[str] = None,
        days: int = 7,
        limit: int = 10,
        custom_start_date: Optional[str] = None,
        custom_end_date: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            region: –†–µ–≥–∏–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã) 
            channel: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ region)
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            custom_start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
            custom_end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            if custom_start_date and custom_end_date:
                start_date = datetime.strptime(custom_start_date, '%Y-%m-%d')
                end_date = datetime.strptime(custom_end_date, '%Y-%m-%d')
            else:
                end_date = datetime.now(self.vladivostok_tz)
                start_date = end_date - timedelta(days=days)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            start_formatted = start_date.strftime('%d.%m.%Y')
            end_formatted = end_date.strftime('%d.%m.%Y')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏
            top_news = await self.db.get_top_news_for_period(
                start_date=start_date,
                end_date=end_date,
                region=region,
                channel=channel,
                limit=limit
            )
            
            if not top_news:
                return self._generate_empty_digest(start_formatted, end_formatted, region, channel)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest_text = self._format_digest(
                top_news, 
                start_formatted, 
                end_formatted, 
                region,
                channel
            )
            
            logger.info(f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(top_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {start_formatted}-{end_formatted}")
            return digest_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def _format_digest(
        self, 
        news_list: List[Dict[str, Any]], 
        start_date: str, 
        end_date: str, 
        region: Optional[str],
        channel: Optional[str] = None
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if channel:
            channel_text = f" –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel}"
            header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π{channel_text} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        elif region:
            region_text = f" –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}"
            header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π{region_text} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        else:
            header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        
        header += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_items = []
        for news in news_list:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            link = self._create_message_link(news)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = news.get('text', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:100]
            if len(title) == 100:
                title += "..."
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            views = news.get('views', 0)
            forwards = news.get('forwards', 0)
            popularity = views + forwards * 2  # –ü–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∞–∂–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            
            news_item = f"‚ö°Ô∏è {title}"
            if link:
                news_item += f" ({link})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if popularity > 0:
                news_item += f" [{popularity} —Ä–µ–∞–∫—Ü–∏–π]"
            
            news_items.append(news_item)
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        footer = "\n\n–≠—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –Ω–∞—à–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π. –ê –≤–∞–º —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å?"
        
        return header + "\n".join(news_items) + footer
    
    def _create_message_link(self, news: Dict[str, Any]) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            channel_username = news.get('channel_username')
            message_id = news.get('message_id')
            
            if not channel_username or not message_id:
                return None
            
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            if channel_username.startswith('@'):
                channel_username = channel_username[1:]
            
            return f"https://t.me/{channel_username}/{message_id}"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")
            return None
    
    def _generate_empty_digest(self, start_date: str, end_date: str, region: Optional[str], channel: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if channel:
            source_text = f" –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel}"
        elif region:
            source_text = f" –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}"
        else:
            source_text = ""
        
        return (
            f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π{source_text}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
            "ü§∑‚Äç‚ôÇÔ∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª/—Ä–µ–≥–∏–æ–Ω\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
        )
    
    async def get_available_regions(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        try:
            return await self.db.get_regions_with_news()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
            return []

    async def get_available_channels(self, days: int = 30) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        try:
            return await self.db.get_channels_with_news(days)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def format_period_selection(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
        return (
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:</b>\n\n"
            "‚Ä¢ <code>7 –¥–Ω–µ–π</code> - –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
            "‚Ä¢ <code>14 –¥–Ω–µ–π</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ <code>30 –¥–Ω–µ–π</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
            "‚Ä¢ <code>–°–≤–æ–π –ø–µ—Ä–∏–æ–¥</code> - —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/digest 14</code> - –¥–ª—è 14 –¥–Ω–µ–π\n"
            "<code>/digest 2025-01-01 2025-01-07</code> - –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
        )

    async def generate_channel_digest_live(
        self, 
        channel_username: str,
        days: int = 7,
        limit: int = 10,
        custom_start_date: Optional[str] = None,
        custom_end_date: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∫–∞–Ω–∞–ª–∞, —á–∏—Ç–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Telegram
        
        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            custom_start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
            custom_end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        """
        try:
            if not self.telegram_monitor or not hasattr(self.telegram_monitor, 'client'):
                logger.error("‚ùå Telegram monitor –∏–ª–∏ client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (—Å —É—á–µ—Ç–æ–º timezone)
            if custom_start_date and custom_end_date:
                start_date = datetime.strptime(custom_start_date, '%Y-%m-%d')
                end_date = datetime.strptime(custom_end_date, '%Y-%m-%d')
                # –î–æ–±–∞–≤–ª—è–µ–º timezone –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                start_date = self.vladivostok_tz.localize(start_date)
                end_date = self.vladivostok_tz.localize(end_date.replace(hour=23, minute=59, second=59))
            else:
                end_date = datetime.now(self.vladivostok_tz)
                start_date = end_date - timedelta(days=days)
            
            logger.info(f"üì∞ –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ @{channel_username} –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.date()} - {end_date.date()}")

            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                if channel_username.startswith('@'):
                    channel_username = channel_username[1:]
                
                entity = await self.telegram_monitor.client.get_entity(channel_username)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ entity –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_username}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª @{channel_username}: {e}")
                return f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = []
            async for message in self.telegram_monitor.client.iter_messages(
                entity, 
                limit=None,
                offset_date=start_date,
                reverse=False
            ):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π timezone –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                message_date = message.date
                if message_date.tzinfo is None:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ timezone, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
                    message_date = pytz.UTC.localize(message_date)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                message_date = message_date.astimezone(self.vladivostok_tz)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                if message_date < start_date or message_date > end_date:
                    continue
                    
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                if not message.text or len(message.text.strip()) < 10:
                    continue
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                message_data = {
                    'id': message.id,
                    'text': message.text,
                    'date': message_date,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    'views': getattr(message, 'views', 0) or 0,
                    'forwards': getattr(message, 'forwards', 0) or 0,
                    'replies': getattr(message.replies, 'replies', 0) if message.replies else 0,
                    'reactions_count': 0,
                    'url': f"https://t.me/{channel_username}/{message.id}"
                }
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                if hasattr(message, 'reactions') and message.reactions:
                    reactions_count = 0
                    for reaction in message.reactions.results:
                        reactions_count += reaction.count
                    message_data['reactions_count'] = reactions_count
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
                message_data['popularity_score'] = (
                    message_data['views'] + 
                    message_data['forwards'] * 2 + 
                    message_data['replies'] * 3 + 
                    message_data['reactions_count'] * 5
                )
                
                messages.append(message_data)
                
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
                if message.date < start_date:
                    break

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}")
            
            if not messages:
                return self._generate_empty_digest_for_channel(channel_username, start_date, end_date)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            top_messages = sorted(messages, key=lambda x: x['popularity_score'], reverse=True)[:limit]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return self._format_live_digest(
                top_messages, 
                start_date.strftime('%d.%m.%Y'),
                end_date.strftime('%d.%m.%Y'),
                channel_username
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ live –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}"

    def _format_live_digest(
        self, 
        messages: List[Dict[str, Any]], 
        start_date: str, 
        end_date: str,
        channel_username: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (live)"""
        header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        header += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
        
        digest_lines = []
        for i, msg in enumerate(messages, 1):
            # –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
            text_preview = msg['text'][:50].replace('\n', ' ').strip()
            if len(msg['text']) > 50:
                text_preview += "..."
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_engagement = msg['views'] + msg['forwards'] + msg['replies'] + msg['reactions_count']
            
            line = f"‚ö°Ô∏è {text_preview} ({msg['url']}) [{total_engagement} —Ä–µ–∞–∫—Ü–∏–π]"
            digest_lines.append(line)
        
        footer = "\n\n–≠—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç —á–∏—Ç–∞—Ç–µ–ª–µ–π. –ê –≤–∞–º —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å?"
        
        return header + "\n".join(digest_lines) + footer

    def _generate_empty_digest_for_channel(
        self, 
        channel_username: str, 
        start_date: datetime, 
        end_date: datetime
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        return (
            f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ @{channel_username}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
            f"üòî –í –∫–∞–Ω–∞–ª–µ @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            f"‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π"
        )
