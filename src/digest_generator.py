"""
üì∞ Digest Generator Module
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
"""

from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from loguru import logger
import pytz
import re


class DigestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, database_manager, telegram_monitor=None):
        self.db = database_manager
        self.telegram_monitor = telegram_monitor
        self.moscow_tz = pytz.timezone("Europe/Moscow")
        self._last_digest_data = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    async def generate_weekly_digest(
        self, 
        region: Optional[str] = None,
        channel: Optional[str] = None,
        days: int = 7,
        limit: int = 10,
        custom_start_date: Optional[str] = None,
        custom_end_date: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ø-–Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            region: –†–µ–≥–∏–æ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (None = –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã) 
            channel: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ region)
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            custom_start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
            custom_end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            if custom_start_date and custom_end_date:
                start_date = datetime.strptime(custom_start_date, '%Y-%m-%d')
                end_date = datetime.strptime(custom_end_date, '%Y-%m-%d')
            else:
                end_date = datetime.now(self.moscow_tz)
                start_date = end_date - timedelta(days=days)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            start_formatted = start_date.strftime('%d.%m.%Y')
            end_formatted = end_date.strftime('%d.%m.%Y')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏
            top_news = await self.db.get_top_news_for_period(
                start_date=start_date,
                end_date=end_date,
                region=region,
                channel=channel,
                limit=limit
            )
            
            if not top_news:
                return self._generate_empty_digest(start_formatted, end_formatted, region, channel)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç–∞
            digest_text = self._format_digest(
                top_news, 
                start_formatted, 
                end_formatted, 
                region,
                channel
            )
            
            logger.info(f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(top_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {start_formatted}-{end_formatted}")
            return digest_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def _format_digest(
        self, 
        news_list: List[Dict[str, Any]], 
        start_date: str, 
        end_date: str, 
        region: Optional[str],
        channel: Optional[str] = None
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if channel:
            channel_text = f" –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel}"
            header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π{channel_text} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        elif region:
            region_text = f" –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}"
            header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π{region_text} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        else:
            header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        
        header += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_items = []
        for news in news_list:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            link = self._create_message_link(news)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title = news.get('text', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:100]
            if len(title) == 100:
                title += "..."
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            views = news.get('views', 0)
            forwards = news.get('forwards', 0)
            popularity = views + forwards * 2  # –ü–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–∞–∂–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            
            news_item = f"‚ö°Ô∏è {title}"
            if link:
                news_item += f" ({link})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if popularity > 0:
                news_item += f" [{popularity} —Ä–µ–∞–∫—Ü–∏–π]"
            
            news_items.append(news_item)
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        footer = "\n\n–≠—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –Ω–∞—à–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π. –ê –≤–∞–º —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å?"
        
        return header + "\n".join(news_items) + footer
    
    def _create_message_link(self, news: Dict[str, Any]) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            channel_username = news.get('channel_username')
            message_id = news.get('message_id')
            
            if not channel_username or not message_id:
                return None
            
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            if channel_username.startswith('@'):
                channel_username = channel_username[1:]
            
            return f"https://t.me/{channel_username}/{message_id}"
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")
            return None
    
    def _generate_empty_digest(self, start_date: str, end_date: str, region: Optional[str], channel: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if channel:
            source_text = f" –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel}"
        elif region:
            source_text = f" –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}"
        else:
            source_text = ""
        
        return (
            f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π{source_text}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
            "ü§∑‚Äç‚ôÇÔ∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª/—Ä–µ–≥–∏–æ–Ω\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
        )
    
    async def get_available_regions(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        try:
            return await self.db.get_regions_with_news()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
            return []

    async def get_available_channels(self, days: int = 30) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
        try:
            return await self.db.get_channels_with_news(days)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def format_period_selection(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
        return (
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞:</b>\n\n"
            "‚Ä¢ <code>7 –¥–Ω–µ–π</code> - –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
            "‚Ä¢ <code>14 –¥–Ω–µ–π</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ <code>30 –¥–Ω–µ–π</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
            "‚Ä¢ <code>–°–≤–æ–π –ø–µ—Ä–∏–æ–¥</code> - —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/digest 14</code> - –¥–ª—è 14 –¥–Ω–µ–π\n"
            "<code>/digest 2025-01-01 2025-01-07</code> - –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
        )

    async def generate_channel_digest_live(
        self, 
        channel_username: str,
        days: int = 7,
        limit: int = 10,
        custom_start_date: Optional[str] = None,
        custom_end_date: Optional[str] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∫–∞–Ω–∞–ª–∞, —á–∏—Ç–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Telegram
        
        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            custom_start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
            custom_end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        """
        try:
            if not self.telegram_monitor or not hasattr(self.telegram_monitor, 'client'):
                logger.error("‚ùå Telegram monitor –∏–ª–∏ client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (—Å —É—á–µ—Ç–æ–º timezone)
            if custom_start_date and custom_end_date:
                start_date = datetime.strptime(custom_start_date, '%Y-%m-%d')
                end_date = datetime.strptime(custom_end_date, '%Y-%m-%d')
                # –î–æ–±–∞–≤–ª—è–µ–º timezone –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                start_date = self.moscow_tz.localize(start_date)
                end_date = self.moscow_tz.localize(end_date.replace(hour=23, minute=59, second=59))
            else:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–ª–Ω—ã–µ –¥–Ω–∏
                end_date = datetime.now(self.moscow_tz).replace(hour=23, minute=59, second=59, microsecond=0)
                start_date = (end_date - timedelta(days=days)).replace(hour=0, minute=0, second=0, microsecond=0)
            
            logger.info(f"üì∞ –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ @{channel_username} –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.date()} - {end_date.date()}")

            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            try:
                if channel_username.startswith('@'):
                    channel_username = channel_username[1:]
                
                entity = await self.telegram_monitor.client.get_entity(channel_username)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ entity –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_username}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª @{channel_username}: {e}")
                return f"‚ùå –ö–∞–Ω–∞–ª @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

            # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = []
            total_messages_checked = 0
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            
            async for message in self.telegram_monitor.client.iter_messages(
                entity, 
                limit=None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
            ):
                total_messages_checked += 1
                
                if total_messages_checked <= 5:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.info(f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ #{total_messages_checked}: –¥–∞—Ç–∞={message.date}, —Ç–µ–∫—Å—Ç='{message.text[:30] if message.text else '–ù–ï–¢ –¢–ï–ö–°–¢–ê'}'")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π timezone –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                message_date = message.date
                if message_date.tzinfo is None:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ timezone, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
                    message_date = pytz.UTC.localize(message_date)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                message_date = message_date.astimezone(self.moscow_tz)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                if message_date < start_date or message_date > end_date:
                    if total_messages_checked <= 5:  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ #{total_messages_checked} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–µ: {message_date} –Ω–µ –≤ –ø–µ—Ä–∏–æ–¥–µ {start_date} - {end_date}")
                    continue
                    
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                if not message.text or len(message.text.strip()) < 10:
                    if total_messages_checked <= 5:
                        logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ #{total_messages_checked} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
                    continue
                
                # –ò—Å–∫–ª—é—á–∞–µ–º "–Ω–æ—á–Ω–æ–π —á–∞—Ç" –∏ –ø–æ–¥–æ–±–Ω—ã–µ –ø–æ—Å—Ç—ã
                text_lower = message.text.lower()
                if self._is_chat_message(text_lower):
                    if total_messages_checked <= 10:
                        logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ #{total_messages_checked} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –Ω–æ—á–Ω–æ–π —á–∞—Ç/–æ–±—â–µ–Ω–∏–µ")
                    continue

                # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã
                if "#–ø–æ–ª–∏—Ç–∏–∫–∞" in text_lower or "#–ø–æ–ª–∏—Ç–∏–∫" in text_lower:
                    if total_messages_checked <= 10:
                        logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ #{total_messages_checked} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –ø–æ–ª–∏—Ç–∏–∫–∞")
                    continue
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ä–µ–∞–∫—Ü–∏–∏ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                views = getattr(message, 'views', 0) or 0
                forwards = getattr(message, 'forwards', 0) or 0
                replies = getattr(message.replies, 'replies', 0) if message.replies else 0
                reactions_count = 0
                
                if hasattr(message, 'reactions') and message.reactions:
                    for reaction in message.reactions.results:
                        reactions_count += reaction.count
                
                # –û—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –ª–∏–±–æ –º–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –ª–∏–±–æ –µ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                engagement = replies + reactions_count
                if engagement == 0 and views < 1000:  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ—Å—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
                    if total_messages_checked <= 10:
                        logger.info(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ #{total_messages_checked} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: –º–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (views={views}, replies={replies}, reactions={reactions_count})")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–∞ –∫–∞–Ω–∞–ª–∞ (–±–æ–Ω—É—Å –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                channel_tag = f"@{channel_username}"
                has_channel_tag = channel_tag in text_lower

                # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±–æ–Ω—É—Å –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                regional_keywords = self._get_regional_keywords(channel_username)
                is_regional_news = False
                if regional_keywords:
                    is_regional_news = any(keyword in text_lower for keyword in regional_keywords)
                
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{total_messages_checked} –ø–æ–¥—Ö–æ–¥–∏—Ç! –î–∞—Ç–∞: {message_date}, —Ä–µ–∞–∫—Ü–∏–∏: {reactions_count}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {replies}, —Ç–µ–∫—Å—Ç: '{message.text[:50]}'")
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                message_data = {
                    'id': message.id,
                    'text': message.text,
                    'date': message_date,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    'views': views,
                    'forwards': forwards,
                    'replies': replies,
                    'reactions_count': reactions_count,
                    'url': f"https://t.me/{channel_username}/{message.id}"
                }
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (–∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                popularity_base = (
                    message_data['replies'] * 10 +      # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
                    message_data['reactions_count'] * 8 + # –†–µ–∞–∫—Ü–∏–∏ - –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ
                    message_data['forwards'] * 3 +       # –†–µ–ø–æ—Å—Ç—ã - –≤–∞–∂–Ω–æ
                    message_data['views'] * 0.1          # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å
                )
                
                # –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                channel_tag_bonus = 1.5 if has_channel_tag else 1.0    # +50% –∑–∞ —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞
                regional_bonus = 1.3 if is_regional_news else 1.0       # +30% –∑–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                
                message_data['popularity_score'] = popularity_base * channel_tag_bonus * regional_bonus
                
                messages.append(message_data)
                
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
                if message_date < start_date:
                    break

            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ @{channel_username} –∏–∑ {total_messages_checked} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö")
            
            if not messages:
                empty_digest = self._generate_empty_digest_for_channel(channel_username, start_date, end_date)
                return empty_digest
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-30 –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            all_top_messages = sorted(messages, key=lambda x: x['popularity_score'], reverse=True)[:30]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
            self._last_digest_data = {
                'messages': all_top_messages,
                'start_date': start_date.strftime('%d.%m.%Y'),
                'end_date': end_date.strftime('%d.%m.%Y'),
                'channel_username': channel_username
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            digest_result = self._format_live_digest_with_pagination(
                all_top_messages, 
                start_date.strftime('%d.%m.%Y'),
                end_date.strftime('%d.%m.%Y'),
                channel_username,
                page=1,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (1-10)
                limit=limit
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ)
            return digest_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ live –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}"

    def _format_live_digest(
        self, 
        messages: List[Dict[str, Any]], 
        start_date: str, 
        end_date: str,
        channel_username: str
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (live)"""
        header = f"üì∞ –°–æ–±—Ä–∞–ª–∏ —Ç–æ–ø —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        header += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
        
        digest_lines = []
        for i, msg in enumerate(messages, 1):
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏—Ö —ç–º–æ–¥–∑–∏
            clean_text = self._clean_message_text(msg['text'])
            
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º (–º–∞–∫—Å–∏–º—É–º 80 —Å–∏–º–≤–æ–ª–æ–≤)
            text_preview = self._smart_truncate(clean_text, 80)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            reactions = msg['reactions_count']
            replies = msg['replies']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_parts = []
            if reactions > 0:
                activity_parts.append(f"üëç{reactions}")
            if replies > 0:
                activity_parts.append(f"üí¨{replies}")
            
            activity_str = " ".join(activity_parts) if activity_parts else "0 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            
            line = f"{i}. {text_preview}\n   üîó {msg['url']} [{activity_str}]"
            digest_lines.append(line)
        
        footer = "\n\n–≠—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç —á–∏—Ç–∞—Ç–µ–ª–µ–π. –ê –≤–∞–º —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å?"
        
        return header + "\n\n".join(digest_lines) + footer

    def _format_live_digest_with_pagination(
        self, 
        all_messages: List[Dict[str, Any]], 
        start_date: str, 
        end_date: str,
        channel_username: str,
        page: int = 1,
        limit: int = 10
    ) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        messages_on_page = all_messages[start_idx:end_idx]
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        total_messages = len(all_messages)
        if page == 1:
            header = f"üì∞ –¢–æ–ø-{len(messages_on_page)} —Å–∞–º—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        else:
            news_range = f"{start_idx + 1}-{min(end_idx, total_messages)}"
            header = f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ {news_range} –∏–∑ —Ç–æ–ø-{total_messages} –∫–∞–Ω–∞–ª–∞ @{channel_username} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        
        header += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        digest_lines = []
        for i, msg in enumerate(messages_on_page, start_idx + 1):
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏—Ö —ç–º–æ–¥–∑–∏
            clean_text = self._clean_message_text(msg['text'])
            
            # –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º (–º–∞–∫—Å–∏–º—É–º 80 —Å–∏–º–≤–æ–ª–æ–≤)
            text_preview = self._smart_truncate(clean_text, 80)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            reactions = msg['reactions_count']
            replies = msg['replies']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_parts = []
            if reactions > 0:
                activity_parts.append(f"üëç{reactions}")
            if replies > 0:
                activity_parts.append(f"üí¨{replies}")
            
            activity_str = " ".join(activity_parts) if activity_parts else "0 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            
            line = f"{i}. {text_preview}\n   üîó {msg['url']} [{activity_str}]"
            digest_lines.append(line)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page == 1 and total_messages > 10:
            pagination_buttons.append([
                {"text": f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ (11-{min(20, total_messages)})", 
                 "callback_data": f"digest_page_{channel_username}_{page + 1}"}
            ])
        elif page == 2 and total_messages > 20:
            pagination_buttons.append([
                {"text": f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ (21-{min(30, total_messages)})", 
                 "callback_data": f"digest_page_{channel_username}_{page + 1}"}
            ])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if page > 1:
            if page == 2:
                pagination_buttons.append([
                    {"text": "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–ø-10", 
                     "callback_data": f"digest_page_{channel_username}_1"}
                ])
            else:
                pagination_buttons.append([
                    {"text": f"üîô –ù–∞–∑–∞–¥ (11-20)", 
                     "callback_data": f"digest_page_{channel_username}_{page - 1}"}
                ])
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        main_buttons = [
            [{"text": "üì∞ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", "callback_data": "digest"}],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
        ]
        
        footer = "\n\n–≠—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç —á–∏—Ç–∞—Ç–µ–ª–µ–π. –ê –≤–∞–º —á—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–æ—Å—å?"
        
        text = header + "\n\n".join(digest_lines) + footer
        keyboard = pagination_buttons + main_buttons
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        return {
            'text': text,
            'keyboard': keyboard,
            'all_messages': all_messages,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            'channel_username': channel_username,
            'start_date': start_date,
            'end_date': end_date
        }

    def _generate_empty_digest_for_channel(
        self, 
        channel_username: str, 
        start_date: datetime, 
        end_date: datetime
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        return (
            f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ @{channel_username}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
            f"üòî –í –∫–∞–Ω–∞–ª–µ @{channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                         f"‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞\n"
             f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞\n"
             f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π"
         )

    def _get_regional_keywords(self, channel_username: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞–Ω–∞–ª—É"""
        channel_lower = channel_username.lower()
        
        # –ö–∞–º—á–∞—Ç–∫–∞
        if "kamchat" in channel_lower or "–∫–∞–º—á–∞—Ç" in channel_lower:
            return [
                "–∫–∞–º—á–∞—Ç–∫", "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫", "–µ–ª–∏–∑–æ–≤–æ", "–º–∏–ª—å–∫–æ–≤–æ", "—É—Å—Ç—å-–±–æ–ª—å—à–µ—Ä–µ—Ü–∫", 
                "—É—Å—Ç—å-–∫–∞–º—á–∞—Ç—Å–∫", "–≤–∏–ª—é—á–∏–Ω—Å–∫", "–∫–ª—é—á–∏", "—ç—Å—Å–æ", "–ø–∞–ª–∞–Ω–∞",
                "–∫–æ–º–∞–Ω–¥–æ—Ä—Å–∫", "–Ω–∏–∫–æ–ª—å—Å–∫–æ–µ", "—Ç–∏–≥–∏–ª—å", "–æ—Å—Å–æ—Ä–∞", "–ø–µ–Ω–∂–∏–Ω–æ"
            ]
        
        # –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫
        elif "vladivostok" in channel_lower or "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫" in channel_lower:
            return [
                "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ø—Ä–∏–º–æ—Ä—Å–∫", "–Ω–∞—Ö–æ–¥–∫–∞", "—É—Å—Å—É—Ä–∏–π—Å–∫", "–∞—Ä—Ç–µ–º", 
                "–ø–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫", "—Å–ø–∞—Å—Å–∫", "–¥–∞–ª—å–Ω–µ–≥–æ—Ä—Å–∫", "–ª–µ—Å–æ–∑–∞–≤–æ–¥—Å–∫", "–∞—Ä—Å–µ–Ω—å–µ–≤"
            ]
        
        # –•–∞–±–∞—Ä–æ–≤—Å–∫
        elif "khabarovsk" in channel_lower or "—Ö–∞–±–∞—Ä–æ–≤—Å–∫" in channel_lower:
            return [
                "—Ö–∞–±–∞—Ä–æ–≤—Å–∫", "–∫–æ–º—Å–æ–º–æ–ª—å—Å–∫", "–∞–º—É—Ä—Å–∫", "–Ω–∏–∫–æ–ª–∞–µ–≤—Å–∫", "—Å–æ–≤–µ—Ç—Å–∫–∞—è –≥–∞–≤–∞–Ω—å",
                "–±–∏–∫–∏–Ω", "–≤—è–∑–µ–º—Å–∫–∏–π", "–æ—Ö–æ—Ç—Å–∫", "–∞—è–Ω"
            ]
        
        # –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫
        elif "blagoveshchensk" in channel_lower or "–±–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫" in channel_lower:
            return [
                "–±–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "–±–µ–ª–æ–≥–æ—Ä—Å–∫", "—Å–≤–æ–±–æ–¥–Ω—ã–π", "–∑–µ—è", "—Ç—ã–Ω–¥–∞", 
                "—à–∏–º–∞–Ω–æ–≤—Å–∫", "–∑–∞–≤–∏—Ç–∏–Ω—Å–∫", "—Ä–∞–π—á–∏—Ö–∏–Ω—Å–∫"
            ]
        
        # –°–∞—Ö–∞–ª–∏–Ω
        elif "sakhalin" in channel_lower or "—Å–∞—Ö–∞–ª–∏–Ω" in channel_lower:
            return [
                "—Å–∞—Ö–∞–ª–∏–Ω", "—é–∂–Ω–æ-—Å–∞—Ö–∞–ª–∏–Ω—Å–∫", "—Ö–æ–ª–º—Å–∫", "–∫–æ—Ä—Å–∞–∫–æ–≤", "–Ω–µ–≤–µ–ª—å—Å–∫",
                "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫", "–ø–æ—Ä–æ–Ω–∞–π—Å–∫", "–º–∞–∫–∞—Ä–æ–≤", "–∫—É—Ä–∏–ª—ã", "–æ—Ö–∞"
            ]
        
        # –Ø–∫—É—Ç—Å–∫
        elif "yakutsk" in channel_lower or "—è–∫—É—Ç—Å–∫" in channel_lower:
            return [
                "—è–∫—É—Ç—Å–∫", "—è–∫—É—Ç–∏", "—Å–∞—Ö–∞", "–º–∏—Ä–Ω—ã–π", "–Ω–µ—Ä—é–Ω–≥—Ä–∏", "–∞–ª–¥–∞–Ω", 
                "–ª–µ–Ω—Å–∫", "–æ–ª–µ–∫–º–∏–Ω—Å–∫", "–≤–µ—Ä—Ö–æ—è–Ω—Å–∫", "–º–∞–≥–∞–¥–∞–Ω"
            ]
        
        # –ò—Ä–∫—É—Ç—Å–∫
        elif "irkutsk" in channel_lower or "–∏—Ä–∫—É—Ç—Å–∫" in channel_lower:
            return [
                "–∏—Ä–∫—É—Ç—Å–∫", "–∞–Ω–≥–∞—Ä—Å–∫", "–±—Ä–∞—Ç—Å–∫", "—É—Å—Ç—å-–∏–ª–∏–º—Å–∫", "—á–µ—Ä–µ–º—Ö–æ–≤–æ",
                "—Å–∞—è–Ω—Å–∫", "—à–µ–ª–µ—Ö–æ–≤", "—Ç—É–ª—É–Ω", "–±–∞–π–∫–∞–ª"
            ]
        
        # –£–ª–∞–Ω-–£–¥—ç
        elif "ulan" in channel_lower or "—É–ª–∞–Ω" in channel_lower or "buryat" in channel_lower:
            return [
                "—É–ª–∞–Ω-—É–¥—ç", "–±—É—Ä—è—Ç", "—Å–µ–≤–µ—Ä–æ–±–∞–π–∫–∞–ª—å—Å–∫", "–≥—É—Å–∏–Ω–æ–æ–∑–µ—Ä—Å–∫", 
                "–∑–∞–∫–∞–º–µ–Ω—Å–∫", "–∫—è—Ö—Ç–∞", "–±–∞—Ä–≥—É–∑–∏–Ω", "—Ç—É—Ä—É–Ω—Ç–∞–µ–≤–æ"
            ]
        
        # –ß–∏—Ç–∞
        elif "chita" in channel_lower or "—á–∏—Ç–∞" in channel_lower:
            return [
                "—á–∏—Ç–∞", "–∫—Ä–∞—Å–Ω–æ–∫–∞–º–µ–Ω—Å–∫", "–±–æ—Ä–∑—è", "–ø–µ—Ç—Ä–æ–≤—Å–∫", "–Ω–µ—Ä—á–∏–Ω—Å–∫",
                "—à–∏–ª–∫–∞", "—Å—Ä–µ—Ç–µ–Ω—Å–∫", "–±–∞–ª–µ–π"
            ]
        
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É
        return []

    def _is_chat_message(self, text_lower: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã–º –æ–±—â–µ–Ω–∏–µ–º (–Ω–µ –Ω–æ–≤–æ—Å—Ç—å—é)"""
        chat_keywords = [
            # –ù–æ—á–Ω–æ–π —á–∞—Ç
            "–Ω–æ—á–Ω–æ–π —á–∞—Ç", "night chat", "–¥–æ–±—Ä–æ–π –Ω–æ—á–∏", "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", 
            "–≤—Å–µ–º —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤", "–ø—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤",
            
            # –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "—Å –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º", "–≤—Å–µ–º –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞",
            
            # –û–±—â–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            "–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
            
            # –í–æ–ø—Ä–æ—Å—ã/–æ–±—â–µ–Ω–∏–µ
            "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫–∞–∫ –ø–æ–≥–æ–¥–∞", "–∫—Ç–æ –æ–Ω–ª–∞–π–Ω",
            
            # –°–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            "–æ–ø—Ä–æ—Å:", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:", "–≤–æ–ø—Ä–æ—Å –¥–Ω—è", "–æ–±—Å—É–∂–¥–µ–Ω–∏–µ:",
            
            # –≠–º–æ–¥–∑–∏-—Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏)
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–∞—Ç–∞
        if any(keyword in text_lower for keyword in chat_keywords):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —ç–º–æ–¥–∑–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤
        words = text_lower.split()
        if len(words) <= 3 and all(len(word) <= 4 for word in words):
            return True
        
        return False

    def _clean_message_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = text.replace('**', '').replace('__', '').replace('*', '').replace('_', '')
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        text = re.sub(r'^(\s*[^\w\s]+\s*){2,}', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = ' '.join(text.split())
        
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ)
        text = re.sub(r'@\w+', '', text)
        
        return text.strip()

    def _smart_truncate(self, text: str, max_length: int) -> str:
        """–£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞–º"""
        if len(text) <= max_length:
            return text
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
        words = text.split()
        result = ""
        
        for word in words:
            if len(result + " " + word) <= max_length - 3:  # -3 –¥–ª—è "..."
                if result:
                    result += " "
                result += word
            else:
                break
        
        return result + "..." if result != text else text

    async def get_digest_page(self, channel_username: str, page: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not hasattr(self, '_last_digest_data') or not self._last_digest_data:
                return {
                    'text': "‚ùå –î–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.",
                    'keyboard': [[{"text": "üì∞ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", "callback_data": "digest"}]]
                }
            
            data = self._last_digest_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ç –ª–∏ –∫–∞–Ω–∞–ª
            if data['channel_username'] != channel_username:
                return {
                    'text': "‚ùå –î–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.",
                    'keyboard': [[{"text": "üì∞ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", "callback_data": "digest"}]]
                }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            return self._format_live_digest_with_pagination(
                data['messages'],
                data['start_date'],
                data['end_date'],
                data['channel_username'],
                page=page,
                limit=10
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return {
                'text': f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}",
                'keyboard': [[{"text": "üì∞ –ù–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç", "callback_data": "digest"}]]
            }
