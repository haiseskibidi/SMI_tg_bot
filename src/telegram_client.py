"""
üì± Telegram Client Module
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API —á–µ—Ä–µ–∑ Telethon
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ VPS —Å 1GB RAM
"""

import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Optional, Any
from telethon import TelegramClient, events
from telethon.tl.types import Message, Channel
from loguru import logger
import hashlib


class TelegramMonitor:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self, api_id: int, api_hash: str, database):
        self.api_id = api_id
        self.api_hash = api_hash
        self.database = database
        self.client = None
        self.is_connected = False  
        import pytz
        vladivostok_tz = pytz.timezone('Asia/Vladivostok')
        self.start_time = datetime.now(vladivostok_tz)  
        
        
        self.channels_cache = {}
        self.messages_cache = {}
        self.cache_max_size = 1000  
        
        
        self.dialogs_cache = {}
        self.dialogs_cache_time = None
        
        logger.info("üì± TelegramMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def is_already_joined(self, entity) -> bool:
        try:
            from telethon.tl.functions.channels import GetParticipantRequest
            from telethon.errors import UserNotParticipantError, ChatAdminRequiredError
            
            try:
                await self.client(GetParticipantRequest(
                    channel=entity,
                    participant=await self.client.get_me()
                ))
                return True
            except (UserNotParticipantError, ChatAdminRequiredError):
                return False
            except Exception:
                dialogs = await self.client.get_dialogs(limit=None)
                
                for dialog in dialogs:
                    if dialog.entity.id == entity.id:
                        return True
                
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            
            current_dir = Path(__file__).resolve().parent
            
            repo_root = current_dir.parent if (current_dir.parent / 'config').exists() else current_dir
            sessions_dir = repo_root / 'sessions'
            sessions_dir.mkdir(exist_ok=True)
            session_path = sessions_dir / 'news_monitor_session'

            self.client = TelegramClient(
                str(session_path),
                self.api_id,
                self.api_hash,
                device_model="Windows 10",
                system_version="4.16.30-vxCUSTOM",
                app_version="11.10",
                lang_code="ru",
                system_lang_code="ru-RU",
                
                connection_retries=3,
                request_retries=2,
                timeout=30
            )
            
            await self.client.start()
            
            
            me = await self.client.get_me()
            
            if hasattr(me, 'phone') and me.phone:
                logger.info(f"‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} ({me.phone})")
                self.is_connected = True
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –±–æ—Ç: {me.first_name}")
                logger.warning("üí° –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å –∫–∞–Ω–∞–ª—ã - –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                self.is_connected = False
                
            
            return self.is_connected
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
            logger.info("üí° –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            self.is_connected = False
            
            return False
    
    async def get_channel_entity(self, username: str) -> Optional[Channel]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–Ω–∞–ª–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å/–±–µ–∑ @)"""
        
        
        normalized = username[1:] if isinstance(username, str) and username.startswith('@') else username
        
        
        if normalized in self.channels_cache:
            return self.channels_cache[normalized]
        
        try:
            
            entity = await self.client.get_entity(normalized)
            
            
            if len(self.channels_cache) < self.cache_max_size:
                self.channels_cache[normalized] = entity
            
            logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω –∫–∞–Ω–∞–ª: {normalized}")
            return entity
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {normalized}: {e}")
            return None
    
    async def get_recent_messages(self, channel_config: Dict, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        
        
        if not self.is_connected:
            logger.warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return []
        
        username = channel_config.get('username')
        if not username:
            return []
        
        try:
            
            entity = await self.get_channel_entity(username)
            if not entity:
                return []
            
            
            messages = []
            
            
            last_check = await self.database.get_last_check_time(username)
            if not last_check:
                
                last_check = self.start_time.replace(tzinfo=None)  
            
            async for message in self.client.iter_messages(
                entity, 
                limit=limit,
                offset_date=last_check
            ):
                if not message.text:
                    continue
                
                
                if not self.apply_channel_filters(message, channel_config):
                    continue
                
                
                message_data = await self.message_to_dict(message, channel_config)
                messages.append(message_data)
            
            
            await self.database.update_last_check_time(username, datetime.now())
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}: {e}")
            return []
    
    def apply_channel_filters(self, message: Message, channel_config: Dict) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è amur_mash –∏ –¥—Ä.)"""
        
        
        filter_keywords = channel_config.get('filter_keywords', [])
        if filter_keywords:
            text_lower = message.text.lower()
            
            
            has_keyword = any(keyword.lower() in text_lower for keyword in filter_keywords)
            if not has_keyword:
                return False
        
        
        if hasattr(message, 'views') and message.views:
            if message.views < 50:  
                return False
        
        
        if len(message.text) < 50:  
            return False
        
        
        spam_keywords = ['—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–º', '–∫—É–ø–ª—é', '—Å–¥–∞–º', '–Ω–∞–π–º—É']
        text_lower = message.text.lower()
        if any(spam in text_lower for spam in spam_keywords):
            return False
        
        return True
    
    def _get_replies_count(self, message: Message) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            if hasattr(message, 'replies') and message.replies:
                return getattr(message.replies, 'replies', 0)
            return 0
        except:
            return 0
    
    async def message_to_dict(self, message: Message, channel_config: Dict) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        
        message_id = f"{channel_config['username']}_{message.id}"
        
        
        message_data = {
            'id': message_id,
            'channel_username': channel_config['username'],
            'channel_name': channel_config.get('name', channel_config['username']),
            'channel_region': channel_config.get('region', 'unknown'),
            'channel_category': channel_config.get('category', 'news'),
            'message_id': message.id,
            'text': message.text[:5000],  
            'date': message.date,
            'views': getattr(message, 'views', 0),
            'forwards': getattr(message, 'forwards', 0),
            'replies': self._get_replies_count(message),
            'reactions_count': 0,  
            'url': f"https://t.me/{channel_config['username'].lstrip('@')}/{message.id}",
            'processed': False,
            'ai_score': None,
            'ai_analysis': None,
            'selected_for_output': False
        }
        
        
        if hasattr(message, 'reactions') and message.reactions:
            total_reactions = sum(
                reaction.count for reaction in message.reactions.results
            )
            message_data['reactions_count'] = total_reactions
        
        
        content_hash = hashlib.md5(
            f"{message.text[:1000]}{message.date}".encode()
        ).hexdigest()
        message_data['content_hash'] = content_hash
        
        return message_data
    
    async def apply_prefilter(self, messages: List[Dict], config: Dict) -> List[Dict]:
        """–ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º"""
        
        filtered = []
        
        
        cfg = config.get('monitoring', config) if isinstance(config, dict) else {}
        min_views = cfg.get('min_views', 0)
        min_reactions = cfg.get('min_reactions', 0)
        priority_keywords = cfg.get('priority_keywords', [])
        exclude_keywords = cfg.get('exclude_keywords', [])
        
        for message in messages:
            text_lower = message['text'].lower()
            
            
            if len(message['text'].strip()) < 10:
                continue
            
            
            has_priority = any(keyword in text_lower for keyword in priority_keywords)
            
            
            message['priority'] = has_priority
            filtered.append(message)
        
        
        filtered.sort(
            key=lambda x: (
                x.get('priority', False),
                x['views'] + x['reactions_count'] * 10
            ),
            reverse=True
        )
        
        logger.info(f"üîç –ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {len(messages)} ‚Üí {len(filtered)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return filtered
    
    async def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        self.channels_cache.clear()
        self.messages_cache.clear()
        self.dialogs_cache.clear()
        self.dialogs_cache_time = None
        logger.info("üßπ –ö—ç—à Telegram –∫–ª–∏–µ–Ω—Ç–∞ –æ—á–∏—â–µ–Ω")

    async def _update_dialogs_cache(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–∏–∞–ª–æ–≥–æ–≤ (—Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç)"""
        from datetime import timedelta
        
        now = datetime.now()
        
        
        if (not self.dialogs_cache_time or 
            now - self.dialogs_cache_time > timedelta(minutes=10)):
            
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–∏–∞–ª–æ–≥–æ–≤...")
            self.dialogs_cache = {}
            
            try:
                
                async for dialog in self.client.iter_dialogs():
                    self.dialogs_cache[dialog.entity.id] = True
                
                self.dialogs_cache_time = now
                logger.info(f"‚úÖ –ö—ç—à –¥–∏–∞–ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.dialogs_cache)} –∫–∞–Ω–∞–ª–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

    async def is_already_joined(self, entity) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ"""
        try:
            
            await self._update_dialogs_cache()
            
            
            target_id = entity.id
            return target_id in self.dialogs_cache
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            
            return False
    
    async def get_new_messages_simple(self, channel_config: dict) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        try:
            username = channel_config['username']
            logger.info(f"üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {username}")
            
            
            entity = await self.get_channel_entity(username)
            if not entity:
                return []
            
            
            last_check = await self.database.get_last_check_time(username)
            if not last_check:
                
                last_check = self.start_time.replace(tzinfo=None)  
            
            
            new_messages = []
            async for message in self.client.iter_messages(
                entity, 
                limit=50,  
                offset_date=last_check
            ):
                if message.date <= last_check:
                    break
                    
                
                if not message.text:
                    continue
                
                message_data = {
                    'id': f"{username}_{message.id}",
                    'text': message.text,
                    'date': message.date,
                    'channel_username': username,
                    'url': f"https://t.me/{username.lstrip('@')}/{message.id}",
                }
                
                new_messages.append(message_data)
            
            
            if new_messages:
                await self.database.update_last_check_time(username)
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}")
            
            return new_messages[::-1]  
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}: {e}")
            return []

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram"""
        if self.client:
            await self.client.disconnect()
            logger.info("üëã Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def get_channel_stats(self, username: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            entity = await self.get_channel_entity(username)
            if not entity:
                return {}
            
            
            stats = {
                'username': username,
                'title': entity.title,
                'participants_count': getattr(entity, 'participants_count', 0),
                'date_created': getattr(entity, 'date', None),
                'verified': getattr(entity, 'verified', False),
                'restricted': getattr(entity, 'restricted', False)
            }
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {username}: {e}")
            return {}
