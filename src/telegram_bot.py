"""
ü§ñ Telegram Bot Module
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
–ù–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
"""

import asyncio
import httpx
import subprocess
import os
import sys
from typing import List, Dict, Optional
from loguru import logger
from datetime import datetime
import json
import pytz
import yaml


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot_token: str, admin_chat_id: int, group_chat_id: int = None, monitor_bot=None):
        self.bot_token = bot_token
        self.admin_chat_id = admin_chat_id  # –õ–∏—á–Ω—ã–π —á–∞—Ç –∞–¥–º–∏–Ω–∞
        self.group_chat_id = group_chat_id   # –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.chat_id = admin_chat_id  # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.monitor_bot = monitor_bot
        self.main_instance = monitor_bot  # –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        logger.info(f"ü§ñ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"üë§ –ê–¥–º–∏–Ω: {admin_chat_id}")
        logger.info(f"üë• –ì—Ä—É–ø–ø–∞: {group_chat_id if group_chat_id else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}")
        
        # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        self.update_offset = 0
        self.command_handlers = {}
        self.is_listening = False
        self.last_message_id = None  # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.edit_messages = True  # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (True = —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, False = –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        self.delete_commands = True  # –£–¥–∞–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        self.start_time = None  # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
        self.pending_channel_url = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
        self.pending_channels_list = []  # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.waiting_for_region_name = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        self.waiting_for_emoji = False  # –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏
        self.processed_forwards = set()  # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è forward —Å–æ–æ–±—â–µ–Ω–∏–π
        self.pending_region_data = None  # –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        self.active_inline_messages = []  # –°–ø–∏—Å–æ–∫ message_id —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
        self.current_callback_chat_id = None  # –¢–µ–∫—É—â–∏–π chat_id –∏–∑ callback –¥–ª—è edit_message_with_keyboard
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.register_command("start", self.cmd_start)
        self.register_command("help", self.cmd_help)
        self.register_command("status", self.cmd_status)
        self.register_command("start_monitoring", self.cmd_start_monitoring)
        self.register_command("stop_monitoring", self.cmd_stop_monitoring)
        self.register_command("restart", self.cmd_restart)
        self.register_command("topic_id", self.cmd_topic_id)
        self.register_command("add_channel", self.cmd_add_channel)
        self.register_command("manage_channels", self.cmd_manage_channels)
        self.register_command("stats", self.cmd_stats)
        self.register_command("settings", self.cmd_settings)
        self.register_command("force_subscribe", self.cmd_force_subscribe)
        
        asyncio.create_task(self.setup_bot_commands())
        asyncio.create_task(self.setup_main_keyboard())
    
    def is_admin_user(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id == self.admin_chat_id
    
    def is_message_from_group(self, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        return self.group_chat_id and chat_id == self.group_chat_id
    
    async def setup_bot_commands(self):
        try:
            commands = [
                {"command": "start", "description": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
                {"command": "status", "description": "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"},
                {"command": "manage_channels", "description": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"},
                {"command": "add_channel", "description": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"},
                {"command": "stats", "description": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"},
                {"command": "start_monitoring", "description": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"},
                {"command": "stop_monitoring", "description": "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"},
                {"command": "restart", "description": "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"},
                {"command": "topic_id", "description": "üìÇ –£–∑–Ω–∞—Ç—å ID —Ç–µ–º—ã"},
                {"command": "force_subscribe", "description": "üì° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"},
                {"command": "settings", "description": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"},
                {"command": "help", "description": "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"}
            ]
            
            url = f"{self.base_url}/setMyCommands"
            data = {"commands": json.dumps(commands)}
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(url, data=data)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get("ok"):
                        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {result.get('description')}")
                else:
                    logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {response.status_code}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    async def setup_main_keyboard(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        try:
            main_keyboard = [
                ["üìä –°—Ç–∞—Ç—É—Å", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
                ["üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"],
                ["üöÄ –ó–∞–ø—É—Å–∫", "üõë –°—Ç–æ–ø", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç"],
                ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üÜò –°–ø—Ä–∞–≤–∫–∞"]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∞–¥–º–∏–Ω—É
            welcome_text = (
                "ü§ñ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
                "‚å®Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º\n\n"
                "üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ /start"
            )
            
            await self.send_message_with_keyboard(
                welcome_text, 
                main_keyboard, 
                use_reply_keyboard=True,
                to_group=False
            )
            
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    
    async def handle_main_keyboard_button(self, button_text: str, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
            message_id = message.get("message_id")
            chat_id = message.get("chat", {}).get("id")
            if message_id and self.delete_commands:
                await self.delete_user_message(message_id, chat_id)
            
            # –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
            button_command_map = {
                "üìä –°—Ç–∞—Ç—É—Å": "status",
                "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "stats",
                "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏": "manage_channels",
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª": "add_channel",
                "üöÄ –ó–∞–ø—É—Å–∫": "start_monitoring",
                "üõë –°—Ç–æ–ø": "stop_monitoring",
                "üîÑ –†–µ—Å—Ç–∞—Ä—Ç": "restart",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏": "settings",
                "üÜò –°–ø—Ä–∞–≤–∫–∞": "help"
            }
            
            command = button_command_map.get(button_text)
            if command and command in self.command_handlers:
                logger.info(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É {command} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
                await self.command_handlers[command](message)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {button_text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    
    async def send_message(self, text: str, parse_mode: str = "HTML", to_group: bool = True, to_user: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if to_user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                target_chat_id = to_user
            elif to_group and self.group_chat_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                target_chat_id = self.group_chat_id
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {self.group_chat_id}")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫—É
                target_chat_id = self.admin_chat_id
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {self.admin_chat_id}")
            
            return await self._send_to_single_user(text, target_chat_id, parse_mode)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _send_to_single_user(self, text: str, chat_id: int, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            url = f"{self.base_url}/sendMessage"
            
            data = {
                "chat_id": chat_id,
                "text": text,
                "disable_web_page_preview": True
            }
            
            if parse_mode:
                data["parse_mode"] = parse_mode
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(url, data=data)
                
                if response.status_code == 200:
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
    

    
    async def send_system_notification(self, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É (–∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ—à–∏–±–∫–∏)"""
        return await self.send_message(text, parse_mode, to_group=True)
    
    async def send_command_response(self, text: str, message: dict, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç –≥–¥–µ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞"""
        chat_id = message.get("chat", {}).get("id") if message else self.admin_chat_id
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã - –æ—Ç–≤–µ—á–∞–µ–º –≤ –≥—Ä—É–ø–ø—É, –∏–Ω–∞—á–µ –≤ –ª–∏—á–∫—É
        to_group = self.is_message_from_group(chat_id)
        return await self.send_message(text, parse_mode, to_group=to_group)
    
    async def send_message_with_keyboard(self, text: str, keyboard: list = None, parse_mode: str = "HTML", use_reply_keyboard: bool = True, to_group: bool = None, to_user: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ inline –∫–Ω–æ–ø–∫–∏ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ
            if keyboard and not use_reply_keyboard:
                await self.deactivate_old_inline_messages()
            
            if to_user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                target_chat_id = to_user
            elif to_group and self.group_chat_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                target_chat_id = self.group_chat_id
            elif to_group is False:
                # –Ø–≤–Ω–æ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É
                target_chat_id = self.admin_chat_id
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∞–¥–º–∏–Ω—É
                target_chat_id = self.group_chat_id if self.group_chat_id else self.admin_chat_id
            
            return await self._send_keyboard_to_user(text, keyboard, parse_mode, use_reply_keyboard, target_chat_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
            return False
    
    async def _send_keyboard_to_user(self, text: str, keyboard: list, parse_mode: str, use_reply_keyboard: bool, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            url = f"{self.base_url}/sendMessage"
            
            data = {
                "chat_id": user_id,
                "text": text,
                "disable_web_page_preview": True
            }
            
            if parse_mode:
                data["parse_mode"] = parse_mode
                
            if keyboard:
                if use_reply_keyboard:
                    # –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
                    reply_markup = {
                        "keyboard": keyboard,
                        "resize_keyboard": True,
                        "one_time_keyboard": False
                    }
                else:
                    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    reply_markup = {"inline_keyboard": keyboard}
                
                data["reply_markup"] = json.dumps(reply_markup)
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(url, data=data)
                
                if response.status_code == 200:
                    response_data = response.json()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if "result" in response_data and "message_id" in response_data["result"]:
                        message_id = response_data["result"]["message_id"]
                        self.last_message_id = message_id
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ inline –∫–Ω–æ–ø–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                        if keyboard and not use_reply_keyboard:
                            message_info = {'message_id': message_id, 'chat_id': user_id}
                            self.active_inline_messages.append(message_info)
                    
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    

    
    async def edit_message_with_keyboard(self, text: str, keyboard: list = None, message_id: int = None, parse_mode: str = "HTML", use_reply_keyboard: bool = True, chat_id: int = None) -> bool:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            if not message_id and not self.last_message_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                return await self.send_message_with_keyboard(text, keyboard, parse_mode, use_reply_keyboard)
            
            msg_id = message_id or self.last_message_id
            target_chat_id = chat_id or self.chat_id
            
            if use_reply_keyboard:
                # –î–ª—è –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # —Ç–∞–∫ –∫–∞–∫ editMessageText –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç reply_markup —Å keyboard
                return await self.send_message_with_keyboard(text, keyboard, parse_mode, use_reply_keyboard)
            
            url = f"{self.base_url}/editMessageText"
            
            data = {
                "chat_id": target_chat_id,
                "message_id": msg_id,
                "text": text,
                "disable_web_page_preview": True
            }
            
            if parse_mode:
                data["parse_mode"] = parse_mode
                
            if keyboard:
                reply_markup = {"inline_keyboard": keyboard}
                data["reply_markup"] = json.dumps(reply_markup)
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(url, data=data)
                
                if response.status_code == 200:
                    # –ï—Å–ª–∏ —ç—Ç–æ inline –∫–Ω–æ–ø–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if keyboard and not use_reply_keyboard:
                        message_info = {'message_id': msg_id, 'chat_id': target_chat_id}
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –≤ —Å–ø–∏—Å–∫–µ
                        existing = any(
                            (isinstance(item, dict) and item.get('message_id') == msg_id) or 
                            (isinstance(item, int) and item == msg_id) 
                            for item in self.active_inline_messages
                        )
                        if not existing:
                            self.active_inline_messages.append(message_info)
                    elif not keyboard:
                        # –ï—Å–ª–∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ - —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                        self.active_inline_messages = [
                            item for item in self.active_inline_messages 
                            if not ((isinstance(item, dict) and item.get('message_id') == msg_id) or
                                   (isinstance(item, int) and item == msg_id))
                        ]
                    
                    logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code} - {response.text}")
                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return await self.send_message_with_keyboard(text, keyboard, parse_mode, use_reply_keyboard)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await self.send_message_with_keyboard(text, keyboard, parse_mode, use_reply_keyboard)
    
    async def deactivate_old_inline_messages(self, exclude_message_id: int = None):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            messages_to_remove = []
            
            for message_data in self.active_inline_messages.copy():
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ message_id) –∏ –Ω–æ–≤–æ–≥–æ (—Å chat_id)
                if isinstance(message_data, dict):
                    message_id = message_data.get('message_id')
                    chat_id = message_data.get('chat_id', self.chat_id)
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ message_id
                    message_id = message_data
                    chat_id = self.chat_id
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
                if exclude_message_id and message_id == exclude_message_id:
                    continue
                    
                try:
                    url = f"{self.base_url}/editMessageReplyMarkup"
                    data = {
                        "chat_id": chat_id,
                        "message_id": message_id,
                        "reply_markup": ""  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    }
                    
                    async with httpx.AsyncClient(timeout=5.0) as client:
                        response = await client.post(url, data=data)
                        
                        if response.status_code == 200:
                            result = response.json()
                            if result.get("ok"):
                                logger.debug(f"‚úÖ –ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
                                messages_to_remove.append(message_data)
                            else:
                                logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏: {result.get('description')}")
                                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
                                messages_to_remove.append(message_data)
                        else:
                            logger.debug(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}")
                            messages_to_remove.append(message_data)  # –£–¥–∞–ª—è–µ–º –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
                            
                except Exception as e:
                    logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    messages_to_remove.append(message_data)
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
            for message_data in messages_to_remove:
                if message_data in self.active_inline_messages:
                    self.active_inline_messages.remove(message_data)
            
            if messages_to_remove:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(messages_to_remove)} —Å—Ç–∞—Ä—ã—Ö inline –∫–Ω–æ–ø–æ–∫")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫: {e}")
    
    def register_command(self, command: str, handler):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        self.command_handlers[command] = handler
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /{command}")
    
    async def get_updates(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            url = f"{self.base_url}/getUpdates"
            data = {
                "offset": self.update_offset,
                "timeout": 10,
                "allowed_updates": ["message", "callback_query"]
            }
            
            async with httpx.AsyncClient(timeout=15.0) as client:
                response = await client.post(url, data=data)
                
                if response.status_code == 200:
                    result = response.json()
                    if result["ok"]:
                        updates = result["result"]
                        # –ï—Å–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
                        if not updates:
                            return []
                        
                        # –°—Ç—Ä–∞—Ö—É–µ–º—Å—è –æ—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤: —Å–¥–≤–∏–≥–∞–µ–º offset –Ω–∞ max(update_id)+1 —Å—Ä–∞–∑—É
                        last_update_id = max(update.get("update_id", 0) for update in updates)
                        if last_update_id >= self.update_offset:
                            self.update_offset = last_update_id + 1
                        return updates
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def delete_user_message(self, message_id, chat_id: int = None):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            url = f"{self.base_url}/deleteMessage"
            data = {
                "chat_id": target_chat_id,
                "message_id": message_id
            }
            async with httpx.AsyncClient(timeout=30.0) as client:
                await client.post(url, data=data)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    async def process_update(self, update: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º offset (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ getUpdates –Ω–µ —É—Å–ø–µ–ª —Å–¥–≤–∏–Ω—É—Ç—å)
            update_id = update.get("update_id", 0)
            if update_id >= self.update_offset:
                self.update_offset = update_id + 1
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {list(update.keys())}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "message" in update:
                message = update["message"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
                message_date = message.get("date", 0)
                if self.start_time and message_date < self.start_time:
                    logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)")
                    return
                
                chat = message.get("chat", {})
                chat_id = chat.get("id")
                chat_type = chat.get("type")
                chat_title = chat.get("title")
                user_id = message.get("from", {}).get("id")  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                
                # –õ–æ–≥–∏—Ä—É–µ–º chat_id –≥—Ä—É–ø–ø –∏ message_thread_id —Ç–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if chat_type in ["group", "supergroup"] and chat_title:
                    logger.info(f"üìç –ì—Ä—É–ø–ø–∞ '{chat_title}': chat_id = {chat_id}")
                    logger.info(f"üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ config.yaml: target_group: {chat_id}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º ID —Ç–µ–º—ã (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ)
                    thread_id = message.get("message_thread_id")
                    if thread_id:
                        logger.info(f"üìÇ –¢–µ–º–∞ –≤ –≥—Ä—É–ø–ø–µ '{chat_title}': message_thread_id = {thread_id}")
                        logger.info(f"üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ config.yaml topics: region_name: {thread_id}")
                
                # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∞–¥–º–∏–Ω–∞ (–≤ –ª–∏—á–∫—É) –∏–ª–∏ –æ—Ç –ª—é–±–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã
                if not (self.is_admin_user(user_id) or self.is_message_from_group(chat_id)):
                    return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    
                text = message.get("text", "")
                message_id = message.get("message_id")
                
                logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' (ID: {message_id})")
                
                if text.startswith("/"):
                    # –ö–æ–º–∞–Ω–¥–∞
                    command = text[1:].split()[0]  # –£–±–∏—Ä–∞–µ–º / –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
                    
                    # –£–±–∏—Ä–∞–µ–º @botname –∏–∑ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    if "@" in command:
                        command = command.split("@")[0]
                    
                    logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É: /{command}")
                    if command in self.command_handlers:
                        await self.command_handlers[command](message)
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
                        if message_id and self.delete_commands:
                            await self.delete_user_message(message_id, chat_id)
                    else:
                        await self.send_message(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{command}")
                        if message_id and self.delete_commands:
                            await self.delete_user_message(message_id, chat_id)
                else:
                    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∫–æ–º–∞–Ω–¥–∞)
                    if message.get("forward_from_chat"):
                        # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                        logger.info("üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")
                        await self.handle_forwarded_message(message)
                    elif any(keyword in text for keyword in ["t.me/", "@", "https://"]):
                        logger.info(f"üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã: {text}")
                        # –ò—â–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        found_channels = self.parse_multiple_channels(text)
                        
                        if not found_channels:
                            await self.send_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                        elif len(found_channels) == 1:
                            # –û–¥–∏–Ω –∫–∞–Ω–∞–ª - –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                            self.pending_channel_url = found_channels[0]
                            await self.show_region_selection()
                        else:
                            # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                            self.pending_channels_list = found_channels
                            await self.show_multiple_channels_selection()
                    elif self.waiting_for_region_name:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                        logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞: '{text}'")
                        self.waiting_for_region_name = False
                        await self.handle_region_creation(text)
                    elif self.waiting_for_emoji:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–º–æ–¥–∑–∏
                        logger.info(f"üé® –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —ç–º–æ–¥–∑–∏: '{text}'")
                        self.waiting_for_emoji = False
                        await self.handle_custom_emoji_input(text)
                    elif text in ["üìä –°—Ç–∞—Ç—É—Å", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "üöÄ –ó–∞–ø—É—Å–∫", "üõë –°—Ç–æ–ø", "üîÑ –†–µ—Å—Ç–∞—Ä—Ç", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üÜò –°–ø—Ä–∞–≤–∫–∞"]:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                        logger.info(f"üéõÔ∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: '{text}'")
                        await self.handle_main_keyboard_button(text, message)
                    else:
                        logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'")
                        await self.send_message("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏: /help")
                    
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ —Å—Å—ã–ª–æ–∫
                    if message_id and not text.startswith("/") and self.delete_commands:
                        await self.delete_user_message(message_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
            elif "callback_query" in update:
                callback = update["callback_query"]
                callback_user_id = callback.get("from", {}).get("id")
                callback_chat_id = callback.get("message", {}).get("chat", {}).get("id")
                
                # –†–∞–∑—Ä–µ—à–∞–µ–º callback –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
                if not (self.is_admin_user(callback_user_id) or self.is_message_from_group(callback_chat_id)):
                    return
                    
                callback_data = callback.get("data", "")
                logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω callback: '{callback_data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_user_id} –≤ —á–∞—Ç–µ {callback_chat_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –Ω–µ —á–µ—Ä–µ–∑ reply –≤ –≥—Ä—É–ø–ø–µ
                callback_message = callback.get("message", {})
                reply_to = callback_message.get("reply_to_message")
                if reply_to and self.is_message_from_group(callback_chat_id):
                    logger.warning(f"‚ö†Ô∏è Callback —á–µ—Ä–µ–∑ reply –≤ –≥—Ä—É–ø–ø–µ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!")
                
                await self.handle_callback(callback_data, callback)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–ª–µ–Ω—Å—Ç–≤–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã)
            elif "my_chat_member" in update:
                member_update = update["my_chat_member"]
                chat = member_update.get("chat", {})
                chat_id = chat.get("id")
                chat_type = chat.get("type")
                chat_title = chat.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
                new_member = member_update.get("new_chat_member", {})
                status = new_member.get("status")
                
                if chat_type in ["group", "supergroup"] and status == "administrator":
                    logger.success(f"üéâ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–ø—É '{chat_title}'")
                    logger.info(f"üìç Chat ID –≥—Ä—É–ø–ø—ã: {chat_id}")
                    logger.info(f"üí° –î–æ–±–∞–≤—å—Ç–µ –≤ config.yaml: target_group: {chat_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    async def handle_callback(self, data: str, callback_query: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        try:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            callback_url = f"{self.base_url}/answerCallbackQuery"
            await httpx.AsyncClient(timeout=10.0).post(callback_url, data={
                "callback_query_id": callback_query["id"]
            })
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
            message = callback_query.get("message", {})
            current_message_id = message.get("message_id")
            
            # –°–ø–∏—Å–æ–∫ callback'–æ–≤ –≥–¥–µ –∫–Ω–æ–ø–∫–∏ –ù–ï —É–±–∏—Ä–∞—é—Ç—Å—è (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            keep_buttons_callbacks = [
                "no_action",         # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                "add_channel",       # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                "settings",          # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                "help",             # –°–ø—Ä–∞–≤–∫–∞
                "stats",            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "status",           # –°—Ç–∞—Ç—É—Å
                "start",            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                "manage_channels",   # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
                "refresh_channels",  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
                "clear_stats",       # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                "start_monitoring",  # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                "stop_monitoring",   # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                "restart",          # –†–µ—Å—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º—ã
                "force_subscribe",   # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            ]
            
            # –¢–∞–∫–∂–µ –Ω–µ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö callback'–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            keep_prefixes = [
                "region_page_",      # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–µ–≥–∏–æ–Ω–æ–≤
                "channels_page_",    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞–Ω–∞–ª–æ–≤
                "manage_region_",    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                "delete_channel_",   # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                "confirm_delete_",   # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                "region_"            # –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            ]
            
            keep_by_prefix = any(data.startswith(prefix) for prefix in keep_prefixes)
            
            if current_message_id and data not in keep_buttons_callbacks and not keep_by_prefix:
                try:
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è  
                    callback_chat_id = callback_query.get("message", {}).get("chat", {}).get("id", self.chat_id)
                    edit_url = f"{self.base_url}/editMessageReplyMarkup"
                    edit_data = {
                        "chat_id": callback_chat_id,
                        "message_id": current_message_id,
                        "reply_markup": ""
                    }
                    
                    async with httpx.AsyncClient(timeout=10.0) as client:
                        response = await client.post(edit_url, data=edit_data)
                        if response.status_code == 200:
                            result = response.json()
                            if result.get("ok"):
                                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö inline —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
                                self.active_inline_messages = [
                                    item for item in self.active_inline_messages 
                                    if not ((isinstance(item, dict) and item.get('message_id') == current_message_id) or
                                           (isinstance(item, int) and item == current_message_id))
                                ]
                        
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {current_message_id}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-message –æ–±—ä–µ–∫—Ç –∏–∑ callback –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            callback_message = {
                "chat": callback_query.get("message", {}).get("chat", {}),
                "from": callback_query.get("from", {})
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏–∑ callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ edit_message_with_keyboard
            self.current_callback_chat_id = callback_query.get("message", {}).get("chat", {}).get("id", self.chat_id)
            logger.info(f"üì± Callback –∏–∑ —á–∞—Ç–∞: {self.current_callback_chat_id} (–≥—Ä—É–ø–ø–∞: {self.current_callback_chat_id == self.group_chat_id})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ  
            if data == "start":
                await self.cmd_start(callback_message)
            elif data == "status":
                await self.cmd_status(callback_message)
            elif data == "channels":
                await self.cmd_manage_channels(callback_message)
            elif data.startswith("channels_page_"):
                page = int(data.replace("channels_page_", ""))
                await self.show_channels_page(page)
            elif data == "stats":
                await self.cmd_stats(callback_message)
            elif data == "add_channel":
                logger.info("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback 'add_channel'")
                add_text = (
                    "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚Ä¢ https://t.me/channel_name\n"
                    "‚Ä¢ @channel_name\n"
                    "‚Ä¢ /add_channel https://t.me/channel_name\n\n"
                    "–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!"
                )
                keyboard = [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]]
                await self.edit_message_with_keyboard(add_text, keyboard, use_reply_keyboard=False, chat_id=self.current_callback_chat_id)
            elif data.startswith("remove_channel_"):
                channel_name = data.replace("remove_channel_", "")
                await self.remove_channel_handler(channel_name)
            elif data == "toggle_delete":
                self.delete_commands = not self.delete_commands
                await self.cmd_settings(callback_message)
            elif data == "toggle_edit":
                self.edit_messages = not self.edit_messages
                await self.cmd_settings(callback_message)
            elif data == "clear_stats":
                await self.clear_stats_handler()
            elif data == "settings":
                logger.info("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback 'settings'")
                await self.cmd_settings(callback_message)
            elif data == "help":
                logger.info("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback 'help'")  
                await self.cmd_help(callback_message)
            elif data == "start_monitoring":
                await self.cmd_start_monitoring(callback_message)
            elif data == "stop_monitoring":
                await self.cmd_stop_monitoring(callback_message)
            elif data == "restart":
                await self.cmd_restart(callback_message)
            elif data == "force_subscribe":
                await self.cmd_force_subscribe(callback_message)
            elif data.startswith("region_bulk_"):
                region = data.replace("region_bulk_", "")
                await self.handle_bulk_region_selection(region)
            elif data.startswith("region_page_"):
                # –§–æ—Ä–º–∞—Ç: region_page_region_key_page_number
                parts = data.replace("region_page_", "").rsplit("_", 1)
                if len(parts) == 2:
                    region_key, page_str = parts
                    try:
                        page = int(page_str)
                        await self.show_region_channels(region_key, page)
                    except ValueError:
                        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_str}")
            elif data.startswith("region_"):
                region = data.replace("region_", "")
                await self.handle_region_selection(region)
            elif data == "create_new_region":
                await self.start_create_region_flow()
            elif data.startswith("emoji_"):
                if data == "emoji_custom":
                    await self.start_custom_emoji_input()
                else:
                    emoji = data.replace("emoji_", "")
                    await self.handle_emoji_selection(emoji)
            elif data.startswith("confirm_create_"):
                region_key = data.replace("confirm_create_", "")
                await self.create_region_confirmed(region_key)
            elif data == "region_cancel":
                self.pending_channel_url = None
                self.waiting_for_region_name = False
                self.waiting_for_emoji = False
                self.pending_region_data = None
                await self.cmd_start(callback_message)
            elif data == "manage_channels":
                await self.cmd_manage_channels(callback_message)
            elif data == "refresh_channels":
                await self.cmd_manage_channels(callback_message)
            elif data.startswith("manage_region_"):
                region_key = data.replace("manage_region_", "")
                await self.show_region_channels(region_key)
            elif data == "no_action":
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                pass
            elif data.startswith("delete_channel_"):
                # –§–æ—Ä–º–∞—Ç: delete_channel_region_key_username
                parts = data.replace("delete_channel_", "").split("_", 1)
                if len(parts) == 2:
                    region_key, username = parts
                    await self.show_delete_confirmation(region_key, username)
            elif data.startswith("confirm_delete_"):
                # –§–æ—Ä–º–∞—Ç: confirm_delete_region_key_username
                parts = data.replace("confirm_delete_", "").split("_", 1)
                if len(parts) == 2:
                    region_key, username = parts
                    await self.delete_channel_from_config(region_key, username)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        finally:
            # –û—á–∏—â–∞–µ–º callback chat_id –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.current_callback_chat_id = None
    
    async def send_message_to_channel(self, text: str, channel_target: str, parse_mode: str = "HTML", thread_id: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º)"""
        try:
            url = f"{self.base_url}/sendMessage"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –∫–∞–Ω–∞–ª–∞
            chat_id = channel_target
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –ø–æ —Ç–∏–ø—É —Å—Å—ã–ª–∫–∏
            if isinstance(channel_target, str) and channel_target.startswith("https://t.me/+"):
                # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ - –Ω—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π chat_id, –Ω–æ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞
                # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                logger.warning(f"‚ö†Ô∏è –ù—É–∂–µ–Ω chat_id –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã {channel_target}")
                logger.warning("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ config.yaml: target_group: -1001234567890 (—á–∏—Å–ª–æ–≤–æ–π ID)")
                chat_id = self.chat_id
            elif isinstance(channel_target, str) and channel_target.startswith("https://t.me/"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
                username = channel_target.split("https://t.me/")[1]
                chat_id = f"@{username}"
            elif isinstance(channel_target, str) and channel_target.startswith("@"):
                chat_id = channel_target
            elif isinstance(channel_target, str) and not channel_target.startswith("@"):
                chat_id = f"@{channel_target}"
            
            data = {
                "chat_id": chat_id,
                "text": text,
                "disable_web_page_preview": True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–º—ã –¥–ª—è –≥—Ä—É–ø–ø —Å topics
            if thread_id:
                data["message_thread_id"] = thread_id
            
            # –î–æ–±–∞–≤–ª—è–µ–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if parse_mode:
                data["parse_mode"] = parse_mode
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(url, data=data)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {response.status_code} - {response.text}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                    logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                    return await self.send_message(text, parse_mode)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
            return await self.send_message(text, parse_mode)
    
    async def send_news_digest(self, selected_news: List[Dict]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if not selected_news:
                await self.send_message("üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n–ù–æ–≤—ã—Ö –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            vladivostok_tz = pytz.timezone('Asia/Vladivostok')
            timestamp = datetime.now(vladivostok_tz).strftime("%H:%M")
            message_parts = [
                f"üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</b> ‚Ä¢ {timestamp}",
                f"üìä –û—Ç–æ–±—Ä–∞–Ω–æ: <b>{len(selected_news)}</b> –Ω–æ–≤–æ—Å—Ç–µ–π",
                ""
            ]
            
            for i, news in enumerate(selected_news, 1):  # –í–°–ï –ù–û–í–û–°–¢–ò –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
                title = news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:100]
                source = news.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                score = news.get('ai_score', 0)
                url = news.get('url', '')
                
                news_text = f"<b>{i}.</b> {title}"
                if len(title) == 100:
                    news_text += "..."
                
                news_text += f"\nüìç <i>{source}</i>"
                news_text += f" ‚Ä¢ ‚≠ê {score}/10"
                
                if url:
                    news_text += f" ‚Ä¢ <a href='{url}'>–ß–∏—Ç–∞—Ç—å</a>"
                
                message_parts.append(news_text)
            
            # –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–∏ –µ—â–µ X –Ω–æ–≤–æ—Å—Ç–µ–π" - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï!
            
            message = "\n\n".join(message_parts)
            
            # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
            if len(message) > 4000:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = self._split_message(message)
                for part in parts:
                    success = await self.send_message(part)
                    if not success:
                        return False
                    await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            else:
                return await self.send_message(message)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return False
    
    def _split_message(self, message: str, max_length: int = 4000) -> List[str]:
        """–†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(message) <= max_length:
            return [message]
        
        parts = []
        lines = message.split('\n')
        current_part = ""
        
        for line in lines:
            if len(current_part + line + '\n') > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = line + '\n'
                else:
                    # –°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º
                    parts.append(line[:max_length-3] + "...")
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    async def send_status_update(self, stats: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            message = f"""
üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{stats.get('total_messages', 0)}</b>
‚Ä¢ –û—Ç–æ–±—Ä–∞–Ω–æ: <b>{stats.get('selected_messages', 0)}</b>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <code>{datetime.now(pytz.timezone('Asia/Vladivostok')).strftime('%H:%M:%S')}</code>

üíæ <b>–†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –ü–∞–º—è—Ç—å: <b>{stats.get('memory_percent', 0):.1f}%</b>
‚Ä¢ CPU: <b>{stats.get('cpu_percent', 0):.1f}%</b>
"""
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    async def send_error_alert(self, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"""
üö® <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

‚ùå <code>{error_message}</code>

üïê –í—Ä–µ–º—è: <code>{datetime.now(pytz.timezone('Asia/Vladivostok')).strftime('%d.%m.%Y %H:%M:%S')}</code>
"""
            
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É"""
        try:
            url = f"{self.base_url}/getMe"
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(url)
                
                if response.status_code == 200:
                    bot_info = response.json()
                    bot_name = bot_info.get('result', {}).get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    logger.success(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É '{bot_name}' —É—Å–ø–µ—à–Ω–æ")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    vladivostok_tz = pytz.timezone('Asia/Vladivostok')
                    current_time = datetime.now(vladivostok_tz).strftime('%d.%m.%Y %H:%M:%S')
                    test_message = f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∞–∫—Ç–∏–≤–Ω–∞!\n\nüïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
                    await self.send_message(test_message)
                    
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {response.status_code}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return False
    
    def _get_chat_id_from_target(self, channel_target: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –∏–∑ target –∫–∞–Ω–∞–ª–∞"""
        if isinstance(channel_target, str) and channel_target.startswith("https://t.me/+"):
            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–π —á–∞—Ç
            return None
        elif isinstance(channel_target, str) and channel_target.startswith("https://t.me/"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
            username = channel_target.split("https://t.me/")[1]
            return f"@{username}"
        elif isinstance(channel_target, str) and channel_target.startswith("@"):
            return channel_target
        elif isinstance(channel_target, str) and not channel_target.startswith("@"):
            return f"@{channel_target}"
        else:
            return str(channel_target)
    
    async def send_media_with_caption(self, media_path: str, caption: str = "", channel_target: str = None, media_type: str = "photo", thread_id: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é —á–µ—Ä–µ–∑ Bot API (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º)"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            if channel_target:
                chat_id = self._get_chat_id_from_target(channel_target)
                if not chat_id:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è {channel_target}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
                    chat_id = self.chat_id
            else:
                chat_id = self.chat_id

            # –ì–æ—Ç–æ–≤–∏–º URL –∏ –¥–∞–Ω–Ω—ã–µ
            if media_type == "photo":
                url = f"https://api.telegram.org/bot{self.bot_token}/sendPhoto"
                files_key = "photo"
            elif media_type == "video":
                url = f"https://api.telegram.org/bot{self.bot_token}/sendVideo"
                files_key = "video"
            else:
                url = f"https://api.telegram.org/bot{self.bot_token}/sendDocument"
                files_key = "document"

            data = {"chat_id": chat_id}
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–º—ã –¥–ª—è –≥—Ä—É–ø–ø —Å topics
            if thread_id:
                data["message_thread_id"] = thread_id
                
            if caption:
                data["caption"] = caption
                data["parse_mode"] = "HTML"
                logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å caption (–¥–ª–∏–Ω–∞ {len(caption)}): {caption[:100]}{'...' if len(caption) > 100 else ''}")
            else:
                logger.warning("‚ö†Ô∏è Caption –ø—É—Å—Ç–æ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞!")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            async with httpx.AsyncClient(timeout=60.0) as client:
                with open(media_path, 'rb') as media_file:
                    files = {files_key: media_file}
                    response = await client.post(url, data=data, files=files)
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {media_type}")
                        return True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {response.status_code} - {response.text}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, –ø—Ä–æ–±—É–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                        if chat_id != self.chat_id:
                            logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
                            data["chat_id"] = self.chat_id
                            with open(media_path, 'rb') as media_file:
                                files = {files_key: media_file}
                                response = await client.post(url, data=data, files=files)
                                return response.status_code == 200
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
            return False
    
    async def send_media_group(self, media_files: list, caption: str = "", channel_target: str = None, thread_id: int = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (–∞–ª—å–±–æ–º) —á–µ—Ä–µ–∑ Bot API"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            if channel_target:
                chat_id = self._get_chat_id_from_target(channel_target)
                if not chat_id:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è {channel_target}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
                    chat_id = self.chat_id
            else:
                chat_id = self.chat_id

            url = f"https://api.telegram.org/bot{self.bot_token}/sendMediaGroup"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É
            media_group = []
            files_data = {}
            
            for i, (file_path, media_type) in enumerate(media_files):
                file_key = f"file_{i}"
                
                media_item = {
                    "type": media_type,
                    "media": f"attach://{file_key}"
                }
                
                # Caption –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –º–µ–¥–∏–∞
                if i == 0 and caption:
                    media_item["caption"] = caption
                    media_item["parse_mode"] = "HTML"
                
                media_group.append(media_item)
                files_data[file_key] = open(file_path, 'rb')
            
            data = {
                "chat_id": chat_id,
                "media": json.dumps(media_group)
            }
            if thread_id:
                data["message_thread_id"] = thread_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(url, data=data, files=files_data)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
                for f in files_data.values():
                    f.close()
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –ú–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ({len(media_files)} —Ñ–∞–π–ª–æ–≤)")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã: {response.status_code} - {response.text}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, –ø—Ä–æ–±—É–µ–º –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                    if chat_id != self.chat_id:
                        logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç")
                        data["chat_id"] = self.chat_id
                        # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
                        files_data = {f"file_{i}": open(file_path, 'rb') for i, (file_path, _) in enumerate(media_files)}
                        response = await client.post(url, data=data, files=files_data)
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
                        for f in files_data.values():
                            f.close()
                        return response.status_code == 200
                    return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã: {e}")
            return False
    
    # ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================
    
    async def remove_old_keyboard(self, to_group: bool = None):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        try:
            if to_group and self.group_chat_id:
                target_chat_id = self.group_chat_id
            elif to_group is False:
                target_chat_id = self.admin_chat_id
            else:
                target_chat_id = self.group_chat_id if self.group_chat_id else self.admin_chat_id

            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": target_chat_id,
                "text": "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...",
                "reply_markup": json.dumps({"remove_keyboard": True})
            }
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(url, data=data)
                if response.status_code == 200:
                    # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    result = response.json()
                    if result.get("ok") and "result" in result:
                        message_id = result["result"]["message_id"]
                        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        await self.delete_user_message(message_id, target_chat_id)
                        
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

    async def cmd_start(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
        chat_id = message.get("chat", {}).get("id") if message else self.admin_chat_id
        to_group = self.is_message_from_group(chat_id) if chat_id else None
        
        keyboard = [
            [{"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "status"}, {"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
            [{"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}, {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": "add_channel"}],
            [{"text": "üöÄ –ó–∞–ø—É—Å–∫", "callback_data": "start_monitoring"}, {"text": "üõë –°—Ç–æ–ø", "callback_data": "stop_monitoring"}],
            [{"text": "üîÑ –†–µ—Å—Ç–∞—Ä—Ç", "callback_data": "restart"}, {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"}],
            [{"text": "üì° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", "callback_data": "force_subscribe"}, {"text": "üÜò –°–ø—Ä–∞–≤–∫–∞", "callback_data": "help"}]
        ]
        
        welcome_text = (
            "ü§ñ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "üìä /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "üóÇÔ∏è /manage_channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "‚ûï /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "üìà /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üöÄ /start_monitoring - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "üõë /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "üîÑ /restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã\n"
            "üìÇ /topic_id - —É–∑–Ω–∞—Ç—å ID —Ç–µ–º—ã –≤ –≥—Ä—É–ø–ø–µ\n"
            "üì° /force_subscribe - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
            "‚öôÔ∏è /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            "‚å®Ô∏è <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</b>\n\n"
            "‚ö†Ô∏è <b>–í –≥—Ä—É–ø–ø–µ:</b> –ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞!"
        )
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        await self.remove_old_keyboard(to_group)
        
        await self.send_message_with_keyboard(welcome_text, keyboard, use_reply_keyboard=False, to_group=to_group)
    
    async def cmd_manage_channels(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            channels_data = await self.get_all_channels_grouped()
            
            if not channels_data:
                keyboard = [
                    [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª", "callback_data": "add_channel"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
                ]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
                chat_id = message.get("chat", {}).get("id") if message else self.admin_chat_id
                to_group = self.is_message_from_group(chat_id) if chat_id else None
                
                await self.send_message_with_keyboard(
                    "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
                    "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!",
                    keyboard,
                    use_reply_keyboard=False,
                    to_group=to_group
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            await self.show_channels_management(channels_data, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏: {e}")
            await self.send_command_response("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤", message)
    
    async def get_all_channels_grouped(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
        try:
            channels_config = await self.get_channels_from_config()
            if not channels_config:
                return {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            regions_info = await self.load_regions_from_config()
            regions_dict = {r['key']: r for r in regions_info}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            grouped_channels = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏)
            if 'regions' in channels_config:
                for region_key, region_data in channels_config['regions'].items():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ config.yaml –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                    if region_key in regions_dict:
                        region_name = regions_dict[region_key]['name']
                    else:
                        region_name = region_data.get('name', region_key)
                    
                    channels = region_data.get('channels', [])
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –Ω–µ–º –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                    grouped_channels[region_key] = {
                        'name': region_name,
                        'channels': channels
                    }
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ –æ–±—â–µ–º —Ä–∞–∑–¥–µ–ª–µ
                all_channels = []
                for channel in channels_config:
                    if isinstance(channel, dict):
                        all_channels.append(channel)
                    else:
                        all_channels.append({'username': channel, 'title': channel})
                
                if all_channels:
                    grouped_channels['general'] = {
                        'name': 'üì∞ –û–±—â–∏–µ',
                        'channels': all_channels
                    }
            
            return grouped_channels
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {}
    
    async def show_channels_management(self, channels_data, message=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            text = "üóÇÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
            
            total_channels = 0
            for region_data in channels_data.values():
                total_channels += len(region_data['channels'])
            
            text += f"üìä <b>–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {total_channels}\n"
            text += f"üìÇ <b>–†–µ–≥–∏–æ–Ω–æ–≤:</b> {len(channels_data)}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            keyboard = []
            
            for region_key, region_data in channels_data.items():
                region_name = region_data['name']
                channels_count = len(region_data['channels'])
                
                button_text = f"{region_name} ({channels_count})"
                keyboard.append([{"text": button_text, "callback_data": f"manage_region_{region_key}"}])
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": "add_channel"},
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh_channels"}
            ])
            keyboard.append([{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}])
            
            text += "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
            chat_id = message.get("chat", {}).get("id") if message else self.admin_chat_id
            to_group = self.is_message_from_group(chat_id) if chat_id else None
            
            await self.send_message_with_keyboard(text, keyboard, use_reply_keyboard=False, to_group=to_group)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏: {e}")
    
    async def show_region_channels(self, region_key: str, page: int = 1):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            channels_data = await self.get_all_channels_grouped()
            
            if region_key not in channels_data:
                await self.send_message("‚ùå –†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            region_data = channels_data[region_key]
            region_name = region_data['name']
            channels = region_data['channels']
            
            if not channels:
                keyboard = [
                    [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": "add_channel"}],
                    [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "manage_channels"}],
                    [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
                ]
                
                text = f"üìÇ <b>{region_name}</b>\n\n"
                text += f"üìä <b>–ö–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ:</b> 0\n\n"
                text += "‚ùå –í —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤"
                await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
                return
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            channels_per_page = 8  # 8 –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (—á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏–ª–∏—Å—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
            total_pages = (len(channels) + channels_per_page - 1) // channels_per_page
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page < 1:
                page = 1
            elif page > total_pages:
                page = total_pages
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = (page - 1) * channels_per_page
            end_idx = min(start_idx + channels_per_page, len(channels))
            current_channels = channels[start_idx:end_idx]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = f"üìÇ <b>{region_name}</b>\n\n"
            text += f"üìä <b>–ö–∞–Ω–∞–ª–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ:</b> {len(channels)}\n"
            text += f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page} –∏–∑ {total_pages}\n\n"
            text += "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            
            keyboard = []
            for i, channel in enumerate(current_channels, start_idx + 1):
                username = channel.get('username', 'unknown')
                title = channel.get('title', username)
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                display_title = title[:25] + "..." if len(title) > 25 else title
                
                text += f"{i}. <code>@{username}</code>\n"
                text += f"   üìÑ {display_title}\n\n"
                
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                button_text = f"üóëÔ∏è @{username[:15]}{'...' if len(username) > 15 else ''}"
                callback_data = f"delete_channel_{region_key}_{username}"
                keyboard.append([{"text": button_text, "callback_data": callback_data}])
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ 1)
            if total_pages > 1:
                nav_buttons = []
                
                if page > 1:
                    nav_buttons.append({"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": f"region_page_{region_key}_{page-1}"})
                
                nav_buttons.append({"text": f"üìÑ {page}/{total_pages}", "callback_data": "no_action"})
                
                if page < total_pages:
                    nav_buttons.append({"text": "‚ñ∂Ô∏è –î–∞–ª–µ–µ", "callback_data": f"region_page_{region_key}_{page+1}"})
                
                keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([
                {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": "add_channel"},
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": f"manage_region_{region_key}"}
            ])
            keyboard.append([
                {"text": "üîô –ö —Ä–µ–≥–∏–æ–Ω–∞–º", "callback_data": "manage_channels"},
                {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}
            ])
            
            text += "‚ö†Ô∏è <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ:</b> —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
            
            await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False, chat_id=self.current_callback_chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞")
    
    async def show_delete_confirmation(self, region_key: str, username: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            channels_data = await self.get_all_channels_grouped()
            
            if region_key not in channels_data:
                await self.send_message("‚ùå –†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            region_data = channels_data[region_key]
            region_name = region_data['name']
            channel = None
            
            for ch in region_data['channels']:
                if ch.get('username') == username:
                    channel = ch
                    break
            
            if not channel:
                await self.send_message("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            channel_title = channel.get('title', username)
            
            text = (
                f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"üìÇ <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{username}\n"
                f"üìÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_title}\n\n"
                f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?</b>\n\n"
                f"‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b>!\n"
                f"üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                f"üìä –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )
            
            keyboard = [
                [
                    {"text": "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "callback_data": f"confirm_delete_{region_key}_{username}"},
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": f"manage_region_{region_key}"}
                ]
            ]
            
            await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False, chat_id=self.current_callback_chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    
    async def delete_channel_from_config(self, region_key: str, username: str):
        """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
            config_path = os.path.join("config", "channels_config.yaml")
            
            with open(config_path, 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file) or {}
            
            deleted = False
            region_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω"
            channel_title = username
            
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏)
            if 'regions' in config and region_key in config['regions']:
                region_data = config['regions'][region_key]
                region_name = region_data.get('name', region_key)
                channels = region_data.get('channels', [])
                
                # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
                for i, channel in enumerate(channels):
                    if channel.get('username') == username:
                        channel_title = channel.get('title', username)
                        channels.pop(i)
                        deleted = True
                        break
                
                # –ï—Å–ª–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–Ω–∞–ª–æ–≤, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                config['regions'][region_key]['channels'] = channels
            
            if not deleted:
                await self.send_message("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é  
            with open(config_path, 'w', encoding='utf-8') as file:
                yaml.dump(config, file, default_flow_style=False, allow_unicode=True, sort_keys=False)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success_text = (
                f"‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üìÇ <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> @{username}\n"
                f"üìÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_title}\n\n"
                f"üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
                f"‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"
            )
            
            keyboard = [
                [{"text": "üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–≥–∏–æ–Ω—É", "callback_data": f"manage_region_{region_key}"}],
                [{"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            await self.edit_message_with_keyboard(success_text, keyboard, use_reply_keyboard=False)
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª @{username} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞ {region_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            await self.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
            return False
    
    async def cmd_help(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º</b>\n\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:</b>\n"
            "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ /start_monitoring - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "‚Ä¢ /stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:</b>\n"
            "‚Ä¢ /channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ /add_channel [—Å—Å—ã–ª–∫–∞] - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            "‚å®Ô∏è <b>–ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞:</b>\n"
            "‚Ä¢ üöÄ –ó–∞–ø—É—Å–∫ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ üõë –°—Ç–æ–ø - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ üîÑ –†–µ—Å—Ç–∞—Ä—Ç - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç—É—Å - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª - –ø–æ–º–æ—â—å –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é\n"
            "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n\n"
            "<b>üí° –ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            "‚Ä¢ <code>/add_channel https://t.me/news_channel</code>\n"
            "‚Ä¢ <code>https://t.me/news_channel</code> (–ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞)\n"
            "‚Ä¢ <code>@news_channel</code>\n\n"
            "<b>üöÄ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            "‚Ä¢ <code>@channel1 @channel2 @channel3</code>\n"
            "‚Ä¢ <code>https://t.me/ch1 t.me/ch2 @ch3</code>\n"
            "‚Ä¢ –°–º–µ—à–∏–≤–∞–π—Ç–µ –ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "<b>üì§ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ forward:</b>\n"
            "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ –†–µ–≥–∏–æ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è! ‚ö°\n\n"
            "<b>üîß –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:</b>\n"
            "‚Ä¢ <b>–ó–∞–ø—É—Å–∫</b> - –Ω–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ <b>–°—Ç–æ–ø</b> - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∫–∞–Ω–∞–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è)\n"
            "‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)"
        )
        
        keyboard = [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]]
        await self.edit_message_with_keyboard(help_text, keyboard, use_reply_keyboard=False, chat_id=self.current_callback_chat_id)
    
    async def cmd_status(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.monitor_bot and hasattr(self.monitor_bot, 'monitoring_active'):
                is_running = self.monitor_bot.monitoring_active
            else:
                is_running = True  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑—ã–≤–∞—é—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                
            monitoring_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            monitoring_emoji = "üì°" if is_running else "‚èπÔ∏è"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
            try:
                channels = await self.get_channels_from_config()
                channels_count = len(channels)
            except:
                channels_count = 0
            
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
                f"üîÑ <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> üü¢ –ê–∫—Ç–∏–≤–Ω–∞\n"
                f"{monitoring_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {monitoring_status}\n"
                f"üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> {channels_count}\n\n"
            )
            
            if is_running:
                status_text += (
                    "üí° <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n\n"
                )
            else:
                status_text += (
                    "üí° <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ üöÄ –ó–∞–ø—É—Å–∫\n\n"
                )
            
            vladivostok_tz = pytz.timezone('Asia/Vladivostok')
            current_time = datetime.now(vladivostok_tz).strftime('%d.%m.%Y %H:%M:%S')
            status_text += f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)"
            
            keyboard = [
                [
                    {"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"},
                    {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}
                ],
                [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
            ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
            chat_id = message.get("chat", {}).get("id") if message else self.admin_chat_id
            to_group = self.is_message_from_group(chat_id) if chat_id else None
            
            await self.send_message_with_keyboard(status_text, keyboard, use_reply_keyboard=False, to_group=to_group)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã status: {e}")
            await self.send_command_response("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", message)
    
    async def cmd_start_monitoring(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /start_monitoring - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        keyboard = [["üõë –°—Ç–æ–ø", "üìä –°—Ç–∞—Ç—É—Å"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        
        if not self.monitor_bot:
            await self.send_message_with_keyboard(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                keyboard
            )
            return
        
        if self.monitor_bot.monitoring_active:
            await self.send_message_with_keyboard(
                "‚ö†Ô∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üõë –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
                keyboard
            )
            return
        
        # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await self.monitor_bot.resume_monitoring()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        vladivostok_tz = pytz.timezone('Asia/Vladivostok')
        current_time = datetime.now(vladivostok_tz).strftime('%d.%m.%Y %H:%M:%S')
        
        await self.send_message_with_keyboard(
            "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            "üì± <b>Telegram –±–æ—Ç:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            "üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
            "üß† <b>–ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä:</b> ‚úÖ –ì–æ—Ç–æ–≤\n"
            "üì∫ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
            "üåê <b>–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b> ‚úÖ http://localhost:8080\n\n"
            f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)",
            keyboard
        )
    
    async def cmd_stop_monitoring(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /stop_monitoring - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        keyboard = [["üöÄ –ó–∞–ø—É—Å–∫", "üìä –°—Ç–∞—Ç—É—Å"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        
        if not self.monitor_bot:
            await self.send_message_with_keyboard(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                keyboard
            )
            return
        
        if not self.monitor_bot.monitoring_active:
            await self.send_message_with_keyboard(
                "‚ö†Ô∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üöÄ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
                keyboard
            )
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await self.monitor_bot.pause_monitoring()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        vladivostok_tz = pytz.timezone('Asia/Vladivostok')
        current_time = datetime.now(vladivostok_tz).strftime('%d.%m.%Y %H:%M:%S')
        
        await self.send_message_with_keyboard(
            "üõë <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)",
            keyboard
        )
    
    async def cmd_restart(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞"""
        try:
            keyboard = [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
            vladivostok_tz = pytz.timezone('Asia/Vladivostok')
            current_time = datetime.now(vladivostok_tz).strftime('%d.%m.%Y %H:%M:%S')
            
            await self.send_message_with_keyboard(
                "üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...</b>\n\n"
                "üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n"
                "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...\n"
                "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å...\n\n"
                f"üïê {current_time} (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)\n\n"
                "‚è≥ <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...</i>",
                keyboard
            )
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await asyncio.sleep(2)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ—Å—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º—ã...")
            import os
            import sys
            os.execv(sys.executable, ['python'] + sys.argv)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞: {e}")
            await self.send_message_with_keyboard(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞</b>\n\n{e}",
                [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            )
    
    async def cmd_topic_id(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID —Ç–µ–º—ã –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            chat = message.get("chat", {})
            chat_type = chat.get("type")
            chat_title = chat.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
            thread_id = message.get("message_thread_id")
            
            if chat_type not in ["group", "supergroup"]:
                await self.send_message(
                    "‚ùå <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /topic_id –≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã"
                )
                return
            
            if not thread_id:
                await self.send_message(
                    f"üìÇ <b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}\n"
                    "üìã <b>–¢–µ–º–∞:</b> –û–±—â–∞—è –ª–µ–Ω—Ç–∞ (–±–µ–∑ —Ç–µ–º—ã)\n"
                    "üÜî <b>Thread ID:</b> null\n\n"
                    "üí° <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ config.yaml:</b>\n"
                    "<code>topics:\n"
                    "  general: null</code>"
                )
            else:
                await self.send_message(
                    f"üìÇ <b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}\n"
                    "üìã <b>–¢–µ–º–∞:</b> {–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏}\n"
                    f"üÜî <b>Thread ID:</b> {thread_id}\n\n"
                    "üí° <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ config.yaml:</b>\n"
                    "<code>topics:\n"
                    f"  sakhalin: {thread_id}  # –µ—Å–ª–∏ —ç—Ç–æ –°–∞—Ö–∞–ª–∏–Ω\n"
                    f"  kamchatka: {thread_id}  # –µ—Å–ª–∏ —ç—Ç–æ –ö–∞–º—á–∞—Ç–∫–∞</code>\n\n"
                    "üîÑ <b>–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–Ω–æ–ø–∫–æ–π '–†–µ—Å—Ç–∞—Ä—Ç'</b>"
                )
                
            logger.info(f"üìÇ –ó–∞–ø—Ä–æ—Å ID —Ç–µ–º—ã: –≥—Ä—É–ø–ø–∞ '{chat_title}', thread_id = {thread_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã topic_id: {e}")
            await self.send_message(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}")
    
    async def show_region_selection(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –í—Å–µ–≥–¥–∞ —á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ config.yaml –¥–ª—è –≤—ã–±–æ—Ä–∞
            regions = await self.load_regions_from_config()
            
            # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            if not regions:
                regions = [
                    {'key': 'sakhalin', 'name': 'üèùÔ∏è –°–∞—Ö–∞–ª–∏–Ω', 'emoji': 'üèùÔ∏è'},
                    {'key': 'kamchatka', 'name': 'üåã –ö–∞–º—á–∞—Ç–∫–∞', 'emoji': 'üåã'},
                    {'key': 'chita', 'name': 'üèîÔ∏è –ß–∏—Ç–∞', 'emoji': 'üèîÔ∏è'},
                    {'key': 'general', 'name': 'üì∞ –û–±—â–∏–µ', 'emoji': 'üì∞'}
                ]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            row = []
            for i, region in enumerate(regions):
                button_text = region['name']
                callback_data = f"region_{region['key']}"
                
                row.append({"text": button_text, "callback_data": callback_data})
                
                # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                if len(row) == 2 or i == len(regions) - 1:
                    keyboard.append(row)
                    row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            keyboard.append([{"text": "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω", "callback_data": "create_new_region"}])
            keyboard.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}])
            
            text = (
                f"üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b>\n\n"
                f"üîó <code>{self.pending_channel_url}</code>\n\n"
                f"üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã ({len([r for r in regions if r['key'] != 'general'])} + –æ–±—â–∏–π):\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö
            for region in regions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–≥–∏–æ–Ω–æ–≤
                channels_count = region.get('channels_count', 0)
                text += f"‚Ä¢ {region['name']}: {channels_count} –∫–∞–Ω–∞–ª–æ–≤\n"
            
            if len(regions) > 5:
                text += f"‚Ä¢ ... –∏ –µ—â–µ {len(regions) - 5} —Ä–µ–≥–∏–æ–Ω–æ–≤\n"
            
            text += "\nüí° –ù–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π? –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω!"
            
            await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False, chat_id=self.current_callback_chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def show_multiple_channels_selection(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö"""
        try:
            channels_list = self.pending_channels_list
            if not channels_list:
                await self.send_message("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            channels_text = f"üì∫ <b>–ù–∞–π–¥–µ–Ω–æ {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
            for i, channel in enumerate(channels_list, 1):
                channels_text += f"  {i}. @{channel}\n"
            
            channels_text += "\nüìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤:</b>"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
            regions = await self.load_regions_from_config()
            
            keyboard = []
            row = []
            for i, region in enumerate(regions):
                button_text = region['name']
                callback_data = f"region_bulk_{region['key']}"
                
                row.append({"text": button_text, "callback_data": callback_data})
                
                # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                if len(row) == 2 or i == len(regions) - 1:
                    keyboard.append(row)
                    row = []
            
            keyboard.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_bulk_cancel"}])
            
            await self.edit_message_with_keyboard(
                channels_text,
                keyboard,
                use_reply_keyboard=False
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {e}")
    

    async def handle_forwarded_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            forward_from_chat = message.get("forward_from_chat", {})
            if not forward_from_chat:
                await self.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_username = forward_from_chat.get("username")
            channel_title = forward_from_chat.get("title", "")
            channel_type = forward_from_chat.get("type", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ forward —Å–æ–æ–±—â–µ–Ω–∏–π
            forward_key = f"{channel_username}_{int(message.get('date', 0))}"
            if forward_key in self.processed_forwards:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ forward —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{channel_username}")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            self.processed_forwards.add(forward_key)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            current_time = int(message.get('date', 0))
            self.processed_forwards = {
                key for key in self.processed_forwards 
                if current_time - int(key.split('_')[-1]) < 300
            }
            
            if not channel_username:
                await self.send_message("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ username")
                return
            
            if channel_type != "channel":
                await self.send_message("‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª, –∞ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞")
                return
            
            logger.info(f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ @{channel_username} ({channel_title})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª
            if self.is_channel_already_added(channel_username):
                await self.send_message(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª @{channel_username} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            await self.show_channel_preview_and_region_selection(channel_username, channel_title)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def show_channel_preview_and_region_selection(self, channel_username: str, channel_title: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω"""
        try:
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
            suggested_region = self.detect_channel_region(channel_title, channel_username)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞
            preview_text = (
                f"üì∫ <b>–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª!</b>\n\n"
                f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_title}\n"
                f"üîó <b>Username:</b> @{channel_username}\n"
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ config.yaml
            regions = await self.load_regions_from_config()
            suggested_name = suggested_region
            
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            if suggested_region != 'general':
                for region in regions:
                    if region['key'] == suggested_region:
                        suggested_name = region['name']
                        break
                preview_text += f"üéØ <b>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω:</b> {suggested_name}\n"
            
            preview_text += "\n‚ùì –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥?"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.pending_channel_url = channel_username
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏–∑ config.yaml
            keyboard = []
            row = []
            for i, region in enumerate(regions):
                button_text = region['name']
                callback_data = f"region_{region['key']}"
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω - –æ—Ç–º–µ—á–∞–µ–º –≥–∞–ª–æ—á–∫–æ–π
                if region['key'] == suggested_region:
                    button_text = "‚úÖ " + button_text
                
                row.append({"text": button_text, "callback_data": callback_data})
                
                # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                if len(row) == 2 or i == len(regions) - 1:
                    keyboard.append(row)
                    row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([{"text": "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω", "callback_data": "create_new_region"}])
            keyboard.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "start"}])
            
            await self.edit_message_with_keyboard(preview_text, keyboard, use_reply_keyboard=False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–≤—å—é –∫–∞–Ω–∞–ª–∞: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ")
    
    def detect_channel_region(self, channel_title: str, channel_username: str) -> str:
        """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ username"""
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ username –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            text_to_analyze = f"{channel_title} {channel_username}".lower()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            regions_config = {}
            if self.monitor_bot and hasattr(self.monitor_bot, 'regions_config'):
                regions_config = self.monitor_bot.regions_config
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
            if not regions_config:
                region_keywords = {
                    'sakhalin': [
                        '—Å–∞—Ö–∞–ª–∏–Ω', 'sakhalin', '–æ—Å—Ç—Ä–æ–≤', '—é–∂–Ω–æ-—Å–∞—Ö–∞–ª–∏–Ω—Å–∫', '—é–∂–Ω–æ',
                        '–∫–æ—Ä—Å–∞–∫–æ–≤', '—Ö–æ–ª–º—Å–∫', '–ø–æ—Ä–æ–Ω–∞–π—Å–∫', '—É–≥–ª–µ–≥–æ—Ä—Å–∫', '–º–∞–∫–∞—Ä–æ–≤',
                        '–∫—É—Ä–∏–ª—ã', '–∫—É—Ä–∏–ª—å—Å–∫–∏–µ', '–Ω–µ–≤–µ–ª—å—Å–∫', '–¥–æ–ª–∏–Ω—Å–∫', '—Ç—ã–º–æ–≤—Å–∫',
                        '–æ—Ö–∞', '–Ω–æ–≥–ª–∏–∫–∏', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫', '65'
                    ],
                    'kamchatka': [
                        '–∫–∞–º—á–∞—Ç–∫–∞', 'kamchatka', '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫', '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∏–π',
                        '–µ–ª–∏–∑–æ–≤–æ', '–≤–∏–ª—é—á–∏–Ω—Å–∫', '—É—Å—Ç—å-–∫–∞–º—á–∞—Ç—Å–∫', '–º–∏–ª—å–∫–æ–≤–æ',
                        '—ç—Å—Å–æ', '–ø–∞–ª–∞–Ω–∞', '–æ—Å—Å–æ—Ä–∞', '41', 'kam', '—Ä–µ–≥–∏–æ–Ω41'
                    ],
                    'chita': [
                        '—á–∏—Ç–∞', 'chita', '–∑–∞–±–∞–π–∫–∞–ª—å–µ', '–∑–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π', '–∫—Ä–∞—Å–Ω–æ–∫–∞–º–µ–Ω—Å–∫',
                        '–±–æ—Ä–∑—è', '–ø–µ—Ç—Ä–æ–≤—Å–∫-–∑–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π', '–Ω–µ—Ä—á–∏–Ω—Å–∫', '—à–∏–ª–∫–∞',
                        '–º–æ–≥–æ—á–∞', '—Å—Ä–µ—Ç–µ–Ω—Å–∫', '—Ö–∏–ª–æ–∫', '75', '03', '–∑–∞–±–∞–π'
                    ]
                }
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                region_keywords = {}
                for region_key, region_data in regions_config.items():
                    if region_key != 'general':
                        region_keywords[region_key] = region_data.get('keywords', [])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            region_scores = {}
            for region, keywords in region_keywords.items():
                score = 0
                for keyword in keywords:
                    if keyword.lower() in text_to_analyze:
                        score += 1
                region_scores[region] = score
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–≥–∏–æ–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if region_scores:
                best_region = max(region_scores, key=region_scores.get)
                if region_scores[best_region] > 0:
                    logger.info(f"üéØ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω '{best_region}' –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_username} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {region_scores[best_region]})")
                    return best_region
            
            return 'general'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            return 'general'
    
    def is_channel_already_added(self, channel_username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
            with open('config/channels_config.yaml', 'r', encoding='utf-8') as f:
                import yaml
                channels_data = yaml.safe_load(f) or {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
            if 'regions' in channels_data:
                for region_key, region_data in channels_data['regions'].items():
                    channels = region_data.get('channels', [])
                    for channel in channels:
                        if channel.get('username') == channel_username:
                            return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def parse_channel_username(self, channel_input: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞"""
        try:
            channel_input = channel_input.strip()
            
            # –£–¥–∞–ª—è–µ–º https://t.me/
            if channel_input.startswith("https://t.me/"):
                channel_input = channel_input.replace("https://t.me/", "")
            elif channel_input.startswith("t.me/"):
                channel_input = channel_input.replace("t.me/", "")
            
            # –£–¥–∞–ª—è–µ–º @
            if channel_input.startswith("@"):
                channel_input = channel_input[1:]
            
            # –£–¥–∞–ª—è–µ–º –≤—Å—ë –ø–æ—Å–ª–µ ? (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL)
            if "?" in channel_input:
                channel_input = channel_input.split("?")[0]
            
            # –£–¥–∞–ª—è–µ–º –≤—Å—ë –ø–æ—Å–ª–µ / (–ø–æ–¥–ø—É—Ç–∏)
            if "/" in channel_input:
                channel_input = channel_input.split("/")[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
            if channel_input and channel_input.replace("_", "").replace("-", "").isalnum():
                return channel_input
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞: {e}")
            return None
    
    def parse_multiple_channels(self, text: str) -> list:
        """–ù–∞–π—Ç–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            import re
            channels = []
            
            # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–∞–Ω–∞–ª–æ–≤
            patterns = [
                r'https://t\.me/(\w+)',  # https://t.me/channel
                r't\.me/(\w+)',          # t.me/channel  
                r'@(\w+)',               # @channel
            ]
            
            for pattern in patterns:
                matches = re.findall(pattern, text)
                for match in matches:
                    username = self.parse_channel_username(match)
                    if username and username not in channels:
                        channels.append(username)
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–µ–Ω–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤ (–±–µ–∑ @ –∏ —Å—Å—ã–ª–æ–∫)
            words = text.split()
            for word in words:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç—å –Ω–∞ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
                clean_word = word.strip('.,!?;:()[]{}"\'-').lower()
                if (len(clean_word) > 3 and 
                    clean_word.replace('_', '').replace('-', '').isalnum() and
                    ('chita' in clean_word or 'buryat' in clean_word or 'zabay' in clean_word or 
                     'transbaikal' in clean_word or 'baikal' in clean_word or '75' in clean_word or '03' in clean_word) and
                    clean_word not in channels):
                    channels.append(clean_word)
            
            return channels
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    async def handle_region_selection(self, region: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            if region == "cancel":
                self.pending_channel_url = None
                await self.edit_message_with_keyboard(
                    "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
                    [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]],
                    use_reply_keyboard=False,
                    chat_id=self.current_callback_chat_id
                )
                return
            
            channel_url = self.pending_channel_url
            if not channel_url:
                await self.send_message("‚ùå –û—à–∏–±–∫–∞: URL –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–∞—Ä—Å–∏–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ URL
            channel_username = self.parse_channel_username(channel_url)
            if not channel_username:
                await self.edit_message_with_keyboard(
                    f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑: <code>{channel_url}</code>",
                    [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]],
                    use_reply_keyboard=False
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–≥–∏–æ–Ω–æ–º
            success = await self.add_channel_to_config(channel_username, region)
            
            if success:
                region_names = {
                    'sakhalin': 'üèùÔ∏è –°–∞—Ö–∞–ª–∏–Ω',
                    'kamchatka': 'üåã –ö–∞–º—á–∞—Ç–∫–∞',
                    'chita': 'üèîÔ∏è –ß–∏—Ç–∞',
                    'general': 'üì∞ –û–±—â–∏–µ'
                }
                region_name = region_names.get(region, region)
                
                await self.edit_message_with_keyboard(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    f"üì∫ @{channel_username}\n"
                    f"üìÇ –†–µ–≥–∏–æ–Ω: {region_name}\n\n"
                    "–ö–∞–Ω–∞–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.",
                    [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]],
                    use_reply_keyboard=False
                )
            else:
                await self.edit_message_with_keyboard(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞</b>\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏: <code>{channel_url}</code>",
                    [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]],
                    use_reply_keyboard=False
                )
            
            self.pending_channel_url = None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_bulk_region_selection(self, region: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            if region == "cancel":
                self.pending_channels_list = []
                await self.edit_message_with_keyboard(
                    "‚ùå <b>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
                    [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]],
                    use_reply_keyboard=False
                )
                return
            
            channels_list = self.pending_channels_list
            if not channels_list:
                await self.send_message("‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
            added_count = 0
            failed_count = 0
            already_exists_count = 0
            
            for channel_username in channels_list:
                try:
                    success = await self.add_channel_to_config(channel_username, region)
                    if success:
                        added_count += 1
                    else:
                        already_exists_count += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_username}: {e}")
                    failed_count += 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            region_names = {
                'sakhalin': 'üèùÔ∏è –°–∞—Ö–∞–ª–∏–Ω',
                'kamchatka': 'üåã –ö–∞–º—á–∞—Ç–∫–∞',
                'chita': 'üèîÔ∏è –ß–∏—Ç–∞',
                'general': 'üì∞ –û–±—â–∏–µ'
            }
            region_name = region_names.get(region, region)
            
            result_text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
            result_text += f"üìÇ –†–µ–≥–∏–æ–Ω: {region_name}\n"
            result_text += f"üì∫ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels_list)}\n\n"
            
            if added_count > 0:
                result_text += f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{added_count}</b>\n"
            if already_exists_count > 0:
                result_text += f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: <b>{already_exists_count}</b>\n"
            if failed_count > 0:
                result_text += f"‚ùå –û—à–∏–±–∫–∏: <b>{failed_count}</b>\n"
            
            if added_count > 0:
                result_text += "\nüîÑ –ö–∞–Ω–∞–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."
            
            await self.edit_message_with_keyboard(
                result_text,
                [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]],
                use_reply_keyboard=False
            )
            
            self.pending_channels_list = []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def cmd_add_channel(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"""
        if not message:
            await self.send_message("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>https://t.me/channel_name</code>")
            return
            
        text = message.get("text", "")
        parts = text.split(maxsplit=1)
        
        if len(parts) < 2:
            await self.send_message(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ <code>/add_channel https://t.me/news_channel</code>\n"
                "‚Ä¢ <code>/add_channel @news_channel</code>"
            )
            return
        
        channel_link = parts[1].strip()
        await self.add_channel_handler(channel_link)
    
    async def cmd_force_subscribe(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /force_subscribe - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        try:
            await self.send_message(
                "üì° <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>\n\n"
                "üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ main_instance –¥–æ—Å—Ç—É–ø–µ–Ω
            if not hasattr(self, 'main_instance') or not self.main_instance:
                await self.send_message("‚ùå –ì–ª–∞–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ telegram_monitor –¥–æ—Å—Ç—É–ø–µ–Ω
            if not hasattr(self.main_instance, 'telegram_monitor') or not self.main_instance.telegram_monitor:
                await self.send_message("‚ùå Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏
            self.main_instance.clear_subscription_cache()
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–∏–∞–ª–æ–≥–æ–≤ Telegram –¥–ª—è —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if hasattr(self.main_instance.telegram_monitor, 'clear_cache'):
                await self.main_instance.telegram_monitor.clear_cache()
            logger.info("üóëÔ∏è –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            channels_data = await self.get_channels_from_config()
            all_channels = channels_data.get('channels', [])
            
            if not all_channels:
                await self.send_message("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            await self.send_message(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_channels)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            success_count = 0
            already_subscribed_count = 0
            failed_count = 0
            rate_limited_count = 0
            
            from telethon.tl.functions.channels import JoinChannelRequest
            
            for i, channel_config in enumerate(all_channels, 1):
                try:
                    username = channel_config.get('username', '')
                    if not username:
                        continue
                    
                    logger.info(f"üì° [{i}/{len(all_channels)}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ @{username}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
                    entity = await self.main_instance.telegram_monitor.get_channel_entity(username)
                    if not entity:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è @{username}")
                        failed_count += 1
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    already_joined = await self.main_instance.telegram_monitor.is_already_joined(entity)
                    
                    if already_joined:
                        logger.info(f"‚úÖ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{username}")
                        already_subscribed_count += 1
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                        self.main_instance.add_channel_to_cache(username)
                    else:
                        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                        try:
                            await self.main_instance.telegram_monitor.client(JoinChannelRequest(entity))
                            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ @{username}")
                            success_count += 1
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                            self.main_instance.add_channel_to_cache(username)
                            await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                        except Exception as sub_error:
                            error_msg = str(sub_error).lower()
                            if "wait" in error_msg and "seconds" in error_msg:
                                logger.warning(f"‚è≥ Rate limit –Ω–∞ @{username}")
                                rate_limited_count += 1
                            elif "already" in error_msg or "—É—á–∞—Å—Ç–Ω–∏–∫" in error_msg:
                                logger.info(f"‚úÖ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{username}")
                                already_subscribed_count += 1
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                                self.main_instance.add_channel_to_cache(username)
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @{username}: {sub_error}")
                                failed_count += 1
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
                    if i % 10 == 0:
                        progress_text = (
                            f"üîÑ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(all_channels)}</b>\n\n"
                            f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è: {success_count}\n"
                            f"üíæ –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω: {already_subscribed_count}\n"
                            f"‚è≥ Rate limit: {rate_limited_count}\n"
                            f"‚ùå –û—à–∏–±–∫–∏: {failed_count}"
                        )
                        await self.send_message(progress_text)
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ @{username}: {e}")
                    failed_count += 1
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            final_report = (
                f"üì° <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è: <b>{success_count}</b>\n"
                f"üíæ –£–∂–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω: <b>{already_subscribed_count}</b>\n"
                f"‚è≥ Rate limit: <b>{rate_limited_count}</b>\n"
                f"‚ùå –û—à–∏–±–∫–∏: <b>{failed_count}</b>\n\n"
                f"üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: <b>{len(all_channels)}</b> –∫–∞–Ω–∞–ª–æ–≤\n"
                f"üéâ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{success_count + already_subscribed_count}</b>"
            )
            
            if rate_limited_count > 0:
                final_report += (
                    f"\n\nüí° <b>Rate limit</b> - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram.\n"
                    f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
                )
            
            await self.send_message(final_report)
            logger.info(f"üì° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count} –Ω–æ–≤—ã—Ö + {already_subscribed_count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö = {success_count + already_subscribed_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}"
            logger.error(error_msg)
            await self.send_message(error_msg)
    
    async def cmd_list_channels(self, message, page: int = 0):
        """–ö–æ–º–∞–Ω–¥–∞ /channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            await self.show_channels_page(page)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    
    async def show_channels_page(self, page: int = 0):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            channels_data = await self.get_channels_from_config()
            total_channels = channels_data['total']
            regions_data = channels_data.get('regions', {})
            
            channels_text = f"üì∫ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã</b>\n\n"
            channels_text += f"üîç –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{total_channels}</b>\n\n"
            
            if regions_data:
                # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
                for region_key, region_info in regions_data.items():
                    region_name = region_info['name']
                    region_count = region_info['count']
                    region_channels = region_info['channels']
                    
                    channels_text += f"<b>{region_name}</b> ({region_count})\n"
                    
                    if region_channels:
                        for i, channel in enumerate(region_channels, 1):
                            username = channel.get('username', 'unknown')
                            title = channel.get('title', f'@{username}')
                            channels_text += f"  {i}. @{username}"
                            if title and title != f'@{username}' and title != f'–ö–∞–Ω–∞–ª @{username}':
                                channels_text += f" ‚Äì <i>{title}</i>"
                            channels_text += "\n"
                    else:
                        channels_text += "  <i>–ö–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç</i>\n"
                    
                    channels_text += "\n"
            else:
                # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if channels_data['channels']:
                    channels_text += "<b>üì∫ –í—Å–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
                    for i, channel in enumerate(channels_data['channels'], 1):
                        username = channel.get('username', 'unknown')
                        title = channel.get('title', f'@{username}')
                        channels_text += f"  {i}. @{username}"
                        if title and title != f'@{username}':
                            channels_text += f" ‚Äì <i>{title}</i>"
                        channels_text += "\n"
                    channels_text += "\n"
                else:
                    channels_text += "üì≠ –ö–∞–Ω–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n\n"
            
            keyboard = [
                [
                    {"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "callback_data": "add_channel"},
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}
                ]
            ]
            
            await self.edit_message_with_keyboard(channels_text, keyboard, use_reply_keyboard=False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã channels: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    
    async def cmd_stats(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            if not self.monitor_bot or not self.monitor_bot.database:
                await self.send_message("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            stats = await self.monitor_bot.database.get_today_stats()
            
            stats_text = (
                "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
                f"üì∞ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{stats['total_messages']}</b>\n"
                f"üì§ –û—Ç–æ–±—Ä–∞–Ω–æ: <b>{stats['selected_messages']}</b>\n"
                f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–±–æ—Ä–∞: <b>{(stats['selected_messages'] / max(stats['total_messages'], 1) * 100):.1f}%</b>\n\n"
                f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now(pytz.timezone('Asia/Vladivostok')).strftime('%d.%m.%Y %H:%M:%S')}"
            )
            
            keyboard = [
                [
                    {"text": "üìä –°—Ç–∞—Ç—É—Å", "callback_data": "status"},
                    {"text": "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", "callback_data": "manage_channels"}
                ],
                [
                    {"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "callback_data": "clear_stats"},
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}
                ]
            ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç
            chat_id = message.get("chat", {}).get("id") if message else self.admin_chat_id
            to_group = self.is_message_from_group(chat_id) if chat_id else None
            
            await self.send_message_with_keyboard(stats_text, keyboard, use_reply_keyboard=False, to_group=to_group)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã stats: {e}")
            await self.send_command_response("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", message)
    
    async def clear_stats_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if not self.monitor_bot or not self.monitor_bot.database:
                await self.send_message("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return
            
            success = await self.monitor_bot.database.clear_today_stats()
            
            if success:
                clear_text = (
                    "üóëÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n"
                    "‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª–µ–Ω—ã\n"
                    "üìä –°—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –Ω–æ–ª—å\n\n"
                    "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."
                )
            else:
                clear_text = (
                    "‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                )
            
            keyboard = [
                [
                    {"text": "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"},
                    {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}
                ]
            ]
            
            await self.edit_message_with_keyboard(clear_text, keyboard, use_reply_keyboard=False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def cmd_settings(self, message):
        """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        delete_status = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if self.delete_commands else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
        edit_status = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if self.edit_messages else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>\n\n"
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥:</b> {delete_status}\n"
            f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {edit_status}\n\n"
            "üîß <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            "‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥</b> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫\n"
            "‚Ä¢ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b> - –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –í–∫–ª—é—á–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞"
        )
        
        keyboard = [
            [
                {"text": f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ: {delete_status}", "callback_data": "toggle_delete"},
                {"text": f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {edit_status}", "callback_data": "toggle_edit"}
            ],
            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]
        ]
        
        await self.edit_message_with_keyboard(settings_text, keyboard, use_reply_keyboard=False, chat_id=self.current_callback_chat_id)
    
    async def add_channel_handler(self, channel_link: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É
            if channel_link.startswith("https://t.me/"):
                channel_name = channel_link.replace("https://t.me/", "")
            elif channel_link.startswith("@"):
                channel_name = channel_link[1:]
            elif channel_link.startswith("t.me/"):
                channel_name = channel_link.replace("t.me/", "")
            else:
                channel_name = channel_link
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
            if channel_name.startswith("+"):
                await self.send_message("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ –ø—É—Å—Ç–æ–π
            if not channel_name.strip():
                await self.send_message("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
            success = await self.add_channel_to_config(channel_name)
            
            if success:
                success_text = (
                    "‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: @{channel_name}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: https://t.me/{channel_name}\n\n"
                    "üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"
                )
                await self.send_message(success_text)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_name}")
            else:
                await self.send_message("‚ùå –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
    
    async def add_channel_to_config(self, channel_name: str, region: str = "general") -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            import yaml
            config_path = "config/channels_config.yaml"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f) or {}
            except FileNotFoundError:
                config = {}
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if "regions" not in config:
                config["regions"] = {
                    "sakhalin": {
                        "name": "üèùÔ∏è –°–∞—Ö–∞–ª–∏–Ω",
                        "channels": []
                    },
                    "kamchatka": {
                        "name": "üåã –ö–∞–º—á–∞—Ç–∫–∞", 
                        "channels": []
                    },
                    "chita": {
                        "name": "üèîÔ∏è –ß–∏—Ç–∞",
                        "channels": []
                    },
                    "general": {
                        "name": "üì∞ –û–±—â–∏–µ",
                        "channels": []
                    }
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–≥–∏–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if region not in config["regions"]:
                config["regions"][region] = {
                    "name": f"üìÇ {region.title()}",
                    "channels": []
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–∫—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if "channels" not in config["regions"][region]:
                config["regions"][region]["channels"] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª –≤ –ª—é–±–æ–º —Ä–µ–≥–∏–æ–Ω–µ
            for region_key, region_data in config["regions"].items():
                for channel in region_data.get("channels", []):
                    if channel.get("username") == channel_name:
                        return False  # –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            new_channel = {
                "username": channel_name,
                "title": f"–ö–∞–Ω–∞–ª @{channel_name}"
            }
            
            config["regions"][region]["channels"].append(new_channel)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, allow_unicode=True, indent=2, default_flow_style=False)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –±–æ—Ç –∑–∞–Ω–æ–≤–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            try:
                if hasattr(self, 'main_instance') and self.main_instance:
                    self.main_instance.clear_subscription_cache()
                    logger.info("üóëÔ∏è –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                elif hasattr(self, 'monitor_bot') and self.monitor_bot:
                    self.monitor_bot.clear_subscription_cache()
                    logger.info("üóëÔ∏è –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
            except Exception as cache_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫: {cache_error}")
            
            logger.info(f"üìù –ö–∞–Ω–∞–ª {channel_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω {region} –≤ {config_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ñ–∏–≥: {e}")
            raise e
    
    async def get_channels_from_config(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            import yaml
            config_path = "config/channels_config.yaml"
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f) or {}
            
            all_channels = []
            regions_data = {}
            
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
            if "regions" in config:
                for region_key, region_data in config["regions"].items():
                    region_name = region_data.get("name", region_key.title())
                    region_channels = region_data.get("channels", [])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
                    for channel in region_channels:
                        channel_with_region = channel.copy()
                        channel_with_region["region"] = region_key
                        channel_with_region["region_name"] = region_name
                        all_channels.append(channel_with_region)
                    
                    regions_data[region_key] = {
                        "name": region_name,
                        "count": len(region_channels),
                        "channels": region_channels
                    }
            else:
                # –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if "channels" in config:
                    all_channels = config["channels"]
                elif "regular_channels" in config or "vip_channels" in config:
                    all_channels = config.get("regular_channels", []) + config.get("vip_channels", [])
            
            return {
                "channels": all_channels,
                "total": len(all_channels),
                "regions": regions_data
            }
            
        except FileNotFoundError:
            return {"channels": [], "total": 0, "regions": {}}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return {"channels": [], "total": 0, "regions": {}}
    
    async def remove_channel_handler(self, channel_name: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            await self.send_message(f"‚úÖ –ö–∞–Ω–∞–ª @{channel_name} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
    
    async def start_listening(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        self.is_listening = True
        import time
        self.start_time = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
        logger.info("üëÇ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offset —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            updates = await self.get_updates()
            if updates:
                last_update_id = max(update["update_id"] for update in updates)
                self.update_offset = last_update_id + 1
                logger.info(f"‚è≠Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω offset {self.update_offset} –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ {len(updates)} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å offset: {e}")
        
        try:
            while self.is_listening:
                updates = await self.get_updates()
                if not updates:
                    # –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ (long polling —É–∂–µ –∂–¥—ë—Ç)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É, –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è offset —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                for update in updates:
                    try:
                        await self.process_update(update)
                    except Exception as process_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {process_error}")
                        # –ù–µ –ø–æ–≤—ã—à–∞–µ–º offset –≤—Ä—É—á–Ω—É—é ‚Äî –æ–Ω —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ process_update
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            self.is_listening = False
            logger.info("üõë –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def stop_listening(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        self.is_listening = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥...")

    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ì–ò–û–ù–ê–ú–ò ===
    
    async def start_create_region_flow(self):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
        try:
            text = (
                "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞</b>\n\n"
                "üìù <b>–®–∞–≥ 1 –∏–∑ 2:</b> –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞:\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫</code>\n"
                "‚Ä¢ <code>–ë–∞–π–∫–∞–ª</code>\n"
                "‚Ä¢ <code>–ò—Ä–∫—É—Ç—Å–∫</code>\n"
                "‚Ä¢ <code>–Ø–∫—É—Ç–∏—è</code>\n"
                "‚Ä¢ <code>–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</code>\n\n"
                "üí° –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –≤—ã–±–µ—Ä–µ—Ç–µ —ç–º–æ–¥–∑–∏!\n\n"
                "‚ùå –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
            )
            
            keyboard = [[{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}]]
            
            await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
            self.waiting_for_region_name = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def handle_region_creation(self, region_input: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ - –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —ç–º–æ–¥–∑–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –±–µ–∑ —ç–º–æ–¥–∑–∏
            region_name_clean = region_input.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if not region_name_clean or len(region_name_clean) < 2:
                await self.send_message(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫</code>"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            if any(ord(char) > 127 for char in region_name_clean if len(char.encode('utf-8')) > 3):
                await self.send_message(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏!\n\n"
                    "–≠–º–æ–¥–∑–∏ –≤—ã–±–µ—Ä–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ üòä\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫</code>"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Ä–µ–≥–∏–æ–Ω–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π)
            import re
            region_key = re.sub(r'[^a-zA-Z0-9]', '_', 
                              region_name_clean.lower()
                              .replace('—ë', 'e')
                              .replace('–∞', 'a')
                              .replace('–±', 'b')
                              .replace('–≤', 'v')
                              .replace('–≥', 'g')
                              .replace('–¥', 'd')
                              .replace('–µ', 'e')
                              .replace('–∂', 'zh')
                              .replace('–∑', 'z')
                              .replace('–∏', 'i')
                              .replace('–π', 'y')
                              .replace('–∫', 'k')
                              .replace('–ª', 'l')
                              .replace('–º', 'm')
                              .replace('–Ω', 'n')
                              .replace('–æ', 'o')
                              .replace('–ø', 'p')
                              .replace('—Ä', 'r')
                              .replace('—Å', 's')
                              .replace('—Ç', 't')
                              .replace('—É', 'u')
                              .replace('—Ñ', 'f')
                              .replace('—Ö', 'h')
                              .replace('—Ü', 'c')
                              .replace('—á', 'ch')
                              .replace('—à', 'sh')
                              .replace('—â', 'sch')
                              .replace('—ä', '')
                              .replace('—ã', 'y')
                              .replace('—å', '')
                              .replace('—ç', 'e')
                              .replace('—é', 'yu')
                              .replace('—è', 'ya'))
            region_key = region_key.strip('_').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π
            if not region_key:
                region_key = f"region_{len(self.monitor_bot.regions_config) + 1}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–ª—é—á, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —ç–º–æ–¥–∑–∏
            self.pending_region_data = {
                'key': region_key,
                'name_clean': region_name_clean,
            }
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —ç–º–æ–¥–∑–∏
            await self.show_emoji_selection(region_name_clean)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await self.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞")
    
    async def show_emoji_selection(self, region_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
        try:
            text = (
                f"üé® <b>–®–∞–≥ 2 –∏–∑ 2:</b> –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏\n\n"
                f"üìã <b>–†–µ–≥–∏–æ–Ω:</b> {region_name}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:"
            )
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤
            popular_emojis = [
                ("üåä", "–ú–æ—Ä–µ/–ø–æ–±–µ—Ä–µ–∂—å–µ"), ("üèîÔ∏è", "–ì–æ—Ä—ã"), ("üå≤", "–¢–∞–π–≥–∞/–ª–µ—Å"), 
                ("‚ùÑÔ∏è", "–°–µ–≤–µ—Ä/–∑–∏–º–∞"), ("üåã", "–í—É–ª–∫–∞–Ω—ã"), ("üèùÔ∏è", "–û—Å—Ç—Ä–æ–≤–∞"),
                ("üèúÔ∏è", "–°—Ç–µ–ø–∏/–ø—É—Å—Ç—ã–Ω–∏"), ("üåæ", "–ü–æ–ª—è/—Ä–∞–≤–Ω–∏–Ω—ã"), ("üèûÔ∏è", "–ü—Ä–∏—Ä–æ–¥–∞"),
                ("üå∏", "–¶–µ–Ω—Ç—Ä/–∫—Ä–∞—Å–æ—Ç–∞"), ("‚ö°", "–≠–Ω–µ—Ä–≥–∏—è/–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å"), ("üö¢", "–ü–æ—Ä—Ç—ã/–º–æ—Ä–µ")
            ]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–º–æ–¥–∑–∏
            keyboard = []
            row = []
            for i, (emoji, description) in enumerate(popular_emojis):
                button_text = f"{emoji}"
                callback_data = f"emoji_{emoji}"
                
                row.append({"text": button_text, "callback_data": callback_data})
                
                # –ü–æ 4 —ç–º–æ–¥–∑–∏ –≤ —Ä—è–¥
                if len(row) == 4 or i == len(popular_emojis) - 1:
                    keyboard.append(row)
                    row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.append([{"text": "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —ç–º–æ–¥–∑–∏", "callback_data": "emoji_custom"}])
            keyboard.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}])
            
            await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏: {e}")
    
    async def load_regions_from_config(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ config.yaml"""
        try:
            config_path = os.path.join("config", "config.yaml")
            
            if not os.path.exists(config_path):
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                return []
            
            with open(config_path, 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
            
            regions = []
            regions_config = config.get('regions', {})
            
            for region_key, region_data in regions_config.items():
                if isinstance(region_data, dict):
                    regions.append({
                        'key': region_key,
                        'name': region_data.get('name', region_key),
                        'emoji': region_data.get('emoji', 'üìç'),
                        'channels_count': 0  # –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
                    })
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ config.yaml")
            return regions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ config.yaml: {e}")
            return []
    
    async def handle_emoji_selection(self, emoji: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            if not self.pending_region_data:
                await self.send_message("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            region_key = self.pending_region_data['key']
            region_name_clean = self.pending_region_data['name_clean']
            region_full_name = f"{emoji} {region_name_clean}"
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            await self.show_region_creation_confirmation(
                region_key, region_full_name, emoji, region_name_clean
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏: {e}")
    
    async def start_custom_emoji_input(self):
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏"""
        try:
            text = (
                "‚úèÔ∏è <b>–í–≤–æ–¥ —Å–≤–æ–µ–≥–æ —ç–º–æ–¥–∑–∏</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞:\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "üåç üóª üèôÔ∏è üåÖ ‚≠ê üî• üíé üéØ\n\n"
                "üí° –õ—é–±–æ–π —ç–º–æ–¥–∑–∏ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä!"
            )
            
            keyboard = [[{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}]]
            
            await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏
            self.waiting_for_emoji = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ —ç–º–æ–¥–∑–∏: {e}")
    
    async def handle_custom_emoji_input(self, emoji_input: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏"""
        try:
            emoji = emoji_input.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏ —ç—Ç–æ —ç–º–æ–¥–∑–∏
            if len(emoji) != 1:
                await self.send_message(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏!\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: üåç"
                )
                return
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏ (Unicode –≤—ã—à–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞)
            if ord(emoji) < 128:
                await self.send_message(
                    "‚ùå –≠—Ç–æ –Ω–µ —ç–º–æ–¥–∑–∏!\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üåç üóª ‚≠ê"
                )
                return
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —ç–º–æ–¥–∑–∏
            await self.handle_emoji_selection(emoji)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏: {e}")
            await self.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def show_region_creation_confirmation(self, region_key: str, region_full_name: str, 
                                              region_emoji: str, region_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞"""
        try:
            text = (
                f"üîç <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞</b>\n\n"
                f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {region_full_name}\n"
                f"üîë <b>–ö–ª—é—á:</b> <code>{region_key}</code>\n"
                f"üéØ <b>–≠–º–æ–¥–∑–∏:</b> {region_emoji}\n\n"
                f"üí≠ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ù–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤\n\n"
                f"‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ?"
            )
            
            keyboard = [
                [
                    {"text": "‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–µ–≥–∏–æ–Ω", "callback_data": f"confirm_create_{region_key}"},
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "region_cancel"}
                ]
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            self.pending_region_data = {
                'key': region_key,
                'name': region_full_name,
                'emoji': region_emoji,
                'description': f"–†–µ–≥–∏–æ–Ω {region_name}"
            }
            
            await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")
    
    async def create_region_confirmed(self, region_key: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞"""
        try:
            if not hasattr(self, 'pending_region_data') or not self.pending_region_data:
                await self.send_message("‚ùå –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                return
            
            data = self.pending_region_data
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç
            if self.monitor_bot:
                success = self.monitor_bot.add_new_region(
                    region_key=data['key'],
                    region_name=data['name'],
                    region_emoji=data['emoji'],
                    region_description=data['description']
                )
                
                if success:
                    # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
                    if self.pending_channel_url:
                        await self.add_channel_to_config(self.pending_channel_url, data['key'])
                        
                        text = (
                            f"üéâ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
                            f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω: {data['name']}\n"
                            f"‚úÖ –ö–∞–Ω–∞–ª @{self.pending_channel_url} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω\n\n"
                            f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                        )
                    else:
                        text = (
                            f"üéâ <b>–†–µ–≥–∏–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                            f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω: {data['name']}\n\n"
                            f"üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–≥–æ –∫–∞–Ω–∞–ª—ã"
                        )
                    
                    keyboard = [[{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "start"}]]
                    await self.edit_message_with_keyboard(text, keyboard, use_reply_keyboard=False)
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    self.pending_region_data = None
                    self.pending_channel_url = None
                else:
                    await self.send_message("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞")
            else:
                await self.send_message("‚ùå –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def create_bot_from_config(config: Dict, monitor_bot=None) -> Optional[TelegramBot]:
    """–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        bot_config = config.get('bot')
        if not bot_config:
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        token = bot_config.get('token')
        admin_chat_id = bot_config.get('chat_id')
        group_chat_id = bot_config.get('group_chat_id')  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        
        if not token or not admin_chat_id:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ chat_id")
            return None
        
        bot = TelegramBot(token, admin_chat_id, group_chat_id, monitor_bot)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if await bot.test_connection():
            return bot
        else:
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return None
