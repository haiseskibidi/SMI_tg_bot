"""
üñ•Ô∏è System Monitor Module
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
–û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è VPS —Å 1GB RAM
"""

import psutil
import asyncio
from datetime import datetime
from typing import Dict, Optional, List
from loguru import logger


class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self, memory_limit_mb: int = 800):
        self.memory_limit_mb = memory_limit_mb
        self.memory_limit_percent = 80  
        
        
        self.memory_warnings = 0
        self.cpu_warnings = 0
        
        logger.info(f"üñ•Ô∏è SystemMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ª–∏–º–∏—Ç RAM: {memory_limit_mb}MB)")
    
    def get_memory_usage(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏"""
        try:
            memory = psutil.virtual_memory()
            
            return {
                'total_mb': round(memory.total / 1024 / 1024, 1),
                'available_mb': round(memory.available / 1024 / 1024, 1),
                'used_mb': round(memory.used / 1024 / 1024, 1),
                'used_percent': memory.percent,
                'free_mb': round(memory.free / 1024 / 1024, 1)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {e}")
            return {}
    
    def get_cpu_usage(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ CPU"""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            load_avg = psutil.getloadavg() if hasattr(psutil, 'getloadavg') else (0, 0, 0)
            
            return {
                'cpu_percent': cpu_percent,
                'cpu_count': cpu_count,
                'load_1min': load_avg[0],
                'load_5min': load_avg[1],
                'load_15min': load_avg[2]
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU: {e}")
            return {}
    
    def get_disk_usage(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞"""
        try:
            disk = psutil.disk_usage('/')
            
            return {
                'total_gb': round(disk.total / 1024 / 1024 / 1024, 1),
                'used_gb': round(disk.used / 1024 / 1024 / 1024, 1),
                'free_gb': round(disk.free / 1024 / 1024 / 1024, 1),
                'used_percent': round(disk.used / disk.total * 100, 1)
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {e}")
            return {}
    
    def get_process_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            process = psutil.Process()
            
            return {
                'memory_mb': round(process.memory_info().rss / 1024 / 1024, 1),
                'memory_percent': round(process.memory_percent(), 2),
                'cpu_percent': round(process.cpu_percent(), 2),
                'num_threads': process.num_threads(),
                'create_time': datetime.fromtimestamp(process.create_time()).isoformat()
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            return {}
    
    def check_memory_usage(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏"""
        try:
            memory_info = self.get_memory_usage()
            
            if not memory_info:
                return False
            
            used_percent = memory_info.get('used_percent', 0)
            used_mb = memory_info.get('used_mb', 0)
            
            
            memory_critical = (
                used_percent > self.memory_limit_percent or 
                used_mb > self.memory_limit_mb
            )
            
            if memory_critical:
                self.memory_warnings += 1
                logger.warning(
                    f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: "
                    f"{used_percent}% ({used_mb}MB) "
                    f"–ª–∏–º–∏—Ç: {self.memory_limit_percent}% ({self.memory_limit_mb}MB)"
                )
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    def check_cpu_usage(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ CPU"""
        try:
            cpu_info = self.get_cpu_usage()
            
            if not cpu_info:
                return False
            
            cpu_percent = cpu_info.get('cpu_percent', 0)
            
            
            if cpu_percent > 90:
                self.cpu_warnings += 1
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU: {cpu_percent}%")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CPU: {e}")
            return False
    
    def check_disk_space(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
        try:
            disk_info = self.get_disk_usage()
            
            if not disk_info:
                return False
            
            used_percent = disk_info.get('used_percent', 0)
            free_gb = disk_info.get('free_gb', 0)
            
            
            if used_percent > 90 or free_gb < 1:
                logger.warning(
                    f"‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: "
                    f"{used_percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, {free_gb}GB —Å–≤–æ–±–æ–¥–Ω–æ"
                )
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞: {e}")
            return False
    
    def get_full_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            'timestamp': datetime.now().isoformat(),
            'memory': self.get_memory_usage(),
            'cpu': self.get_cpu_usage(),
            'disk': self.get_disk_usage(),
            'process': self.get_process_info(),
            'warnings': {
                'memory_warnings': self.memory_warnings,
                'cpu_warnings': self.cpu_warnings
            }
        }
    
    def log_system_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = self.get_full_system_status()
            
            memory = status.get('memory', {})
            cpu = status.get('cpu', {})
            process = status.get('process', {})
            
            logger.info(
                f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: "
                f"RAM {memory.get('used_percent', 0):.1f}% "
                f"({memory.get('used_mb', 0):.1f}MB), "
                f"CPU {cpu.get('cpu_percent', 0):.1f}%, "
                f"–ü—Ä–æ—Ü–µ—Å—Å: {process.get('memory_mb', 0):.1f}MB"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def monitor_loop(self, interval_seconds: int = 300):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        logger.info(f"üñ•Ô∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds}—Å)")
        
        while True:
            try:
                
                memory_critical = self.check_memory_usage()
                cpu_critical = self.check_cpu_usage()
                disk_critical = self.check_disk_space()
                
                
                self.log_system_status()
                
                
                if memory_critical or cpu_critical or disk_critical:
                    logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏!")
                
                await asyncio.sleep(interval_seconds)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  
    
    def check_memory_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏"""
        try:
            memory_info = self.get_memory_usage()
            used_percent = memory_info.get('used_percent', 0)
            
            if used_percent > self.memory_limit_percent:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {used_percent}% > {self.memory_limit_percent}%")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    def suggest_optimizations(self) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        suggestions = []
        
        try:
            memory_info = self.get_memory_usage()
            cpu_info = self.get_cpu_usage()
            disk_info = self.get_disk_usage()
            
            
            if memory_info.get('used_percent', 0) > 70:
                suggestions.append("üßπ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                suggestions.append("üìâ –°–Ω–∏–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            
            
            if cpu_info.get('cpu_percent', 0) > 80:
                suggestions.append("‚è±Ô∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API")
                suggestions.append("üîÑ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—É–∑ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
            
            
            if disk_info.get('used_percent', 0) > 80:
                suggestions.append("üìÅ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∏ –¥–∞–Ω–Ω—ã–µ")
                suggestions.append("üóÉÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            
            if memory_info.get('total_mb', 0) < 1200:  
                suggestions.extend([
                    "‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ RAM",
                    "üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –º–µ–Ω—å—à–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏",
                    "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å swap —Ñ–∞–π–ª –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏"
                ])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            suggestions.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
        
        return suggestions
    
    def is_system_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            memory_ok = not self.check_memory_usage()
            cpu_ok = not self.check_cpu_usage()
            disk_ok = not self.check_disk_space()
            
            return memory_ok and cpu_ok and disk_ok
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
