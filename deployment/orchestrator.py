#!/usr/bin/env python3
"""
üéØ SMI#1 Multi-Department Bot Orchestrator
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 7 –±–æ—Ç–∞–º–∏ –¥–ª—è –º–µ–¥–∏–∞-—Ö–æ–ª–¥–∏–Ω–≥–∞
"""

import asyncio
import subprocess
import psutil
import yaml
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path
from loguru import logger


class SMIBotOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–æ–≤"""
    
    def __init__(self):
        self.departments = [
            "sakhalin",    # –°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
            "kamchatka",   # –ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π
            "primorye",    # –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π
            "khabarovsk",  # –•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π
            "magadan",     # –ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
            "chukotka",    # –ß—É–∫–æ—Ç—Å–∫–∏–π –ê–û
            "yakutia"      # –†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)
        ]
        
        self.bot_processes: Dict[str, subprocess.Popen] = {}
        self.monitoring_data: Dict[str, Dict] = {}
        
    def get_server_resources(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            "cpu_count": psutil.cpu_count(),
            "cpu_percent": psutil.cpu_percent(interval=1),
            "memory_total_gb": round(psutil.virtual_memory().total / (1024**3), 2),
            "memory_available_gb": round(psutil.virtual_memory().available / (1024**3), 2),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_usage_percent": psutil.disk_usage('/').percent
        }
    
    def calculate_resource_allocation(self) -> Dict[str, Dict]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞"""
        resources = self.get_server_resources()
        
        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ –æ–¥–∏–Ω –±–æ—Ç
        per_bot_cpu = min(2, resources["cpu_count"] // len(self.departments))
        per_bot_memory = min(2, resources["memory_total_gb"] // len(self.departments))
        
        allocation = {}
        for dept in self.departments:
            allocation[dept] = {
                "cpu_cores": per_bot_cpu,
                "memory_gb": per_bot_memory,
                "priority": "high" if dept in ["sakhalin", "kamchatka"] else "normal"
            }
        
        return allocation
    
    async def start_bot(self, department: str) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–¥–µ–ª–∞: {department}")
            
            # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª–∞
            dept_path = Path(f"/opt/smi-monitoring/{department}")
            dept_path.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –±–æ—Ç–∞
            subprocess.run([
                "cp", "-r", "/opt/smi-monitoring/src", 
                str(dept_path)
            ], check=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
            env = {
                "DEPARTMENT": department,
                "CONFIG_PATH": f"{dept_path}/config/config.yaml",
                "DB_PATH": f"{dept_path}/data/news_monitor.db",
                "LOG_PATH": f"{dept_path}/logs"
            }
            
            process = subprocess.Popen(
                ["python3", "main.py"],
                cwd=str(dept_path),
                env={**os.environ, **env},
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            self.bot_processes[department] = process
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            await asyncio.sleep(3)
            if process.poll() is None:
                logger.success(f"‚úÖ –ë–æ—Ç {department} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                return True
            else:
                logger.error(f"‚ùå –ë–æ—Ç {department} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {department}: {e}")
            return False
    
    async def stop_bot(self, department: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
        try:
            if department in self.bot_processes:
                process = self.bot_processes[department]
                process.terminate()
                
                # –ñ–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    process.kill()
                
                del self.bot_processes[department]
                logger.info(f"üõë –ë–æ—Ç {department} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {department}: {e}")
            return False
    
    async def restart_bot(self, department: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
        await self.stop_bot(department)
        await asyncio.sleep(2)
        return await self.start_bot(department)
    
    async def monitor_bots(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        while True:
            try:
                for dept, process in self.bot_processes.items():
                    if process.poll() is not None:
                        # –ë–æ—Ç —É–ø–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
                        logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {dept} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                        await self.start_bot(dept)
                
                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.monitoring_data = {
                    "timestamp": datetime.now().isoformat(),
                    "server": self.get_server_resources(),
                    "bots": {}
                }
                
                for dept in self.departments:
                    if dept in self.bot_processes:
                        process = self.bot_processes[dept]
                        if process.poll() is None:
                            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
                            try:
                                p = psutil.Process(process.pid)
                                self.monitoring_data["bots"][dept] = {
                                    "status": "running",
                                    "pid": process.pid,
                                    "cpu_percent": p.cpu_percent(),
                                    "memory_mb": round(p.memory_info().rss / (1024**2), 2),
                                    "threads": p.num_threads()
                                }
                            except:
                                self.monitoring_data["bots"][dept] = {"status": "error"}
                        else:
                            self.monitoring_data["bots"][dept] = {"status": "stopped"}
                    else:
                        self.monitoring_data["bots"][dept] = {"status": "not_started"}
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                running = sum(1 for b in self.monitoring_data["bots"].values() 
                            if b.get("status") == "running")
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {running}/{len(self.departments)} –±–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)
    
    async def start_all(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –±–æ—Ç—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ SMI#1...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        resources = self.get_server_resources()
        logger.info(f"üìä –†–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞: CPU: {resources['cpu_count']} —è–¥–µ—Ä, "
                   f"RAM: {resources['memory_total_gb']}GB")
        
        if resources["memory_available_gb"] < 14:  # 7 –±–æ—Ç–æ–≤ * 2GB
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for dept in self.departments:
            success = await self.start_bot(dept)
            if success:
                await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç {dept}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        asyncio.create_task(self.monitor_bots())
        
        logger.success(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self.bot_processes)}/{len(self.departments)} –±–æ—Ç–æ–≤")
    
    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –±–æ—Ç—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        
        for dept in list(self.bot_processes.keys()):
            await self.stop_bot(dept)
        
        logger.info("‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def get_status_report(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        report = "üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´ SMI#1\n"
        report += "=" * 50 + "\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        resources = self.get_server_resources()
        report += f"üñ•Ô∏è –°–ï–†–í–ï–†:\n"
        report += f"  CPU: {resources['cpu_percent']}% ({resources['cpu_count']} —è–¥–µ—Ä)\n"
        report += f"  RAM: {resources['memory_percent']}% "
        report += f"({resources['memory_available_gb']}GB —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ {resources['memory_total_gb']}GB)\n"
        report += f"  –î–∏—Å–∫: {resources['disk_usage_percent']}%\n\n"
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤
        report += "ü§ñ –ë–û–¢–´:\n"
        for dept in self.departments:
            if dept in self.monitoring_data.get("bots", {}):
                bot_data = self.monitoring_data["bots"][dept]
                status = bot_data.get("status", "unknown")
                
                if status == "running":
                    report += f"  ‚úÖ {dept.upper()}: –†–∞–±–æ—Ç–∞–µ—Ç "
                    report += f"(PID: {bot_data.get('pid')}, "
                    report += f"CPU: {bot_data.get('cpu_percent')}%, "
                    report += f"RAM: {bot_data.get('memory_mb')}MB)\n"
                elif status == "stopped":
                    report += f"  üî¥ {dept.upper()}: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
                else:
                    report += f"  ‚ö†Ô∏è {dept.upper()}: {status}\n"
            else:
                report += f"  ‚ö™ {dept.upper()}: –ù–µ –∑–∞–ø—É—â–µ–Ω\n"
        
        return report


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.add("orchestrator.log", rotation="100 MB")
    
    orchestrator = SMIBotOrchestrator()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –±–æ—Ç—ã
        await orchestrator.start_all()
        
        # –î–µ—Ä–∂–∏–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
        while True:
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            print(orchestrator.get_status_report())
            await asyncio.sleep(300)
            
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await orchestrator.stop_all()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await orchestrator.stop_all()


if __name__ == "__main__":
    import os
    asyncio.run(main())